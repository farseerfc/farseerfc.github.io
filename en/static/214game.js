            var controls;
            window.onload = function() {
			var RENDER_WIDTH = 600, RENDER_HEIGHT = 450;

                // Creating scene
			var scene = new THREE.Scene();

                // Camera
			var camera = new THREE.PerspectiveCamera(45, RENDER_WIDTH / RENDER_HEIGHT, 0.1, 10000);
			camera.position.set(90, 2, 120);
			controls = new THREE.FirstPersonControls( camera );
			controls.movementSpeed = 10;
			controls.lookSpeed = 40;
			controls.lon = 196;

			var winPosition = new THREE.Vector3( 0, 2, 0 )
						
			// Ground
			
			var groundMaterial = new THREE.MeshBasicMaterial({color: 0x656567});
			var ground = new THREE.Mesh(
                    new THREE.CubeGeometry(200, 1, 200),
                    groundMaterial
                );
			ground.position.set(10, 0, 80);
			scene.add(ground);
			
                // Polyhedron
                var polyhedronData = [[[22.907, 15.8383, 47.0232], [21.7635, 12.9775, 44.6759], [20.2224, 13.2202, 45.6635], [22.3408, 14.3981, 47.2941]],
 [[27.2453, 18.4591, 55.9288], [24.1763, 15.414, 54.5917], [23.9562, 18.839, 57.2198], [26.3104, 18.3212, 58.5251]],
 [[52.1523, 30.9361, 117.763], [46.2176, 32.1114, 122.547], [50.49, 37.4898, 120.596], [51.6902, 34.8314, 125.191]],
 [[57.0334, 33.6443, 128.785], [48.0618, 33.313, 127.437], [45.3245, 25.8801, 120.478], [53.0165, 32.6301, 132.962]],
 [[39.4771, 23.9034, 89.1419], [33.7942, 19.8051, 89.8292], [39.6405, 17.3747, 89.6094], [39.0599, 21.127, 92.8943]],
 [[38.3702, 4.48351, 86.9228], [40.655, 4.40562, 84.1968], [41.6412, 0.887922, 86.495], [41.3716, 3.3349, 88.293]],
 [[31.461, 4.03631, 71.2709], [36.3352, 1.02962, 75.4736], [28.2165, 1.09763, 70.1842], [33.3442, 2.07267, 75.5026]],
 [[61.1535, 5.95816, 138.535], [52.6753, 6.03642, 141.275], [62.3868, 14.2452, 141.207], [60.7004, 9.00438, 144.974]],
 [[45.2154, 4.92656, 102.43], [36.7313, 4.81466, 98.5131], [38.369, 0.772953, 95.437], [41.9138, 3.54459, 103.378]],
 [[15.8074, 1.36203, 49.6197], [15.8059, 3.40497, 49.174], [17.9131, 3.37265, 48.0428], [17.3511, 2.8301, 51.3924]],
 [[19.5306, 1.21177, 61.3067], [22.4098, 3.71722, 60.1028], [23.7991, 1.2389, 59.1965], [23.193, 2.13645, 63.6318]],
 [[29.5238, 4.26236, 79.1826], [31.9517, 13.2244, 85.229], [35.3079, 8.93017, 79.9164], [34.2916, 9.14926, 86.4812]],
 [[17.2757, 13.2554, 45.8068], [15.7552, 13.9907, 48.7993], [15.5936, 16.151, 48.0861], [16.9477, 15.0346, 49.6375]],
 [[28.4163, 20.5137, 75.3463], [24.1908, 23.9529, 74.5973], [32.2083, 24.6394, 76.9302], [29.0608, 23.6689, 77.8346]],
 [[13.9882, 14.5386, 55.0436], [12.0357, 17.027, 54.3204], [10.8321, 14.2675, 55.8075], [13.0387, 16.1917, 58.4002]],
 [[21.927, 21.6547, 86.2824], [20.5455, 15.509, 84.4535], [15.9942, 20.1138, 82.4033], [20.7387, 20.307, 89.972]],
 [[23.4762, 31.3108, 105.954], [18.5258, 34.0661, 108.967], [20.4021, 25.1059, 105.113], [21.6257, 31.2301, 110.772]],
 [[8.18261, 16.1632, 48.1292], [5.2644, 14.9573, 44.4412], [5.52225, 11.5495, 44.452], [6.80082, 15.2483, 49.4364]],
 [[13.5584, 25.468, 79.7488], [15.5248, 19.5822, 79.9847], [9.84074, 19.0174, 79.2141], [13.0997, 21.5655, 80.4748]],
 [[6.53102, 18.0748, 55.1338], [5.03206, 17.0934, 58.5829], [7.45858, 14.898, 60.0387], [6.62188, 17.4113, 60.4584]],
 [[6.77424, 22.319, 78.8653], [5.16015, 18.8372, 77.1296], [9.28315, 18.0532, 74.7257], [7.43881, 20.5915, 80.5565]],
 [[4.0691, 15.2772, 60.8216], [3.4838, 14.1321, 65.3193], [5.5955, 11.5315, 61.5163], [4.68874, 14.449, 66.6025]],
 [[6.22448, 22.3101, 93.0385], [12.112, 22.9452, 97.4972], [8.86277, 17.097, 97.4364], [9.49792, 21.8721, 101.009]],
 [[4.33653, 17.1017, 81.3075], [2.45434, 19.2561, 77.6017], [0.735055, 13.6664, 77.8007], [2.6436, 17.6925, 84.0034]],
 [[6.26388, 23.8136, 117.444], [10.1241, 19.2456, 111.304], [1.09583, 19.3924, 115.987], [6.20642, 21.8686, 121.107]],
 [[1.71721, 14.0735, 54.2952], [0.403668, 16.508, 56.0157], [-1.88701, 14.1248, 58.7127], [0.131127, 15.4763, 58.7655]],
 [[2.25068, 17.8242, 71.1622], [0.694066, 13.0158, 73.4623], [-2.29163, 16.7247, 71.3023], [0.224226, 16.5744, 75.2804]],
 [[0.499137, 19.9392, 69.2635], [-1.84401, 21.6592, 69.0336], [-2.16432, 15.9067, 67.3411], [-1.1973, 19.4023, 69.5496]],
 [[-3.37351, 37.9653, 126.293], [-9.76634, 38.5507, 124.782], [-10.8217, 28.5246, 119.759], [-8.40305, 36.4221, 129.052]],
 [[-3.26144, 36.7705, 122.097], [-4.00285, 27.72, 124.545], [-10.9973, 28.955, 121.703], [-6.39314, 32.6031, 128.536]],
 [[-8.47428, 33.7152, 108.274], [-13.5027, 31.0986, 106.229], [-9.5136, 25.3183, 105.283], [-11.1692, 31.8656, 113.301]],
 [[-6.54544, 16.1056, 51.4946], [-7.79163, 13.5102, 49.6417], [-4.43525, 12.871, 49.083], [-6.66153, 15.012, 53.3735]],
 [[-18.9, 29.9199, 120.415], [-19.0154, 22.5295, 121.15], [-10.2526, 27.1298, 113.462], [-16.9282, 28.1522, 125.618]],
 [[-9.52134, 12.2795, 60.6619], [-7.58516, 8.16021, 59.044], [-3.64331, 11.1425, 60.3005], [-7.00258, 10.6162, 60.7436]],
 [[-10.5647, 13.4059, 67.3091], [-4.15102, 12.4165, 68.7036], [-6.2329, 17.2771, 68.9768], [-7.22946, 14.7893, 70.4766]],
 [[-11.0777, 10.9966, 86.2304], [-5.42293, 5.1245, 85.6117], [-5.25979, 15.1989, 87.0549], [-7.48798, 10.728, 89.0618]],
 [[-7.15811, 6.12426, 113.005], [6.63618, -0.485754, 121.338], [0.318237, 11.3114, 113.904], [-0.248064, 6.23393, 127.044]],
 [[-6.44707, 5.71458, 101.78], [0.303115, 10.869, 108.492], [-6.67235, 18.7435, 110.434], [-4.60394, 12.3384, 114.177]],
 [[5.51443, -0.0655743, 100.828], [16.5213, 5.78843, 103.803], [9.60628, 9.0627, 98.4113], [10.8145, 5.05471, 104.164]],
 [[2.58929, 1.03012, 47.3433], [4.75877, 5.49873, 48.7511], [0.131015, 5.83343, 46.8931], [2.57817, 4.25713, 49.8681]],
 [[15.8136, 5.62615, 99.3569], [21.0969, 11.8391, 99.48], [9.78676, 9.19539, 100.26], [16.0414, 9.13581, 102.644]],
 [[26.6929, 14.449, 125.867], [31.1423, 22.4766, 128.012], [17.8776, 20.7773, 121.189], [25.8965, 19.7886, 128.867]],
 [[22.6782, 12.5766, 106.937], [15.3169, 18.0877, 103.83], [10.5916, 9.78714, 108.506], [16.8763, 14.0602, 110.736]],
 [[13.4088, 10.8165, 55.1174], [11.0556, 14.5207, 56.9593], [7.84671, 10.2416, 53.1913], [11.3977, 12.4727, 58.4607]],
 [[-18.1785, 24.2011, 73.677], [-23.2131, 23.2904, 71.4434], [-18.2939, 19.5884, 74.3749], [-20.5659, 23.0529, 75.4604]],
 [[-21.8789, 16.2783, 89.2766], [-22.3244, 9.84816, 90.4804], [-28.8501, 11.1788, 88.7925], [-24.861, 12.674, 91.3205]],
 [[-29.9618, 21.5532, 122.259], [-41.2233, 15.1154, 126.874], [-39.984, 27.4131, 123.059], [-39.4893, 22.8185, 132.381]],
 [[-34.1323, 24.275, 139.277], [-34.3227, 34.999, 139.541], [-42.3613, 28.9241, 130.376], [-38.1944, 30.2354, 140.429]],
 [[-26.0571, 11.1604, 105.609], [-29.3488, 4.00226, 108.026], [-38.5654, 8.81058, 110.228], [-32.5401, 8.30073, 112.429]],
 [[-16.6786, 7.86339, 67.5984], [-23.4861, 6.1476, 67.1284], [-22.4321, 9.13689, 69.0397], [-22.2413, 8.17724, 72.4066]],
 [[-11.6306, 2.79347, 42.8093], [-15.283, 1.63485, 45.1859], [-15.3282, 4.70693, 43.8113], [-14.8167, 3.1651, 46.3129]],
 [[-32.6782, 1.21924, 96.6169], [-40.1875, 0.9034, 96.1257], [-34.6118, 8.11238, 98.928], [-36.7748, 3.42252, 99.736]],
 [[-58.4197, 0.405897, 139.736], [-69.1959, 5.84738, 143.278], [-53.3997, 9.61817, 134.133], [-64.5924, 5.67385, 149.159]],
 [[-52.8353, 0.558279, 126.378], [-52.1014, 9.43294, 130.872], [-45.5422, 10.0427, 130.169], [-52.8228, 6.9319, 135.902]],
 [[-67.1615, 5.73427, 139.065], [-67.2125, 12.3778, 132.334], [-59.8272, 15.1831, 138.688], [-67.0972, 11.4865, 141.532]],
 [[-59.8665, 5.32865, 123.96], [-52.5345, 13.5762, 121.782], [-49.1326, 9.0094, 123.414], [-55.8531, 9.66493, 127.67]],
 [[-60.4803, 11.3383, 119.079], [-50.9829, 13.2343, 118.185], [-62.1308, 19.9364, 122.328], [-61.138, 15.5952, 126.739]],
 [[-37.5616, 24.2847, 73.9544], [-34.2131, 25.6755, 79.0061], [-31.2898, 20.1845, 72.3209], [-37.7627, 25.5229, 82.4754]],
 [[-40.9093, 26.2709, 80.5456], [-39.5802, 18.3524, 77.9289], [-32.6803, 20.9927, 75.5349], [-40.5625, 23.4422, 84.0119]],
 [[-53.5937, 13.8096, 124.238], [-62.3507, 19.9999, 122.761], [-53.5895, 24.5222, 124.026], [-58.6151, 20.1558, 128.226]],
 [[-35.1141, 34.2057, 108.071], [-25.3285, 26.3517, 102.975], [-34.6409, 24.0172, 106.615], [-32.6363, 29.0191, 109.298]],
 [[40.1292, 23.1428, 106.668], [45.76, 19.7482, 103.443], [40.4022, 16.1929, 107.77], [44.2521, 20.6585, 111.236]],
 [[54.3596, 23.0836, 122.883], [48.3126, 18.9718, 128.871], [58.0149, 13.387, 131.312], [55.5479, 19.2214, 132.354]],
 [[15.7054, 19.7868, 80.9155], [10.2648, 19.7508, 82.6277], [11.393, 13.9663, 77.2308], [13.1316, 18.6667, 84.5662]],
 [[6.26533, 12.8345, 50.4335], [7.8227, 10.2164, 53.0285], [4.58134, 9.80394, 50.3667], [6.69162, 11.7679, 55.3472]],
 [[16.3146, 19.1356, 110.593], [10.7383, 20.2919, 118.056], [10.8839, 10.0021, 111.5], [13.4468, 17.3031, 120.028]],
 [[11.8577, 22.1986, 130.362], [13.5823, 11.9859, 139.144], [0.383958, 13.2344, 137.427], [8.94244, 16.429, 140.188]],
 [[8.7293, 16.8697, 95.969], [0.255507, 9.47601, 91.4517], [0.910057, 16.4439, 96.3236], [3.41117, 14.8388, 99.1607]],
 [[0.32284, 11.4461, 115.552], [-6.75406, 18.9486, 111.787], [1.11033, 19.6225, 117.521], [-1.96688, 17.7335, 122.477]],
 [[-5.43865, 15.6477, 90.0152], [0.835033, 15.2532, 88.3828], [-2.96997, 21.0833, 92.4083], [-2.67738, 18.4592, 96.6436]],
 [[-2.78185, 8.98074, 46.0424], [-1.56474, 12.0541, 48.6856], [-4.38729, 12.7535, 48.5523], [-3.07373, 11.8104, 50.4107]],
 [[-33.3801, 11.6364, 65.7216], [-31.1811, 15.1046, 72.1644], [-34.9214, 16.4276, 68.7561], [-36.4871, 15.6544, 75.6007]],
 [[-26.7623, 13.2475, 61.9378], [-31.5383, 15.0299, 62.0953], [-27.2396, 17.8307, 62.9596], [-29.792, 16.0215, 65.1126]]];

			var material1 = new THREE.MeshBasicMaterial({color: 0xbd0045});
			var material2 = new THREE.MeshBasicMaterial({color: 0xe84f77});
			var material3 = new THREE.MeshBasicMaterial({color: 0xffc30c});
			var material4 = new THREE.MeshBasicMaterial({color: 0xffd762});
			var polyhedronMaterial = new THREE.MeshFaceMaterial( [ material1, material2, material3, material4 ] );
			var geometry, polyhedron, vlist, color;
			for (var i = 0; i < polyhedronData.length; i++) {
				vlist = polyhedronData[i];
				geometry = new THREE.Geometry();
				geometry.vertices.push( new THREE.Vector3( vlist[0][0], vlist[0][1], vlist[0][2] ) );
				geometry.vertices.push( new THREE.Vector3( vlist[1][0], vlist[1][1], vlist[1][2] ) );
				geometry.vertices.push( new THREE.Vector3( vlist[2][0], vlist[2][1], vlist[2][2] ) );
				geometry.vertices.push( new THREE.Vector3( vlist[3][0], vlist[3][1], vlist[3][2] ) );

				geometry.faces.push( new THREE.Face3( 2, 1, 0 ) ); 
				geometry.faces.push( new THREE.Face3( 0, 3, 2 ) ); 
				geometry.faces.push( new THREE.Face3( 1, 3, 0 ) ); 
				geometry.faces.push( new THREE.Face3( 2, 3, 1 ) ); 
				geometry.faces.push( new THREE.Face3( 1, 2, 0 ) ); 
				geometry.faces.push( new THREE.Face3( 3, 0, 2 ) ); 
				geometry.faces.push( new THREE.Face3( 3, 1, 0 ) ); 
				geometry.faces.push( new THREE.Face3( 3, 2, 1 ) ); 
								
				geometry.faces[0].materialIndex = 0;
				geometry.faces[1].materialIndex = 1;
				geometry.faces[2].materialIndex = 2;
				geometry.faces[3].materialIndex = 3;
				geometry.faces[4].materialIndex = 0;
				geometry.faces[5].materialIndex = 1;
				geometry.faces[6].materialIndex = 2;
				geometry.faces[7].materialIndex = 3;
								
				polyhedron = new THREE.Mesh(
					geometry,
					polyhedronMaterial
				);
				scene.add(polyhedron);
                };

                // Render
                var container = document.getElementById('game_area');
                var renderer = new THREE.WebGLRenderer();
                renderer.setSize(RENDER_WIDTH, RENDER_HEIGHT);
                renderer.setClearColorHex(0xE5E5E5, 1);
                container.appendChild(renderer.domElement);

                var clock = new THREE.Clock();
                intControl = setInterval(function() {
                    var delta = clock.getDelta();
                    controlsLonMod360 = ((controls.lon % 360) + 360) % 360
                    if (camera.position.distanceTo(winPosition) < 2 && controlsLonMod360 < 92 && controlsLonMod360 > 88) {
                    	clearInterval(intControl);
                    	controls.freeze = true;
                    	cameraPositionMoveStepX = camera.position.x / 20;
                    	cameraPositionMoveStepZ = camera.position.z / 20;
                    	controlsLonMoveStep = (controlsLonMod360 - 90) / 20;
                    	
                    	var textMaterial = new THREE.MeshBasicMaterial({color: 0x656567});
                    	var textMaterial2 = new THREE.MeshBasicMaterial({color: 0x656567});
                    	var textMaterial3 = new THREE.MeshBasicMaterial({color: 0x656567});
					var text = new THREE.Mesh(
						new THREE.TextGeometry("My love, Angela Liu,", 
							{size: 0.4, height: 0.001 , font: "helvetiker"}),
                    		textMaterial2
					);
					text.position.set(-1.8, 0.8, 13);
					text.lookAt(new THREE.Vector3( 0, 1, -10 ));
					var text3 = new THREE.Mesh(
						new THREE.TextGeometry("My life was a mess, until I met U.", 
							{size: 0.4, height: 0.001 , font: "helvetiker"}),
                    		textMaterial
					);
					text3.position.set(-4.8, 0.8, 25);
					text3.lookAt(new THREE.Vector3( 0, 1, -10 ));
					var text2 = new THREE.Mesh(
						new THREE.TextGeometry("Will U marry me?", 
							{size: 0.4, height: 0.001 , font: "helvetiker"}),
                    		textMaterial3
					);
					text2.position.set(-0.1, 0.8, 8);
					text2.lookAt(new THREE.Vector3( 0, 1, -10 ));
					var parent = new THREE.Object3D();
					parent.add( text );
					parent.add( text2 );
					parent.add( text3 );
					scene.add( parent );
					
                    	for (var i = 1; i <= 20; i++) {
                    		setTimeout(function() {
		                    	camera.translateX( cameraPositionMoveStepX );
		                    	camera.translateZ( cameraPositionMoveStepZ );
     		               	controls.lon = controls.lon - controlsLonMoveStep;
          		          	controls.update(delta);
							renderer.render(scene, camera);
						}, 50*i);
					};
					
                    	for (var i = 1; i <= 30; i++) {
                    		setTimeout(function() {
							textMaterial.color.setHex( textMaterial.color.getHex() + 0x050505);
          		          	controls.update(delta);
							renderer.render(scene, camera);
						}, 2000 + 100 * i);
					};
					for (var i = 1; i <= 30; i++) {
                    		setTimeout(function() {
							textMaterial2.color.setHex( textMaterial2.color.getHex() + 0x050505);
          		          	controls.update(delta);
							renderer.render(scene, camera);
						}, 5000 + 100 * i);
					};
					for (var i = 1; i <= 30; i++) {
                    		setTimeout(function() {
							textMaterial3.color.setHex( textMaterial3.color.getHex() + 0x050505);
          		          	controls.update(delta);
							renderer.render(scene, camera);
						}, 8000 + 100 * i);
					};

                    };
                    controls.update(delta);
                    renderer.render(scene, camera);
                }, 10);
            };