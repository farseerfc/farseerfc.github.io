<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc's Blog</title><link href="//farseerfc.github.io/en/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/tag-template.atom.xml" rel="self"></link><id>//farseerfc.github.io/en/</id><updated>2012-02-26T05:54:57+09:00</updated><entry><title>Discuss C++ Template Downcast</title><link href="//farseerfc.github.io/en/discuss-cpp-template-downcast.html" rel="alternate"></link><updated>2012-02-26T05:54:57+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-26:en/discuss-cpp-template-downcast.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt;This is a discuss in C board in bbs.sjtu.edu.cn, about type down-cast in C++ template.&lt;/p&gt;
&lt;div class="section" id="original-discuss"&gt;
&lt;h2&gt;Original Discuss&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;Today I read a book about we can do cast-down in template, so I write this to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BB&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DD&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//f(b);&lt;/span&gt;
    &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is strange when &lt;/p&gt;&lt;pre&gt;
f&lt;/pre&gt;
 it don’t allow my specified &lt;pre&gt;
f&amp;lt;A&amp;gt;&lt;/pre&gt;
.
&lt;p&gt;But in &lt;/p&gt;&lt;pre&gt;
ff&lt;/pre&gt;
 it allowed &lt;pre&gt;
ff&amp;lt;BB&amp;lt;long&amp;gt;&amp;gt;&lt;/pre&gt;
.
&lt;p&gt;Tested under &lt;span class="caps"&gt;VC10&lt;/span&gt; and &lt;span class="caps"&gt;GCC3&lt;/span&gt;.4&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-answer-to-the-problem"&gt;
&lt;h2&gt;My answer to the problem&lt;/h2&gt;
&lt;p&gt;Let’s think ourself as compiler to see what happened there.&lt;/p&gt;
&lt;p&gt;Define mark &lt;/p&gt;&lt;pre&gt;
#&lt;/pre&gt;
 : &lt;pre&gt;
A#B&lt;/pre&gt;
 is the instantiated result when we put &lt;pre&gt;
B&lt;/pre&gt;
 into the parameter &lt;pre&gt;
T&lt;/pre&gt;
 of &lt;pre&gt;
A&amp;lt;T&amp;gt;&lt;/pre&gt;
 .
&lt;div class="section" id="first-we-discuss-ff"&gt;
&lt;h3&gt;First we discuss ff&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this sentense, the compiler saw the instantiation of &lt;/p&gt;&lt;pre&gt;
DD&amp;lt;long&amp;gt;&lt;/pre&gt;
 , so it instantiate &lt;pre&gt;
DD#long&lt;/pre&gt;
 , and also &lt;pre&gt;
BB#long&lt;/pre&gt;
 .
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sentense required the compiler to calculate set of overloading functions.&lt;/p&gt;
&lt;p&gt;Step 1 we need to infer &lt;/p&gt;&lt;pre&gt;
T&lt;/pre&gt;
 of &lt;pre&gt;
ff&amp;lt;T&amp;gt;&lt;/pre&gt;
 from argument &lt;pre&gt;
DD#long -&amp;gt; BB&amp;lt;T&amp;gt;&lt;/pre&gt;
 . Based on the inference rule:
&lt;pre class="literal-block"&gt;
Argument with type ``class_template_name&amp;lt;T&amp;gt;`` can be use to infer ``T``.
&lt;/pre&gt;
&lt;p&gt;So compiler inferred &lt;/p&gt;&lt;pre&gt;
T&lt;/pre&gt;
 as &lt;pre&gt;
long&lt;/pre&gt;
 . Here if it is not &lt;pre&gt;
BB&lt;/pre&gt;
 but &lt;pre&gt;
CC&lt;/pre&gt;
 which is complete un-related, we can also infer, as long as &lt;pre&gt;
CC&lt;/pre&gt;
 is a template like &lt;pre&gt;
CC&amp;lt;T&amp;gt;&lt;/pre&gt;
 .
&lt;p&gt;Step 2 Template Specialization Resolution. There is only one template here so we matched &lt;/p&gt;&lt;pre&gt;
ff&amp;lt;T&amp;gt;&lt;/pre&gt;
 .
&lt;p&gt;Step 3 Template Instantiation&lt;/p&gt;
&lt;p&gt;After inferred &lt;/p&gt;&lt;pre&gt;
long -&amp;gt; T&lt;/pre&gt;
 , compiler instantiated &lt;pre&gt;
ff#long&lt;/pre&gt;
 .
&lt;p&gt;Set of available overloading functions : &lt;/p&gt;&lt;pre&gt;
{ff#long}&lt;/pre&gt;
&lt;p&gt;Then overloading resolution found the only match &lt;/p&gt;&lt;pre&gt;
ff#long&lt;/pre&gt;
, checked its real parameter &lt;pre&gt;
DD#long&lt;/pre&gt;
 can be down-cast to formal parameter &lt;pre&gt;
BB#long&lt;/pre&gt;
 .
&lt;/div&gt;
&lt;div class="section" id="then-we-discuss-f"&gt;
&lt;h3&gt;Then we discuss f&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Calculate set of overloading functions.&lt;/p&gt;
&lt;p&gt;Step 1 infer all template parameters for template &lt;/p&gt;&lt;pre&gt;
f&lt;/pre&gt;
 . According to inference rule:
&lt;pre class="literal-block"&gt;
Parameter with type ``T`` can be used to infer ``T`` 。
&lt;/pre&gt;
&lt;p&gt;So &lt;/p&gt;&lt;pre&gt;
B -&amp;gt; T&lt;/pre&gt;
 is inferred.
&lt;p&gt;Step 2 Template Specialization Resolution.&lt;/p&gt;
&lt;p&gt;Here &lt;/p&gt;&lt;pre&gt;
B&lt;/pre&gt;
 is not &lt;pre&gt;
A&lt;/pre&gt;
 so we can not apply specialization of &lt;pre&gt;
f&amp;lt;A&amp;gt;&lt;/pre&gt;
 , remaining &lt;pre&gt;
f&amp;lt;T&amp;gt;&lt;/pre&gt;
 as the only alternative.
&lt;p&gt;Step 3 Template Instantiation.&lt;/p&gt;
&lt;p&gt;When we put &lt;/p&gt;&lt;pre&gt;
B&lt;/pre&gt;
 into &lt;pre&gt;
f&amp;lt;T&amp;gt;&lt;/pre&gt;
 to instantiate as &lt;pre&gt;
f#B&lt;/pre&gt;
 , we need to instantiate &lt;pre&gt;
traits#B&lt;/pre&gt;
.
&lt;p&gt;There is no specialization for &lt;/p&gt;&lt;pre&gt;
B&lt;/pre&gt;
 so we use template &lt;pre&gt;
traits&amp;lt;T&amp;gt;&lt;/pre&gt;
, &lt;pre&gt;
traits#B::value=false&lt;/pre&gt;
 , so &lt;pre&gt;
enable_if#false&lt;/pre&gt;
 didn’t contains a &lt;pre&gt;
type&lt;/pre&gt;
 , an error occurred.
&lt;p&gt;The only template is mismatch, available overloading functions is empty set. So we got an error.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="C++"></category><category term="template"></category><category term="C"></category></entry></feed>