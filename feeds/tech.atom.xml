<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc的小窩 - tech</title><link href="//farseerfc.me/" rel="alternate"></link><link href="//farseerfc.me/feeds/tech.atom.xml" rel="self"></link><id>//farseerfc.me/</id><updated>2020-03-06T15:45:00+09:00</updated><entry><title>柱面-磁頭-扇區尋址的一些舊事</title><link href="//farseerfc.me/history-of-chs-addressing.html" rel="alternate"></link><published>2020-03-06T15:45:00+09:00</published><updated>2020-03-06T15:45:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2020-03-06:/history-of-chs-addressing.html</id><summary type="html">
&lt;p&gt;在 SSD 這種新興存儲設備普及之前，很長一段時間硬盤是個人計算機的主要存儲設備。
更往前的磁帶機不常見於個人計算機，軟盤的地位很快被硬盤取代，到 SSD 出現爲止像
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MiniDisc"&gt;MiniDisc&lt;/a&gt; 、
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/DVD-RAM"&gt;DVD-RAM&lt;/a&gt;
等存儲設備也從未能挑戰過硬盤的地位。硬盤作爲主要存儲設備，自然也影響了文件系統的設計。&lt;/p&gt;
&lt;p&gt;這篇筆記稍微聊一聊硬盤這種存儲設備的尋址方式對早期文件系統設計的一些影響，特別是
柱面-磁頭-扇區尋址（Cylinder-head-sector addressing, 簡稱CHS尋址）的起源和發展。
大部分內容來自維基百科 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinder-head-sector 詞條&lt;/a&gt;
這裏只是記錄筆記。現今的硬盤已經不再採用 CHS 尋址，其影響卻還能在一些文件系統設計中看到影子。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;柱面、磁頭、扇區以及相關術語&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
磁盤示意圖（來自維基百科 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinder-head-sector 詞條&lt;/a&gt; ）&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/chs-illustrate-trans.svg" type="image/svg+xml"&gt;
chs-illustrate-trans.svg&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如右圖所示，一塊硬盤(Hard Disk Drive, HDD)是一個圓柱體轉軸上套着一些磁碟片(plate)，
然後有一條磁頭臂(actuator arm)插入磁碟片間的位置 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;在 SSD 這種新興存儲設備普及之前，很長一段時間硬盤是個人計算機的主要存儲設備。
更往前的磁帶機不常見於個人計算機，軟盤的地位很快被硬盤取代，到 SSD 出現爲止像
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MiniDisc"&gt;MiniDisc&lt;/a&gt; 、
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/DVD-RAM"&gt;DVD-RAM&lt;/a&gt;
等存儲設備也從未能挑戰過硬盤的地位。硬盤作爲主要存儲設備，自然也影響了文件系統的設計。&lt;/p&gt;
&lt;p&gt;這篇筆記稍微聊一聊硬盤這種存儲設備的尋址方式對早期文件系統設計的一些影響，特別是
柱面-磁頭-扇區尋址（Cylinder-head-sector addressing, 簡稱CHS尋址）的起源和發展。
大部分內容來自維基百科 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinder-head-sector 詞條&lt;/a&gt;
這裏只是記錄筆記。現今的硬盤已經不再採用 CHS 尋址，其影響卻還能在一些文件系統設計中看到影子。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;柱面、磁頭、扇區以及相關術語&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
磁盤示意圖（來自維基百科 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinder-head-sector 詞條&lt;/a&gt; ）&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/chs-illustrate-trans.svg" type="image/svg+xml"&gt;
chs-illustrate-trans.svg&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如右圖所示，一塊硬盤(Hard Disk Drive, HDD)是一個圓柱體轉軸上套着一些磁碟片(plate)，
然後有一條磁頭臂(actuator arm)插入磁碟片間的位置，加上一組控制芯片（controller）。
每個磁碟片有上下兩面塗有磁性材質，磁頭臂上有一組磁頭（head），每個磁頭對應磁盤的一個面，
所以比如一個 3 碟的硬盤會有 6 個磁頭。&lt;/p&gt;
&lt;p&gt;每個磁碟片上定義了很多同心圓的磁頭軌道，叫做磁道（track），磁道位於盤面上不同半徑的位置，
通過旋轉磁碟臂能讓磁頭移動到特定的半徑上，從而讓讀寫磁頭在不同的磁道間跳轉。
不同磁頭上同磁道的同心圓共同組成一個柱面（cylinder），或者說移動磁碟臂能選定磁盤中的一個柱面。
磁道上按等角度切分成多個小段，叫做扇區（sector），每個扇區是讀寫數據時採用的最小單元。
早期在 IBM 大型機之類上使用的硬盤的扇區大小比較小，到 IBM PC
開始個人計算機用的硬盤扇區基本被統一到 512 字節。現代硬盤內部可能採用 Advanced Format
使用 4K 字節扇區。&lt;/p&gt;
&lt;p&gt;在早期軟盤和硬盤的尋址方式被稱作「柱面-磁頭-扇區尋址」，簡稱 CHS 尋址，
是因爲這三個參數是軟件交給硬件定位到某個具體扇區單元時使用的參數。
首先柱面參數讓磁頭臂移動到某個半徑上，尋址到某個柱面，然後激活某個磁頭，然後隨着盤面旋轉，
磁頭定位到某個扇區上。&lt;/p&gt;
&lt;p&gt;「柱面-磁頭-扇區」這個尋址方式，聽起來可能不太符合直覺，尤其是柱面的概念。直覺上，
可能更合理的尋址方式是「盤片-盤面-磁道-扇區」，而柱面在這裏是同磁道不同盤片盤面構成的一個集合。
不過理解了磁盤的機械結構的話，柱面的概念就比較合理了，尋址時先驅動磁頭臂旋轉，
磁頭臂上多個磁頭一起飛到某個磁道上，從而運動磁頭臂的動作定義了一個柱面。
柱面和磁頭（CH）組合起來能定位到某個特定的磁道，畫張圖大概如下圖所示：&lt;/p&gt;
&lt;object class="embed-responsive-item tikz" data="//farseerfc.me/uml/780dfc96.svg" type="image/svg+xml"&gt;
tikz diagram&lt;/object&gt;
&lt;p&gt;上圖中值得注意的是磁道的編號方式，我用相同的顏色畫出了相同的磁道。因爲按照 CHS
的順序尋址，所以先定位柱面，然後選定磁頭。磁盤上按半徑從外向內定義柱面的編號，最外圈的磁道位於
0號柱面，由0號磁頭開始。隨着柱面編號增加，逐步從外圈定位到內圈。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;物理 CHS 尋址&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以上術語中，柱面號和磁頭號直接對應了硬盤上的物理組成部分，所以通過在物理 CHS
尋址方式下，通過扇區地址的寫法能對應到扇區的具體物理位置。之所以這樣描述扇區，
是因爲早期的軟盤和硬盤驅動器沒有內置的控制芯片，可以完全由宿主系統執行驅動程序驅動。&lt;/p&gt;
&lt;p&gt;在 IBM PC 上，驅動軟盤和硬盤的是 CPU 執行位於主板
&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/BIOS"&gt;BIOS (Basic Input/Output System)&lt;/a&gt;
中的程序，具體來說操作系統（比如DOS）和應用程序調用 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/INT_13H"&gt;INT 13H&lt;/a&gt;
中斷，通過 AH=02H/03H 選擇讀/寫操作，BIOS 在中斷表中註冊的 13H 中斷處理程序執行在 CPU
上完成讀寫請求。調用 INT 13H 讀寫扇區的時候，CPU 先通過 INT 13H AH=0CH
控制硬盤的磁頭臂旋轉到特定磁道上，然後選定具體磁頭，讓磁頭保持在磁道上讀數據，
通過忙輪訓的方式等待要讀寫的扇區旋轉到磁頭下方，從而讀到所需扇區的數據。在 DOS 之後的操作系統，
比如早期的 Windows 和 Linux 和 BSD 能以覆蓋中斷程序入口表的方式提供升級版本的這些操作替代
BIOS 的程序。&lt;/p&gt;
&lt;p&gt;以上過程中可以看出兩點觀察：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CHS 尋址下，跨磁道的尋址（不同 CH 值），和磁道內的尋址（同 CH 不同 S
），是本質上不同的操作。跨磁道的尋址有移動磁頭臂的動作，會比磁道內尋址花費更多時間。&lt;/li&gt;
&lt;li&gt;通過扇區號的磁道內尋址是個忙輪訓操作，需要佔用完整 CPU
週期。這也隱含扇區號在一個磁道內的物理排列不必是連續的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;實際上扇區號的物理排列的確不是連續的，每個物理扇區中除了用512字節記錄扇區本身的數據，
還有扇區的開始記錄和結束記錄，寫有扇區編號和扇區校驗碼。每讀到一個扇區， CPU
可能需要做一些額外操作（比如計算比對校驗、寫入內存緩衝區、調整內存段頁映射）
後纔能繼續讀下一個扇區，如果物理排列上連續編號扇區，可能等 CPU
做完這些事情後磁頭已經旋轉到之後幾個扇區上了。所以出廠時做磁盤低級格式化的時候，
會跳躍着給扇區編號，給 CPU 留足處理時間。比如下圖：&lt;/p&gt;
&lt;object class="embed-responsive-item tikz" data="//farseerfc.me/uml/8d15ed13.svg" type="image/svg+xml"&gt;
tikz diagram&lt;/object&gt;
&lt;p&gt;上圖中假設有3個柱面，每個柱面6個磁頭，每個磁道內11個扇區，並且畫出了三種不同的扇區編號跳轉情況，
分別是磁道內的扇區跳轉（+3），柱面內的磁頭跳轉（+5），以及柱面間跳轉（+10）。
實際磁盤上的柱面數、扇區數要多很多，尋址時需要跳轉的距離也可能更長，這裏只是舉例說明。
圖中和實際情況相同的是，柱面號和磁頭號從 0 開始編號，而扇區號從 1 開始編號，
所以做邏輯地址換算的時候要考慮編號差異。&lt;/p&gt;
&lt;p&gt;早期 IBM PC 的 BIOS 使用 24bit 的 CHS 地址，其中 10bit 柱面(C)、 8bit 磁頭(H)、
6bit 扇區(S)。從而用物理 CHS 尋址方式的軟盤和硬盤驅動器最多可以尋址 1024 個柱面，256 個磁頭，
63 個扇區，其中扇區數因爲從 1 開始編號所以少了 1 個可尋址範圍。比如 3.5 吋高密度（HD）軟盤有雙面，
出廠時每面 80 磁道，每磁道 18 扇區，從而能算出 1,474,560 字節的容量。&lt;/p&gt;
&lt;p&gt;如此跳躍編號扇區之後，不是總能給磁道中所有扇區編號，可能在磁道的末尾位置留幾個沒有使用的扇區空間，
這些是磁道內的保留扇區，可以在發現壞扇區後使用這些隱藏扇區作爲替代扇區。當然讀寫替代扇區的時候
因爲扇區尋址不連續可能會有一定性能損失。&lt;/p&gt;
&lt;p&gt;因爲物理 CHS 尋址下，磁盤由 CPU 執行驅動程序來驅動，所以以上扇區跳躍的長短實際是由 CPU
的速度等因素決定的，理論上 CPU 越快，跳躍間隔可以越短，從而磁盤讀寫速度也能加快。磁盤出廠時，
廠商並不知道使用磁盤的計算機會是怎樣的性能，所以只能保守地根據最慢的 CPU 比如 IBM 初代 PC 搭配的
8086 的速度來決定跳躍間隔。所以在當年早期玩家們流傳着這樣一個操作：買到新硬盤，
或者升級了電腦配置之後，對硬盤做一次 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Disk_formatting#Low-level_formatting_(LLF)_of_hard_disks"&gt;低級格式化(Low level formating)&lt;/a&gt;
，聰明的低級格式化程序能智能安排扇區編號，提升硬盤讀寫速度，也能跳過已知壞道位置繼續編號，
甚至可能將更多保留扇區暴露成可用扇區。這對現代有硬盤控制器的硬盤而言已經沒有意義了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;邏輯 CHS 尋址&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;隨着硬盤容量不斷增加， BIOS 中用來 CHS 尋址的地址空間逐漸不夠用了。早期 24bit 地址按 &lt;cite&gt;C H S&lt;/cite&gt;
的順序分爲 &lt;cite&gt;10 8 6&lt;/cite&gt; 的位數，用 8bit 來尋址磁頭最多可以有 256 個磁頭，而只有 10bit
來尋址柱面，就只能有 1024 個柱面。最初 IBM 這麼劃分是因爲早期用於 IBM 大型機之類的硬盤可以有
厚厚一疊的盤片組，同樣的尋址方式就直接用於了 IBM PC 。而 PC 用的硬盤迫於硬盤倉空間大小，
有厚度限制，硬盤中物理盤面可能只有四五個盤片，硬盤容量增加主要是增加盤片表面的數據密度而非增加盤片數量。&lt;/p&gt;
&lt;p&gt;於是逐漸地，硬盤廠商開始對 CHS 尋址的地址空間做一些手腳。比如最初的簡單想法是重新定義 CH
，將一些磁頭數挪用做柱面數。從而有了邏輯 CHS 尋址，其中 CH 是固定一組，通過簡單換算從 CH
值找到物理的柱面和磁頭數。結合 CH 而不映射 S 的優勢在於，從操作系統和文件系統來看依然能根據邏輯
CHS 地址估算出地址跳轉所需大概的時間，只是原本一次切換磁頭的動作可能變成一次短距離的切換柱面。&lt;/p&gt;
&lt;p&gt;此時的操作系統和文件系統已經開始出現針對 CHS 尋址特點的優化方式，
儘量減少跨磁道的尋址能一定程度提升讀寫速度，跨磁道時的磁道間距離也會影響尋道時間，
文件系統可能會根據CHS地址來安排數據結構，優化這些尋址時間。&lt;/p&gt;
&lt;p&gt;即便使用沒有針對 CHS 尋址方式優化過的操作系統和文件系統，比如侷限在早期 Windows 和 FAT
系文件系統上，早期這些桌面系統用戶們仍然能自己優化磁盤讀寫性能：通過分區。
分區是硬盤上連續的一段空間，早期由於 BIOS 和 bootloader 的一些技術限制，
每個分區必須對齊到柱面大小上。早期 PC 玩家們通過把一個大硬盤切分成多個小分區，
使用時儘量保持近期讀寫針對同一個分區，就可以減少尋址時的額外開銷，改善讀寫速度。&lt;/p&gt;
&lt;p&gt;於是隱含地，CHS 尋址導致底層硬盤和上層操作系統之間有一層性能約定： &lt;strong&gt;連續讀寫保證最快的讀寫速度&lt;/strong&gt;
。硬盤實現 CHS 尋址時，調整扇區編號方式讓連續的 CHS 地址有最快讀寫速度，文件系統也根據這個約定，
按照 CHS 地址的跳躍來估算讀寫速度耗時並針對性優化。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zone-bit-recoding-zbr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;區位記錄（Zone bit recoding, ZBR）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以上物理 CHS 尋址，其實依賴一個假設： &lt;strong&gt;每個磁道上有同樣數量的扇區&lt;/strong&gt; 。早期硬盤上也的確遵循這個假設，
所以我們上面的圖示裏纔能把一個盤面上的扇區展開成一張長方形的表格，因爲每個磁道的扇區數是一樣的。
實際上當時的硬盤都是恆定角速度（constant angular velocity, CAV）的方式讀寫，無論磁頭在哪兒，
盤片都旋轉保持恆定的轉速，所以對磁頭來說在單位時間內轉過的角度影響讀寫二進制位的數量，
而磁頭掃過的面積在這裏沒有影響。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
區位記錄（來自維基百科 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zone_bit_recording"&gt;Zone bit recording 詞條&lt;/a&gt; ）&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/DiskStructure.svg" type="image/svg+xml"&gt;
DiskStructure.svg&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;不過隨着硬盤容量增加，盤面的數據密度也隨之增加，單位面積中理論能容納的二進制位數量有限。
理論上，如果保持相同密度的話，盤片外圈能比內圈容納更多數據。因此硬盤廠商們開始在盤面上將磁道劃分出
區塊（zone），外圈區塊中的磁道可以比內圈區塊中的磁道多放入一些扇區。這種方式下生產出的硬盤叫
區位記錄硬盤（Zone bit recoding, ZBR），相對的傳統固定磁道中扇區數的硬盤就被叫做恆定角速度（CAV）
硬盤。&lt;/p&gt;
&lt;p&gt;如右圖所示，區位記錄在硬盤上將多個柱面組合成一個區塊，區塊內的磁道有相同數量的扇區，
而不同區塊的磁道可以有不同數量的扇區，外圈區塊比內圈區塊有更多扇區。&lt;/p&gt;
&lt;p&gt;顯然要支持 ZBR ，物理 CHS 尋址方式不再有效，於是 ZBR
硬盤將原本簡單的地址換算電路升級爲更複雜的磁盤控制器芯片，替代 CPU
來驅動硬盤，把來自文件系統的邏輯 CHS 地址通過換算轉換到物理 CHS 地址，並且驅動磁頭做跳轉和尋址。
從而有了獨立的控制芯片之後，硬盤讀寫扇區的速度不再受 CPU 速度影響。有了完整的邏輯-物理地址轉換後，
邏輯扇區編號不再對應物理扇區編號，上述編號跳轉和壞扇區處理之類的事情都由磁盤控制芯片代爲完成。
從而 CHS 地址已經喪失了物理意義，只留下 &lt;strong&gt;連續讀寫保證最快的讀寫速度&lt;/strong&gt; 這樣的性能約定。&lt;/p&gt;
&lt;p&gt;有了 ZBR 之後，硬盤讀寫速度也不再恆定，雖然仍然保持恆定轉速，但是讀寫外圈磁道時單位時間掃過的扇區
多於讀寫內圈磁道時掃過的扇區。所以 ZBR 硬盤的低端地址比高端地址有更快的讀寫速度，
通過硬盤測速軟件能觀察到階梯狀的「掉速」現象。&lt;/p&gt;
&lt;p&gt;邏輯地址轉換也會造成邏輯 CHS 尋址能訪問到的扇區數少於物理 CHS 尋址的現象，
磁盤中扇區被重新編號後可能有一些扇區剩餘，於是 ZBR 硬盤的出廠低級格式化可能會均分這些訪問不到的扇區
給每個磁道作爲保留扇區，留作壞扇區後備。&lt;/p&gt;
&lt;p&gt;另外有了獨立磁盤控制器芯片之後，扇區內的校驗算法也不再受制於 BIOS INT 13H 接口。
原本 BIOS 的 INT 13H 接口定義了每個扇區 512 字節，額外配有 4 字節校驗， 32bit
的校驗碼對 4096bit 的數據來說，只能允許一些簡單的校驗算法，比如
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hamming_code"&gt;漢明碼&lt;/a&gt; 對 4096bit 的數據需要 13bit
的校驗，突破了校驗算法限制後硬盤可以在物理扇區中放更多校驗位，使用更複雜的
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Error_correction_code"&gt;ECC&lt;/a&gt; 算法，提供更強的容錯性。&lt;/p&gt;
&lt;p&gt;通過 ZBR ，邏輯 CHS 尋址不再侷限在具體每磁道扇區數等物理限制上，但是仍然侷限在 CHS 總位數。
24bit 的 CHS 地址能尋址 &lt;span class="math"&gt;\(1024*256*63 = 16515072\)&lt;/span&gt; 個扇區，也就是 8064MiB 的空間。
於是早期很多操作系統有 7.8G 硬盤大小的限制。後來 ATA/IDE 標準提升了 CHS 尋址數量，從 24bit
到 28bit 到 32bit ，不過在系統引導早期仍然依賴 BIOS 最基本的 24bit CHS
尋址能力，於是那時候安裝系統時要求引導程序裝在前 8G 範圍內也是這個原因。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chs-lba"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;從 CHS 到 LBA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;隨着硬盤大小不斷提升，無論是操作系統軟件層，還是硬盤廠商硬件層，都逐漸意識到邏輯 CHS
尋址是兩邊相互欺騙對方的騙局：文件系統根據假的 CHS 地址的提示苦苦優化，而硬盤控制器又要把物理
CHS 模擬到假的 CHS 地址上以兼容 BIOS 和操作系統。和 CS 領域太多別的事情一樣，
CHS 尋址過早地暴露出太多底層抽象細節，而上層軟件又轉而依賴於這些暴露出的細節進行優化，
底層細節的變動使得上層優化不再是有意義的優化。&lt;/p&gt;
&lt;p&gt;於是 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Parallel_ATA"&gt;ATA 標準&lt;/a&gt; 引入了
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Logical_block_addressing"&gt;邏輯塊尋址（Logical Block Addressing, LBA）&lt;/a&gt;
來替代 CHS 尋址，解決其中的混亂。LBA 的思路其實就是邏輯 CHS 尋址的簡單換算，因爲
CHS 尋址下 S 從 1 開始計算，而 LBA 使用連續扇區編號，從 0 開始編號，所以換算公式如下：&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
LBA 地址 = ( C \times 磁頭數 + H ) \times 扇區數 + ( S - 1 )
\end{equation*}
&lt;/div&gt;
&lt;p&gt;使用 LBA 尋址，操作系統和文件系統直接尋址一個連續地址空間中的扇區號，
不應該關心柱面和磁頭之類的物理參數，將這些物理細節交由磁盤控制器。
對操作系統和文件系統這些上層軟件而言，LBA尋址的抽象仍然保證了 &lt;strong&gt;連續讀寫提供最快的讀寫速度&lt;/strong&gt;
，文件系統仍然會嘗試根據 LBA 地址優化，儘量連續讀寫從而減少尋道時間。&lt;/p&gt;
&lt;p&gt;從 CHS 尋址切換到 LBA 尋址，需要硬盤和操作系統兩方面的努力，所以很長一段時間，
硬盤同時支持兩種尋址方式，在控制器內部做轉換。最後需要放棄支持的是深植了 CHS 尋址的 BIOS
，使用 BIOS 引導的 MBR 引導程序還在用 CHS 尋址方式讀取數據加載操作系統，直到大家都切換到 UEFI 。&lt;/p&gt;
&lt;p&gt;並且隨着硬盤使用 LBA 尋址，導致上層軟件很難預測底層硬件實際切換柱面切換磁頭之類的時機，
潛在地導致一些性能不確定性。於是硬盤控制器在除了負責實際驅動物理磁盤之外，
還開始負責維護一塊盤內緩衝區，實現盤內的 IO 隊列。緩衝區的存在允許磁盤控制器同時接收更多來自上層軟件
的讀寫請求，轉換成實際物理佈局參數，並根據磁盤物理佈局來調整讀寫順序，增加總體吞吐率。
當然有緩衝區的存在也使得突然斷電之類的情況下更難保證數據一致性，於是 SCSI/SATA
標準開始約定特殊的請求，從操作系統能發送命令讓底層設備清空自己的讀寫隊列。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="shingled-magnetic-recording-smr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;疊瓦磁記錄（Shingled Magnetic Recording, SMR）&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;逐漸從歷史講到了現在，隨着硬盤記錄密度的不斷增加，硬盤廠商們也在不斷發明新技術嘗試突破磁盤記錄的物理極限。
因爲有了在硬盤上獨立的控制器，並且切換到了邏輯塊地址（LBA）的尋址方式，
操作系統大部分時候不用再關心底層硬盤的物理技術革新，比如垂直寫入技術（perpendicular magnetic
recording, PMR）將磁頭記錄方式從水平轉換成垂直記錄，增加了記錄密度，但不影響尋址方式。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
疊瓦磁記錄（來自 &lt;a class="reference external" href="https://ieeexplore.ieee.org/document/4782114"&gt;The Feasibility of Magnetic Recording at 10 Terabits Per Square Inch on Conventional Media&lt;/a&gt; ）&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="smr.png" class="img-responsive" src="//farseerfc.me/images/smr.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;不過技術革新中也有影響尋址方式的技術，比如
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shingled_magnetic_recording"&gt;疊瓦磁記錄技術（Shingled Magnetic Recording, SMR）&lt;/a&gt;
。 SMR 技術基於一個技術事實：物理上磁頭的寫入頭（write head）需要比讀取頭(read head
)佔用更大面積，如果按照寫入頭的物理極限放置磁記錄，那麼對於讀取頭會有很多空間浪費。從而
SMR 試圖讓相鄰磁道的寫入有部分重疊，從而增加記錄密度。即便重疊了相鄰磁道，讀取磁道還是能隨機定位，
而寫入磁道會覆蓋它後面疊加上的磁道，所以寫入磁道必須嚴格按地址順序寫入。爲了滿足隨機順序寫入的需要，
SMR 硬盤把連續的幾個磁道組織成區塊（zone），在一個區塊內必須按順序寫入。
這裏的區塊可以和區位記錄（ZBR）是同樣的區塊，也可以獨立於 ZBR 做不同大小的區塊分割。&lt;/p&gt;
&lt;p&gt;這種區塊內連續寫入的要求，很像是 SSD 這種基於閃存介質的記錄方式， SMR 硬盤也同樣像 SSD
一樣在磁盤控制器內引入 &lt;a class="reference external" href="//farseerfc.me/btrfs-vs-zfs-difference-in-implementing-snapshots.html#id21"&gt;日誌結構式的記錄方式，採用類似的 GC 算法&lt;/a&gt;
，收到隨機寫入請求的時候，在區塊間執行 GC 搬運數據塊，對操作系統提供可以任意寫入的抽象接口。&lt;/p&gt;
&lt;p&gt;當然這種類似閃存介質的 FTL 的抽象有對讀寫性能的直接影響。SMR 硬盤可以將這些細節完全隱藏起來（
Device Managed），或者完全暴露給宿主系統（Host Managed
），或者在讀寫時隱藏細節的同時在宿主想查詢的時候提供接口查詢（Host Aware）。和 SSD
一樣，消費級的 SMR 硬盤通常選擇隱藏細節只在被詢問時暴露，完全暴露細節的設備通常只在企業服務器級別
的產品中看到。&lt;/p&gt;
&lt;p&gt;可以期待，隨着 SMR 硬盤的逐漸普及，文件系統設計中也將更多考慮 SMR 的特性加以優化。這些優化可能參考
對 SSD 的優化（比如儘量連續寫入），但是又不能完全照搬（比如 SSD 需要考慮寫平衡而 SMR
硬盤不需要，比如 SSD 不用擔心隨機尋道時間而 SMR 硬盤需要）。這些對現在和未來文件系統的設計提供了更多挑戰。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kib"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;4KiB 扇區大小&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;不侷限於硬盤，存儲設備發展中另一個方向是增加扇區大小。如前所述，在應用於 PC
之前的硬盤設計也曾有過比 512 字節更小的扇區大小，而自從 PC 普及之後 512 字節扇區逐漸成爲主流，
甚至到了揮之不去的地步。隨着硬盤容量提升，直接尋址 512 字節的扇區顯得不再那麼高效，
文件系統內部也早已把多個扇區合併成一個邏輯簇（cluster）或者塊（block），按簇或塊的粒度管理。
在底層硬件同樣也是按照 512 字節大小劃分扇區，每個扇區都要獨立計算校驗，如果能增大扇區大小到比如
4KiB，將能更經濟地安排扇區校驗碼，從而得到更多可用容量。可見 512 字節扇區大小這一設計，和
CHS 尋址一樣，逐漸成爲了操作系統和硬盤廠商彼此間互相努力維護的謊言。&lt;/p&gt;
&lt;p&gt;硬盤物理扇區提升爲 4KiB 大小的設計，叫做「
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Advanced_Format"&gt;先進格式化（Advanced Format）&lt;/a&gt;
」，這樣的硬盤叫做先進格式化硬盤（AFD）。在此基礎上，硬盤控制器可以提供模擬 512 字節扇區的模擬層，
叫做 512e ，也可以直接提供 4K 大小的扇區給操作系統，叫做 4K native (4Kn)。
操作系統和文件系統要儘量避免依賴 512e 以提供最優性能，支持 4Kn 扇區尋址也是現在和未來
文件系統設計中一個重要挑戰。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dual-actuator"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;雙磁頭臂（Dual Actuator）&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
雙磁頭臂（來自 &lt;a class="reference external" href="http://www.digitalpreservation.gov/meetings/DSA2018/Day_1/5_TO_P2-2_Trantham_Disk_Trends.pdf"&gt;Seagate Storage Update - LOC Designing Storage Architecture for Digital Collections&lt;/a&gt; ）&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="DualActuator-Opposed.jpeg" class="img-responsive" src="//farseerfc.me/images/DualActuator-Opposed.jpeg"/&gt;
&lt;img alt="DualActuator-Split.jpeg" class="img-responsive" src="//farseerfc.me/images/DualActuator-Split.jpeg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;除了提升容量，硬盤發展的另一個方向是提升讀寫速度。通過上述 CHS 尋址方式可見，
傳統方式下提升硬盤讀寫速度有兩種方式：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;提升磁記錄密度&lt;/li&gt;
&lt;li&gt;提升（磁頭臂和盤片）轉速&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一種方式提升記錄密度，在增加容量的同時也能提升硬盤讀寫速度，所以是長久以來硬盤廠商的主要方式。
第二種方式提升轉速則很快就遇到了物理瓶頸，硬盤以前是 5400 rpm 現在最高能到 15000rpm
附近，高速旋轉的盤片就像一個螺旋槳一樣，外圈線速度已經到了接近聲速，很難再往上提升。
以及盤片轉速影響連續讀寫速度，而磁頭臂轉速影響尋道速度，高速尋道對磁頭臂旋轉有極高精度要求。&lt;/p&gt;
&lt;p&gt;所以長久以來，衡量硬盤速度有兩項指標：連續讀寫速度和每秒操作數(IOPS)，隨着容量提升，
也在提升連續讀寫速度，但是很難提升 IOPS ，相對而言隨機尋道所需的開銷越來越昂貴。&lt;/p&gt;
&lt;p&gt;目前硬盤廠商們在嘗試一種新的方式提升硬盤 IOPS ：增加一條磁頭臂。一個硬盤驅動器內封入兩組甚至多組
磁頭臂，每個磁頭臂能獨立旋轉，從而能獨立尋址定位。這樣的硬盤叫雙/多磁頭臂（Dual/Multi Actuator）硬盤。&lt;/p&gt;
&lt;p&gt;從操作系統角度來看，雙磁頭臂硬盤更像是一根連接線上接有等容量的兩個獨立驅動器，
可以在盤內控制器上組 RAID0 ，或者把兩個磁頭臂都暴露給操作系統，由操作系統組 RAID0
或更智能地使用獨立尋址的能力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;結論（TL;DR）和預告&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;軟件層面的優化與硬件層面的革新一直是一組矛盾。長久以來文件系統和硬盤設備在關於尋址方式的磨合中，
逐漸演化出一條真理，也是我文中一直在強調的： &lt;strong&gt;連續讀寫提供最快的讀寫速度&lt;/strong&gt;
。文件系統總是能根據底層設備暴露出的一些抽象泄漏，比如物理 CHS 佈局，比如 512 字節扇區大小，
，針對性做更多優化，但是隨着底層設備的技術革新這些優化也隨之成爲泡影。&lt;/p&gt;
&lt;p&gt;從 SMR 技術中也能看出， 硬盤的讀寫接口也在逐漸向 SSD 的接口靠攏，從而文件系統的「優化」也在逐漸
向這種「傾向順序寫入」的方向優化。關於這些發展趨勢待我有空再談。&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="tech"></category><category term="FS筆記"></category><category term="FS notes"></category><category term="CHS"></category><category term="cylinder"></category><category term="head"></category><category term="sector"></category><category term="LBA"></category><category term="SMR"></category><category term="4Kn"></category></entry><entry><title>Btrfs vs ZFS 實現 snapshot 的差異</title><link href="//farseerfc.me/btrfs-vs-zfs-difference-in-implementing-snapshots.html" rel="alternate"></link><published>2020-02-19T15:45:00+09:00</published><updated>2020-02-19T15:45:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2020-02-19:/btrfs-vs-zfs-difference-in-implementing-snapshots.html</id><summary type="html">
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;zfs 這個東西倒是名不符實。叫 z storage stack 明顯更符合。 叫 fs 但不做 fs 自然確實會和 btrfs 有很大出入。&lt;/div&gt;
&lt;div class="line"&gt;我反而以前還好奇為什麼 btrfs 不弄 zvol ， 直到我意識到這東西真是一個 fs ，名符奇實。&lt;/div&gt;
&lt;div class="line"&gt;—— 某不愿透露姓名的 Ext2FSD 開發者&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Btrfs 和 ZFS 都是開源的寫時拷貝（Copy on Write, CoW）文件系統，都提供了相似的子卷管理和
快照(snapshot）的功能。網上有不少文章都評價 ZFS 實現 CoW FS 的創新之處，進而想說「 Btrfs
只是 Linux/GPL 陣營對 ZFS …&lt;/p&gt;</summary><content type="html">
&lt;!-- --&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;zfs 這個東西倒是名不符實。叫 z storage stack 明顯更符合。 叫 fs 但不做 fs 自然確實會和 btrfs 有很大出入。&lt;/div&gt;
&lt;div class="line"&gt;我反而以前還好奇為什麼 btrfs 不弄 zvol ， 直到我意識到這東西真是一個 fs ，名符奇實。&lt;/div&gt;
&lt;div class="line"&gt;—— 某不愿透露姓名的 Ext2FSD 開發者&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Btrfs 和 ZFS 都是開源的寫時拷貝（Copy on Write, CoW）文件系統，都提供了相似的子卷管理和
快照(snapshot）的功能。網上有不少文章都評價 ZFS 實現 CoW FS 的創新之處，進而想說「 Btrfs
只是 Linux/GPL 陣營對 ZFS 的拙劣抄襲」。或許（在存儲領域人盡皆知而在領域外）鮮有人知，在
ZFS 之前就有 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/NetApp"&gt;NetApp&lt;/a&gt; 的商業產品
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Write_Anywhere_File_Layout"&gt;WAFL (Write Anywhere File Layout)&lt;/a&gt;
實現了 CoW 語義的文件系統，並且集成了快照和卷管理之類的功能。描述 btrfs 原型設計的
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/images-btrfs/6/68/Btree_TOS.pdf"&gt;論文&lt;/a&gt;
和 &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/images-btrfs/6/63/LinuxFS_Workshop.pdf"&gt;發表幻燈片&lt;/a&gt;
也明顯提到 WAFL 比提到 ZFS 更多一些，應該說 WAFL 這樣的企業級存儲方案纔是 ZFS 和 btrfs
共同的靈感來源，而無論是 ZFS 還是 btrfs 在其設計中都汲取了很多來自 WAFL 的經驗教訓。&lt;/p&gt;
&lt;p&gt;我一開始也帶着「 Btrfs 和 ZFS
都提供了類似的功能，因此兩者必然有類似的設計」這樣的先入觀念，嘗試去使用這兩個文件系統，
卻經常撞上兩者細節上的差異，導致使用時需要不盡相同的工作流，
或者看似相似的用法有不太一樣的性能表現，又或者一邊有的功能，比如 ZFS 的在線去重（in-band dedup）
， Btrfs 的 reflink ，在另一邊沒有的情況，進而需要不同細粒度的子卷劃分方案。後來看到了
&lt;a class="reference external" href="https://lwn.net/Articles/342892/"&gt;LWN 的這篇 《A short history of btrfs》&lt;/a&gt;
讓我意識到 btrfs 和 ZFS 雖然表面功能上看起來類似，但是實現細節上完全不一樣，
所以需要不一樣的用法，適用於不一樣的使用場景。&lt;/p&gt;
&lt;p&gt;爲了更好地理解這些差異，我四處蒐羅這兩個文件系統的實現細節，於是有了這篇筆記，
記錄一下我查到的種種發現和自己的理解。&lt;del&gt;（或許會寫成一個系列？還是先別亂挖坑不填。）&lt;/del&gt;
只是自己的筆記，所有參閱的資料文檔都是二手資料，沒有深挖過源碼，還參雜了自己的理解，
於是難免有和事實相違的地方，如有寫錯，還請留言糾正。&lt;/p&gt;
&lt;div class="section" id="btrfs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id34"&gt;1   Btrfs 的子卷和快照&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;關於寫時拷貝（CoW）文件系統的優勢，我們爲什麼要用 btrfs/zfs 這樣的寫時拷貝文件系統，
而不是傳統的文件系統設計，或者寫時拷貝文件系統在使用時有什麼區別之類的，網上同樣也能找到很多介紹
，這裏不想再討論。這裏假設你用過 btrfs/zfs 至少一個的快照功能，知道它該怎麼用，
並且想知道更多細節，判斷怎麼用那些功能才合理。&lt;/p&gt;
&lt;p&gt;先從兩個文件系統中（表面上看起來）比較簡單的 btrfs 的子卷（subvolume）和快照（snapshot）說起。
關於子卷和快照的常規用法、推薦佈局之類的話題就不細說了，網上能找到很多不錯的資料，比如
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes"&gt;btrfs wiki 的 SysadminGuide 頁&lt;/a&gt;
和 Arch wiki 上 &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Btrfs#Subvolumes"&gt;Btrfs#Subvolumes&lt;/a&gt; 頁都有不錯的參考價值。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id35"&gt;1.1   子卷和快照的術語&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 btrfs 中，存在於存儲媒介中的只有「子卷」的概念，「快照」只是個創建「子卷」的方式，
換句話說在 btrfs 的術語裏，子卷（subvolume）是個名詞，而快照（snapshot）是個動詞。
如果脫離了 btrfs 術語的上下文，或者不精確地稱呼的時候，也經常有文檔把 btrfs
的快照命令創建出的子卷叫做一個快照，所以當提到快照的時候，根據上下文判斷這裏是個動詞還是名詞，
把名詞的快照當作用快照命令創建出的子卷就可以了。或者我們可以理解爲，
&lt;strong&gt;互相共享一部分元數據（metadata）的子卷互爲彼此的快照（名詞）&lt;/strong&gt; ，
那麼按照這個定義的話，在 btrfs 中創建快照（名詞）的方式其實有兩種：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用 &lt;code class="code"&gt;
btrfs subvolume snapshot&lt;/code&gt;
 命令創建快照&lt;/li&gt;
&lt;li&gt;用 &lt;code class="code"&gt;
btrfs send&lt;/code&gt;
 命令並使用 &lt;code class="code"&gt;
-p&lt;/code&gt;
 參數發送快照，並在管道另一端接收&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
&lt;code class="code"&gt;
btrfs send&lt;/code&gt;
 命令的 &lt;code class="code"&gt;
-p&lt;/code&gt;
 與 &lt;code class="code"&gt;
-c&lt;/code&gt;
&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;p&gt;這裏也順便提一下 &lt;code class="code"&gt;
btrfs send&lt;/code&gt;
 命令的 &lt;code class="code"&gt;
-p&lt;/code&gt;
 參數和 &lt;code class="code"&gt;
-c&lt;/code&gt;
 參數的差異。
只看 &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-send#DESCRIPTION"&gt;btrfs-send(8)&lt;/a&gt; 的描述的話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;-p &amp;lt;parent&amp;gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;send an incremental stream from parent to subvol&lt;/div&gt;
&lt;div class="line"&gt;&lt;br/&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line"&gt;-c &amp;lt;clone-src&amp;gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;use this snapshot as a clone source for an incremental send (multiple allowed)&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;看起來這兩個都可以用來生成兩個快照之間的差分，只不過 -p 只能指定一個「parent」，
而 -c 能指定多個「clone source」。在
&lt;a class="reference external" href="https://unix.stackexchange.com/a/490857"&gt;unix stackexchange 上有人寫明了這兩個的異同&lt;/a&gt;
。使用 -p 的時候，產生的差分首先讓接收端用 subvolume snapshot 命令對 parent 子卷創建一個快照，
然後發送指令將這個快照修改成目標子卷的樣子，而使用 -c 的時候，首先在接收端用 subvolume create
創建一個空的子卷，隨後發送指令在這個子卷中填充內容，其數據塊儘量共享 clone source 已有的數據。
所以 &lt;code class="code"&gt;
btrfs send -p&lt;/code&gt;
 在接收端產生是有共享元數據的快照，而 &lt;code class="code"&gt;
btrfs send -c&lt;/code&gt;

在接收端產生的是僅僅共享數據而不共享元數據的子卷。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;定義中「互相共享一部分 &lt;strong&gt;元數據&lt;/strong&gt; 」比較重要，因爲除了快照的方式之外， btrfs
的子卷間也可以通過 reflink 的形式共享數據塊。我們可以對一整個子卷（甚至目錄）執行
&lt;code class="code"&gt;
cp -r --reflink=always&lt;/code&gt;
 ，創建出一個副本，副本的文件內容通過 reflink
共享原本的數據，但不共享元數據，這樣創建出的就不是快照。&lt;/p&gt;
&lt;p&gt;說了這麼多，其實關鍵的只是 btrfs 在傳統 Unix 文件系統的「目錄/文件/inode」
這些東西之外只增加了一個「子卷」的新概念，而子卷間可以共享元數據或者數據，
用快照命令創建出的子卷就是共享一部分元數據。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id36"&gt;1.2   於是子卷在存儲介質中是如何記錄的呢？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先要說明， btrfs 中大部分長度可變的數據結構都是
&lt;a class="reference external" href="https://www.usenix.org/legacy/events/lsf07/tech/rodeh.pdf"&gt;CoW B-tree&lt;/a&gt;
，一種經過修改適合寫時拷貝的B樹結構，所以在
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/On-disk_Format"&gt;on-disk format&lt;/a&gt;
中提到了很多個樹。這裏的樹不是指文件系統中目錄結構樹，而是寫時拷貝B樹（CoW B-tree，下文簡稱B樹）
，如果不關心B樹細節的話可以把 btrfs 所說的一棵樹理解爲關係數據庫中的一個表，
和數據庫的表一樣 btrfs 的樹的長度可變，然後表項內容根據一個 key 排序。&lt;/p&gt;
&lt;p&gt;B樹結構由索引 key 、中間節點和葉子節點構成。每個 key
是一個 &lt;code class="code"&gt;
(uint64_t object_id, uint8_t item_type, uint64_t item_extra)&lt;/code&gt;

這樣的三元組，三元组每一项的具体含义由 item_type 定義。 key
三元組構成了對象的概念，每個對象（object）在樹中用一個或多個表項（item）描述，同 object_id
的表項共同描述一個對象。B樹中的 key 只用來比較大小而不必連續，從而 object_id
也不必連續，只是按大小排序。有一些預留的 object_id 不能用作別的用途，他們的編號範圍是
-255ULL 到 255ULL，也就是表中前 255 和最後 255 個編號預留。&lt;/p&gt;
&lt;p&gt;B樹中間節點和葉子節點結構大概像是這個樣子：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: btree_nodes Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="354pt" viewbox="0.00 0.00 529.00 354.00" width="529pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 350)"&gt;
&lt;title&gt;btree_nodes&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-350 525,-350 525,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- btree_node --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;btree_node&lt;/title&gt;
&lt;polygon fill="none" points="0,-207.5 0,-345.5 166,-345.5 166,-207.5 0,-207.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-330.3"&gt;header TREE_NODE&lt;/text&gt;
&lt;polyline fill="none" points="0,-322.5 166,-322.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-307.3"&gt;key0: address&lt;/text&gt;
&lt;polyline fill="none" points="0,-299.5 166,-299.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-284.3"&gt;key1: address&lt;/text&gt;
&lt;polyline fill="none" points="0,-276.5 166,-276.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-261.3"&gt;key2: address&lt;/text&gt;
&lt;polyline fill="none" points="0,-253.5 166,-253.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-238.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="0,-230.5 166,-230.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="83" y="-215.3"&gt;free space&lt;/text&gt;
&lt;/g&gt;
&lt;!-- btree_leaf1 --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;btree_leaf1&lt;/title&gt;
&lt;polygon fill="none" points="238,-.5 238,-322.5 403,-322.5 403,-.5 238,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-307.3"&gt;header LEAF_NODE&lt;/text&gt;
&lt;polyline fill="none" points="238,-299.5 403,-299.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-284.3"&gt;key0: offset size&lt;/text&gt;
&lt;polyline fill="none" points="238,-276.5 403,-276.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-261.3"&gt;key1: offset size&lt;/text&gt;
&lt;polyline fill="none" points="238,-253.5 403,-253.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-238.3"&gt;key2: offset size&lt;/text&gt;
&lt;polyline fill="none" points="238,-230.5 403,-230.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-215.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="238,-207.5 403,-207.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-192.3"&gt;keyN offset size&lt;/text&gt;
&lt;polyline fill="none" points="238,-184.5 403,-184.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-169.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="238,-161.5 403,-161.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-146.3"&gt;free space&lt;/text&gt;
&lt;polyline fill="none" points="238,-138.5 403,-138.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-123.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="238,-115.5 403,-115.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-100.3"&gt;dataN&lt;/text&gt;
&lt;polyline fill="none" points="238,-92.5 403,-92.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-77.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="238,-69.5 403,-69.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-54.3"&gt;data2&lt;/text&gt;
&lt;polyline fill="none" points="238,-46.5 403,-46.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-31.3"&gt;data1&lt;/text&gt;
&lt;polyline fill="none" points="238,-23.5 403,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="320.5" y="-8.3"&gt;data0&lt;/text&gt;
&lt;/g&gt;
&lt;!-- btree_node&amp;#45;&amp;gt;btree_leaf1 --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;btree_node:key0-&amp;gt;btree_leaf1:label&lt;/title&gt;
&lt;path d="M166,-311.5C194.375,-311.5 203.8795,-311.5 227.9792,-311.5" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="228,-315.0001 238,-311.5 228,-308.0001 228,-315.0001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- btree_leaf1&amp;#45;&amp;gt;btree_leaf1 --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;btree_leaf1:e-&amp;gt;btree_leaf1:e&lt;/title&gt;
&lt;path d="M403.5,-288.5C442.3333,-297.5 521,-297.5 521,-150 521,-14.3115 454.4278,-3.4458 413.5345,-9.5821" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="412.6651,-6.1849 403.5,-11.5 413.9793,-13.0604 412.6651,-6.1849" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- btree_leaf1&amp;#45;&amp;gt;btree_leaf1 --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;btree_leaf1:w-&amp;gt;btree_leaf1:w&lt;/title&gt;
&lt;path d="M237.5,-265.5C198.6667,-274.5 120,-274.5 120,-150 120,-35.4697 186.5722,-26.2984 227.4655,-32.5703" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="227.0189,-36.0485 237.5,-34.5 228.3409,-29.1745 227.0189,-36.0485" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- btree_leaf1&amp;#45;&amp;gt;btree_leaf1 --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;btree_leaf1:e-&amp;gt;btree_leaf1:e&lt;/title&gt;
&lt;path d="M403.5,-242.5C442.3333,-251.5 521,-251.5 521,-150 521,-56.6279 454.4278,-49.1509 413.5345,-55.5585" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="412.6531,-52.1641 403.5,-57.5 413.9828,-59.0366 412.6531,-52.1641" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;由此，每個中間節點保存一系列 key 到葉子節點的指針，而葉子節點內保存一系列 item ，每個 item
固定大小，並指向節點內某個可變大小位置的 data 。從而邏輯上一棵B樹可以包含任何類型的
item ，每個 item 都可以有可變大小的附加數據。通過這樣的B樹結構，可以緊湊而靈活地表達很多數據類型。&lt;/p&gt;
&lt;p&gt;有這樣的背景之後，比如在
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Flat"&gt;SysadminGuide 這頁的 Flat 佈局&lt;/a&gt;
有個子卷佈局的例子。&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
toplevel         (volume root directory, not to be mounted by default)
    +-- root       (subvolume root directory, to be mounted at /)
    +-- home       (subvolume root directory, to be mounted at /home)
    +-- var        (directory)
    |   \-- www    (subvolume root directory, to be mounted at /var/www)
    \-- postgres   (subvolume root directory, to be mounted at /var/lib/postgresql)
&lt;/pre&gt;
&lt;p&gt;用圓柱體表示子卷的話畫成圖大概是這個樣子：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: Flat_layout Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="206pt" viewbox="0.00 0.00 287.00 206.00" width="287pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 202)"&gt;
&lt;title&gt;Flat_layout&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-202 283,-202 283,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- toplevel --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;toplevel&lt;/title&gt;
&lt;path d="M74,-113.7273C74,-115.5331 57.416,-117 37,-117 16.584,-117 0,-115.5331 0,-113.7273 0,-113.7273 0,-84.2727 0,-84.2727 0,-82.4669 16.584,-81 37,-81 57.416,-81 74,-82.4669 74,-84.2727 74,-84.2727 74,-113.7273 74,-113.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M74,-113.7273C74,-111.9214 57.416,-110.4545 37,-110.4545 16.584,-110.4545 0,-111.9214 0,-113.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="37" y="-95.3"&gt;toplevel&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;path d="M176.5,-194.7273C176.5,-196.5331 164.3982,-198 149.5,-198 134.6018,-198 122.5,-196.5331 122.5,-194.7273 122.5,-194.7273 122.5,-165.2727 122.5,-165.2727 122.5,-163.4669 134.6018,-162 149.5,-162 164.3982,-162 176.5,-163.4669 176.5,-165.2727 176.5,-165.2727 176.5,-194.7273 176.5,-194.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M176.5,-194.7273C176.5,-192.9214 164.3982,-191.4545 149.5,-191.4545 134.6018,-191.4545 122.5,-192.9214 122.5,-194.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="149.5" y="-176.3"&gt;root&lt;/text&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;toplevel-&amp;gt;root&lt;/title&gt;
&lt;path d="M60.5079,-116.7348C74.7361,-127.3823 93.2999,-141.1218 110,-153 111.8699,-154.33 113.7963,-155.6874 115.7451,-157.0508" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="114.115,-160.1795 124.3276,-163 118.1029,-154.4265 114.115,-160.1795" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- home --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;home&lt;/title&gt;
&lt;path d="M177.5,-140.7273C177.5,-142.5331 164.95,-144 149.5,-144 134.05,-144 121.5,-142.5331 121.5,-140.7273 121.5,-140.7273 121.5,-111.2727 121.5,-111.2727 121.5,-109.4669 134.05,-108 149.5,-108 164.95,-108 177.5,-109.4669 177.5,-111.2727 177.5,-111.2727 177.5,-140.7273 177.5,-140.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M177.5,-140.7273C177.5,-138.9214 164.95,-137.4545 149.5,-137.4545 134.05,-137.4545 121.5,-138.9214 121.5,-140.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="149.5" y="-122.3"&gt;home&lt;/text&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;home --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;toplevel-&amp;gt;home&lt;/title&gt;
&lt;path d="M74.1485,-107.9156C86.1488,-110.7957 99.4652,-113.9916 111.5245,-116.8859" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="110.7613,-120.302 121.302,-119.2325 112.395,-113.4953 110.7613,-120.302" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- var --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;var&lt;/title&gt;
&lt;polygon fill="none" points="176.5,-90 173.5,-94 152.5,-94 149.5,-90 122.5,-90 122.5,-54 176.5,-54 176.5,-90" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="149.5" y="-68.3"&gt;var&lt;/text&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;var --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;toplevel-&amp;gt;var&lt;/title&gt;
&lt;path d="M74.1485,-90.0844C86.4488,-87.1323 100.1319,-83.8484 112.4265,-80.8976" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="113.4596,-84.2492 122.3666,-78.512 111.8259,-77.4425 113.4596,-84.2492" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- postgres --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;postgres&lt;/title&gt;
&lt;path d="M189,-32.7273C189,-34.5331 171.2955,-36 149.5,-36 127.7045,-36 110,-34.5331 110,-32.7273 110,-32.7273 110,-3.2727 110,-3.2727 110,-1.4669 127.7045,0 149.5,0 171.2955,0 189,-1.4669 189,-3.2727 189,-3.2727 189,-32.7273 189,-32.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M189,-32.7273C189,-30.9214 171.2955,-29.4545 149.5,-29.4545 127.7045,-29.4545 110,-30.9214 110,-32.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="149.5" y="-14.3"&gt;postgres&lt;/text&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;postgres --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;toplevel-&amp;gt;postgres&lt;/title&gt;
&lt;path d="M60.5079,-81.2652C74.7361,-70.6177 93.2999,-56.8782 110,-45 111.5738,-43.8806 113.1875,-42.7418 114.821,-41.5965" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="116.8432,-44.4534 123.0588,-35.8733 112.8492,-38.7046 116.8432,-44.4534" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- www --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;www&lt;/title&gt;
&lt;path d="M279,-86.7273C279,-88.5331 266.8982,-90 252,-90 237.1018,-90 225,-88.5331 225,-86.7273 225,-86.7273 225,-57.2727 225,-57.2727 225,-55.4669 237.1018,-54 252,-54 266.8982,-54 279,-55.4669 279,-57.2727 279,-57.2727 279,-86.7273 279,-86.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M279,-86.7273C279,-84.9214 266.8982,-83.4545 252,-83.4545 237.1018,-83.4545 225,-84.9214 225,-86.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="252" y="-68.3"&gt;www&lt;/text&gt;
&lt;/g&gt;
&lt;!-- var&amp;#45;&amp;gt;www --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;var-&amp;gt;www&lt;/title&gt;
&lt;path d="M176.699,-72C188.2828,-72 201.9866,-72 214.5073,-72" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="214.6739,-75.5001 224.6739,-72 214.6739,-68.5001 214.6739,-75.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;上圖例子中的 Flat 佈局在 btrfs 中大概是這樣的數據結構，
其中實線箭頭是B樹一系列中間節點和葉子節點，邏輯上指向一棵B樹，虛線箭頭是根據
inode 號之類的編號的引用：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: Flat_layout_on_disk Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="499pt" viewbox="0.00 0.00 1130.00 499.00" width="1130pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 495)"&gt;
&lt;title&gt;Flat_layout_on_disk&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-495 1126,-495 1126,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- superblock --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;superblock&lt;/title&gt;
&lt;polygon fill="none" points="0,-315.5 0,-407.5 123,-407.5 123,-315.5 0,-315.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-392.3"&gt;SUPERBLOCK&lt;/text&gt;
&lt;polyline fill="none" points="0,-384.5 123,-384.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-369.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="0,-361.5 123,-361.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-346.3"&gt;root_tree&lt;/text&gt;
&lt;polyline fill="none" points="0,-338.5 123,-338.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-323.3"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;roottree&lt;/title&gt;
&lt;polygon fill="none" points="195,-62 195,-361 504,-361 504,-62 195,-62" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-345.8"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="195,-338 504,-338 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-322.8"&gt;2: extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-315 504,-315 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-299.8"&gt;3: chunk_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-292 504,-292 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-276.8"&gt;4: dev_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-269 504,-269 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-253.8"&gt;5: fs_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-246 504,-246 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-230.8"&gt;6: root_dir "default" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="195,-223 504,-223 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-207.8"&gt;10: free_space_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-200 504,-200 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-184.8"&gt;256: fs_tree "root"&lt;/text&gt;
&lt;polyline fill="none" points="195,-177 504,-177 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-161.8"&gt;257: fs_tree "home"&lt;/text&gt;
&lt;polyline fill="none" points="195,-154 504,-154 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-138.8"&gt;258: fs_tree "www"&lt;/text&gt;
&lt;polyline fill="none" points="195,-131 504,-131 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-115.8"&gt;259: fs_tree "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="195,-108 504,-108 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-92.8"&gt;-7: tree_log_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-85 504,-85 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-69.8"&gt;-5: orphan_root&lt;/text&gt;
&lt;/g&gt;
&lt;!-- superblock&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;superblock:sn_root-&amp;gt;roottree:label&lt;/title&gt;
&lt;path d="M123,-349.5C151.375,-349.5 160.8795,-349.5 184.9792,-349.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="185,-353.0001 195,-349.5 185,-346.0001 185,-353.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;roottree:e-&amp;gt;roottree:e&lt;/title&gt;
&lt;path d="M504.5,-234.5C552,-243.5 648,-243.5 648,-211.5 648,-181.625 564.3267,-179.6411 514.5622,-186.8328" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="513.7934,-183.4124 504.5,-188.5 514.9376,-190.3183 513.7934,-183.4124" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;toplevel&lt;/title&gt;
&lt;polygon fill="none" points="576,-195.5 576,-425.5 923,-425.5 923,-195.5 576,-195.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-410.3"&gt;FS_TREE "toplevel"&lt;/text&gt;
&lt;polyline fill="none" points="576,-402.5 923,-402.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-387.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-379.5 923,-379.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-364.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-356.5 923,-356.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-341.3"&gt;256: dir_item: "root" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="576,-333.5 923,-333.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-318.3"&gt;256: dir_item: "home" -&amp;gt; ROOT_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-310.5 923,-310.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-295.3"&gt;256: dir_item: "var" -&amp;gt; INODE_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-287.5 923,-287.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-272.3"&gt;256: dir_item: "postgres" -&amp;gt; ROOT_ITEM 259&lt;/text&gt;
&lt;polyline fill="none" points="576,-264.5 923,-264.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-249.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-241.5 923,-241.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-226.3"&gt;257: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-218.5 923,-218.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-203.3"&gt;257: dir_item: "www" -&amp;gt; ROOT_ITEM 258&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;toplevel --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;roottree:root_fs-&amp;gt;toplevel:label&lt;/title&gt;
&lt;path d="M504,-257.5C577.0172,-257.5 506.8191,-399.5423 565.8504,-413.4136" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="565.6843,-416.9157 576,-414.5 566.4293,-409.9555 565.6843,-416.9157" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-444.5 667.5,-490.5 831.5,-490.5 831.5,-444.5 667.5,-444.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-475.3"&gt;FS_TREE "root"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-467.5 831.5,-467.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-452.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;roottree:root_sub_root-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M504,-188.5C617.92,-188.5 502.6779,-347.3126 576,-434.5 602.8896,-466.4744 619.4489,-477.7394 657.3774,-479.3044" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.4342,-482.8061 667.5,-479.5 657.5695,-475.8074 657.4342,-482.8061" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- home --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;home&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-130.5 667.5,-176.5 831.5,-176.5 831.5,-130.5 667.5,-130.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-161.3"&gt;FS_TREE "home"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-153.5 831.5,-153.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-138.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;home --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;roottree:root_sub_home-&amp;gt;home:label&lt;/title&gt;
&lt;path d="M504,-165.5C573.1185,-165.5 592.9293,-165.5 657.2326,-165.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.5,-169.0001 667.5,-165.5 657.5,-162.0001 657.5,-169.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- www --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;www&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-65.5 667.5,-111.5 831.5,-111.5 831.5,-65.5 667.5,-65.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-96.3"&gt;FS_TREE "www"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-88.5 831.5,-88.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-73.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;www --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;roottree:root_sub_www-&amp;gt;www:label&lt;/title&gt;
&lt;path d="M504,-142.5C537.4605,-142.5 543.6289,-128.9684 576,-120.5 612.8107,-110.8702 623.9964,-102.1347 657.4378,-100.7044" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.5732,-104.2024 667.5,-100.5 657.431,-97.2039 657.5732,-104.2024" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- postgres --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;postgres&lt;/title&gt;
&lt;polygon fill="none" points="667,-.5 667,-46.5 832,-46.5 832,-.5 667,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-31.3"&gt;FS_TREE "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="667,-23.5 832,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-8.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;postgres --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;roottree:root_sub_postgres-&amp;gt;postgres:label&lt;/title&gt;
&lt;path d="M504,-119.5C546.8146,-119.5 537.8681,-74.9691 576,-55.5 609.5346,-38.3781 622.9605,-35.847 656.4796,-35.5384" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="656.5135,-39.0384 666.5,-35.5 656.4866,-32.0384 656.5135,-39.0384" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;toplevel:toplevel_dir_root-&amp;gt;roottree:root_sub_root&lt;/title&gt;
&lt;path d="M576,-345.5C502.9828,-345.5 573.1809,-203.4577 514.1496,-189.5864" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514.3157,-186.0843 504,-188.5 513.5707,-193.0445 514.3157,-186.0843" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;toplevel:toplevel_dir_home-&amp;gt;roottree:root_sub_home&lt;/title&gt;
&lt;path d="M576,-322.5C502.9828,-322.5 573.1809,-180.4577 514.1496,-166.5864" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514.3157,-163.0843 504,-165.5 513.5707,-170.0445 514.3157,-163.0843" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;toplevel:toplevel_dir_postgres-&amp;gt;roottree:root_sub_postgres&lt;/title&gt;
&lt;path d="M576,-275.5C503.3669,-275.5 572.8531,-134.3624 514.0988,-120.5795" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514.3154,-117.0828 504,-119.5 513.5713,-124.0431 514.3154,-117.0828" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;toplevel:toplevel_dir_www-&amp;gt;roottree:root_sub_www&lt;/title&gt;
&lt;path d="M576,-206.5C537.0321,-206.5 544.8212,-153.4834 514.2549,-143.957" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514.3929,-140.4415 504,-142.5 513.4082,-147.3719 514.3929,-140.4415" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;toplevel --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;toplevel:e-&amp;gt;toplevel:e&lt;/title&gt;
&lt;path d="M923.5,-298.5C989.3333,-307.5 1122,-307.5 1122,-264 1122,-222.624 1001.9728,-220.6037 933.5984,-228.25" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="932.9943,-224.798 923.5,-229.5 933.8542,-231.745 932.9943,-224.798" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;上圖中已經隱去了很多和本文無關的具體細節，所有這些細節都可以通過
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/Manpage/btrfs-inspect-internal"&gt;btrfs inspect-internal 的 dump-super 和 dump-tree&lt;/a&gt;
查看到。&lt;/p&gt;
&lt;p&gt;ROOT_TREE 中記錄了到所有別的B樹的指針，在一些文檔中叫做 tree of tree roots 。「所有別的B樹」
舉例來說比如 2 號 extent_tree ，3 號 chunk_tree ， 4 號 dev_tree ，10 號 free_space_tree
，這些B樹都是描述 btrfs 文件系統結構非常重要的組成部分，但是在本文關係不大，
今後有機會再討論它們。在 ROOT_TREE 的 5 號對象有一個 fs_tree ，它描述了整個 btrfs pool
的頂級子卷，也就是圖中叫 toplevel 的那個子卷（有些文檔用定冠詞稱 the FS_TREE
的時候就是在說這個 5 號樹，而不是別的子卷的 FS_TREE ）。除了頂級子卷之外，別的所有子卷的 object_id
在 256ULL 到 -256ULL 的範圍之間，對子卷而言 ROOT_TREE 中的這些 object_id 也同時是它們的
子卷 id ，在內核掛載文件系統的時候可以用 subvolid 找到它們，別的一些對子卷的操作也可以直接用
subvolid 表示一個子卷。 ROOT_TREE 的 6 號對象描述的不是一棵樹，而是一個名叫 default
的特殊目錄，它指向 btrfs pool 的默認掛載子卷。最初 mkfs 的時候，這個目錄指向 ROOT_ITEM 5
，也就是那個頂級子卷，之後可以通過命令 &lt;code class="code"&gt;
btrfs subvolume set-default&lt;/code&gt;

修改它指向別的子卷，這裏它被改爲指向 ROOT_ITEM 256 亦即那個名叫 "root" 的子卷。&lt;/p&gt;
&lt;p&gt;每一個子卷都有一棵自己的 FS_TREE （有的文檔中叫 file tree），一個 FS_TREE 相當於傳統 Unix
文件系統中的一整個 inode table ，只不過它除了包含 inode 信息之外還包含所有文件夾內容。在
FS_TREE 中， object_id 同時也是它所描述對象的 inode 號，所以 btrfs
的 &lt;strong&gt;子卷有互相獨立的 inode 編號&lt;/strong&gt; ，不同子卷中的文件或目錄可以擁有相同的 inode 。
或許有人不太清楚子卷間 inode 編號獨立意味着什麼，簡單地說，這意味着你不能跨子卷創建
hard link ，不能跨子卷 mv 移動文件而不產生複製操作。不過因爲 reflink 和 inode 無關，
可以跨子卷創建 reflink ，也可以用 reflink + rm 的方式快速「移動」文件（這裏移動加引號是因爲
inode 變了，傳統上不算移動）。&lt;/p&gt;
&lt;p&gt;FS_TREE 中一個目錄用一個 inode_item 和多個 dir_item 描述， inode_item 是目錄自己的 inode
，那些 dir_item 是目錄的內容。 dir_item 可以指向別的 inode_item 來描述普通文件和子目錄，
也可以指向 root_item 來描述這個目錄指向一個子卷。有人或許疑惑，子卷就沒有自己的 inode
麼？其實如果看 &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/Data_Structures#btrfs_root_item"&gt;數據結構定義&lt;/a&gt;
的話 &lt;code class="code"&gt;
struct btrfs_root_item&lt;/code&gt;
 結構在最開頭的地方包含了一個
&lt;code class="code"&gt;
struct btrfs_inode_item&lt;/code&gt;
 所以 root_item 也同時作爲子卷的 inode
，不過用戶通常看不到這個子卷的 inode ，因爲子卷在被（手動或自動地）掛載到目錄上之後，
用戶會看到的是子卷的根目錄的 inode 。&lt;/p&gt;
&lt;p&gt;比如上圖 FS_TREE toplevel 中，有兩個對象，第一個 256 是（子卷的）根目錄，第二個 257
是 "var" 目錄，256 有4個子目錄，其中 "root" "home" "postgres" 這三個指向了 ROOT_TREE
中的對應子卷，而 "var" 指向了 inode 257 。然後 257 有一個子目錄叫 "www" 它指向了
ROOT_TREE 中 object_id 爲 258 的子卷。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id37"&gt;1.3   那麼快照又是如何記錄的呢？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以上是子卷、目錄、 inode 在 btrfs 中的記錄方式，你可能想知道，如何記錄一個快照呢？
特別是，如果對一個包含子卷的子卷創建了快照，會得到什麼結果呢？如果我們在上面的佈局基礎上執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;btrfs subvolume snapshot toplevel toplevel/toplevel@s1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那麼產生的數據結構大概如下所示：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: Flat_layout_on_disk Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="781pt" viewbox="0.00 0.00 1162.00 781.00" width="1162pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 777)"&gt;
&lt;title&gt;Flat_layout_on_disk&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-777 1158,-777 1158,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- superblock --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;superblock&lt;/title&gt;
&lt;polygon fill="none" points="0,-680.5 0,-772.5 123,-772.5 123,-680.5 0,-680.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-757.3"&gt;SUPERBLOCK&lt;/text&gt;
&lt;polyline fill="none" points="0,-749.5 123,-749.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-734.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="0,-726.5 123,-726.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-711.3"&gt;root_tree&lt;/text&gt;
&lt;polyline fill="none" points="0,-703.5 123,-703.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-688.3"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;roottree&lt;/title&gt;
&lt;polygon fill="none" points="195,-403.5 195,-725.5 504,-725.5 504,-403.5 195,-403.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-710.3"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="195,-702.5 504,-702.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-687.3"&gt;2: extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-679.5 504,-679.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-664.3"&gt;3: chunk_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-656.5 504,-656.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-641.3"&gt;4: dev_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-633.5 504,-633.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-618.3"&gt;5: fs_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-610.5 504,-610.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-595.3"&gt;6: root_dir "default" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="195,-587.5 504,-587.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-572.3"&gt;10: free_space_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-564.5 504,-564.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-549.3"&gt;256: fs_tree "root"&lt;/text&gt;
&lt;polyline fill="none" points="195,-541.5 504,-541.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-526.3"&gt;257: fs_tree "home"&lt;/text&gt;
&lt;polyline fill="none" points="195,-518.5 504,-518.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-503.3"&gt;258: fs_tree "www"&lt;/text&gt;
&lt;polyline fill="none" points="195,-495.5 504,-495.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-480.3"&gt;259: fs_tree "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="195,-472.5 504,-472.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-457.3"&gt;260: fs_tree "toplevel@s1"&lt;/text&gt;
&lt;polyline fill="none" points="195,-449.5 504,-449.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-434.3"&gt;-7: tree_log_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-426.5 504,-426.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-411.3"&gt;-5: orphan_root&lt;/text&gt;
&lt;/g&gt;
&lt;!-- superblock&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;superblock:sn_root-&amp;gt;roottree:label&lt;/title&gt;
&lt;path d="M123,-714.5C151.375,-714.5 160.8795,-714.5 184.9792,-714.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="185,-718.0001 195,-714.5 185,-711.0001 185,-718.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;roottree:e-&amp;gt;roottree:e&lt;/title&gt;
&lt;path d="M504.5,-599.5C552,-608.5 648,-608.5 648,-576 648,-545.6582 564.3267,-543.6433 514.5622,-550.833" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="513.7934,-547.4125 504.5,-552.5 514.9376,-554.3184 513.7934,-547.4125" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;toplevel&lt;/title&gt;
&lt;polygon fill="none" points="576,-380 576,-633 948,-633 948,-380 576,-380" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-617.8"&gt;FS_TREE "toplevel"&lt;/text&gt;
&lt;polyline fill="none" points="576,-610 948,-610 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-594.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-587 948,-587 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-571.8"&gt;256: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-564 948,-564 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-548.8"&gt;256: dir_item: "root" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="576,-541 948,-541 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-525.8"&gt;256: dir_item: "home" -&amp;gt; ROOT_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-518 948,-518 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-502.8"&gt;256: dir_item: "var" -&amp;gt; INODE_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-495 948,-495 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-479.8"&gt;256: dir_item: "postgres" -&amp;gt; ROOT_ITEM 259&lt;/text&gt;
&lt;polyline fill="none" points="576,-472 948,-472 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-456.8"&gt;256: dir_item: "toplevel@s1" -&amp;gt; ROOT_ITEM 260&lt;/text&gt;
&lt;polyline fill="none" points="576,-449 948,-449 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-433.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-426 948,-426 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-410.8"&gt;257: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-403 948,-403 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-387.8"&gt;257: dir_item: "www" -&amp;gt; ROOT_ITEM 258&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;toplevel --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;roottree:root_fs-&amp;gt;toplevel:label&lt;/title&gt;
&lt;path d="M504,-622.5C532.3777,-622.5 541.8777,-621.7137 565.9785,-621.5356" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="566.0125,-625.0356 576,-621.5 565.9876,-618.0356 566.0125,-625.0356" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevels1 --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;toplevels1&lt;/title&gt;
&lt;polygon fill="none" points="588.5,-.5 588.5,-230.5 935.5,-230.5 935.5,-.5 588.5,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-215.3"&gt;FS_TREE "toplevel@s1"&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-207.5 935.5,-207.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-192.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="588.5,-184.5 935.5,-184.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-169.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-161.5 935.5,-161.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-146.3"&gt;256: dir_item: "root" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-138.5 935.5,-138.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-123.3"&gt;256: dir_item: "home" -&amp;gt; ROOT_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-115.5 935.5,-115.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-100.3"&gt;256: dir_item: "var" -&amp;gt; INODE_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-92.5 935.5,-92.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-77.3"&gt;256: dir_item: "postgres" -&amp;gt; ROOT_ITEM 259&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-69.5 935.5,-69.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-54.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="588.5,-46.5 935.5,-46.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-31.3"&gt;257: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="588.5,-23.5 935.5,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-8.3"&gt;257: dir_item: "www" -&amp;gt; ROOT_ITEM 258&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;toplevels1 --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;roottree:root_sub_s1-&amp;gt;toplevels1:label&lt;/title&gt;
&lt;path d="M504,-460.5C613.7754,-460.5 483.5108,-234.7829 577.8149,-220.2347" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="578.2778,-223.7105 588,-219.5 577.7741,-216.7287 578.2778,-223.7105" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="680,-717.5 680,-763.5 844,-763.5 844,-717.5 680,-717.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-748.3"&gt;FS_TREE "root"&lt;/text&gt;
&lt;polyline fill="none" points="680,-740.5 844,-740.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-725.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;roottree:root_sub_root-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M504,-552.5C580.3617,-552.5 521.1427,-655.3795 576,-708.5 609.5199,-740.9586 627.2238,-751.0945 669.8767,-752.3594" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="669.9523,-755.8607 680,-752.5 670.0496,-748.8614 669.9523,-755.8607" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- home --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;home&lt;/title&gt;
&lt;polygon fill="none" points="680,-652.5 680,-698.5 844,-698.5 844,-652.5 680,-652.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-683.3"&gt;FS_TREE "home"&lt;/text&gt;
&lt;polyline fill="none" points="680,-675.5 844,-675.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-660.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;home --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;roottree:root_sub_home-&amp;gt;home:label&lt;/title&gt;
&lt;path d="M504,-529.5C563.5506,-529.5 530.6816,-603.867 576,-642.5 611.6322,-672.8757 627.3697,-685.6659 669.8761,-687.3144" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="669.9375,-690.816 680,-687.5 670.0659,-683.8172 669.9375,-690.816" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- www --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;www&lt;/title&gt;
&lt;polygon fill="none" points="680,-314.5 680,-360.5 844,-360.5 844,-314.5 680,-314.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-345.3"&gt;FS_TREE "www"&lt;/text&gt;
&lt;polyline fill="none" points="680,-337.5 844,-337.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-322.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;www --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;roottree:root_sub_www-&amp;gt;www:label&lt;/title&gt;
&lt;path d="M504,-506.5C572.3925,-506.5 521.2069,-411.4298 576,-370.5 610.9748,-344.3743 629.9117,-348.6235 669.9457,-349.3981" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="669.965,-352.8984 680,-349.5 670.036,-345.8988 669.965,-352.8984" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- postgres --&gt;
&lt;g class="node" id="node8"&gt;
&lt;title&gt;postgres&lt;/title&gt;
&lt;polygon fill="none" points="679.5,-249.5 679.5,-295.5 844.5,-295.5 844.5,-249.5 679.5,-249.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-280.3"&gt;FS_TREE "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="679.5,-272.5 844.5,-272.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="762" y="-257.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;postgres --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;roottree:root_sub_postgres-&amp;gt;postgres:label&lt;/title&gt;
&lt;path d="M504,-483.5C589.7501,-483.5 509.8697,-359.0882 576,-304.5 609.2237,-277.075 629.1685,-283.2528 668.7818,-284.3531" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="668.9507,-287.8558 679,-284.5 669.0514,-280.8565 668.9507,-287.8558" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;toplevel:toplevel_dir_root-&amp;gt;roottree:root_sub_root&lt;/title&gt;
&lt;path d="M576,-552.5C547.625,-552.5 538.1205,-552.5 514.0208,-552.5" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514,-549.0001 504,-552.5 514,-556.0001 514,-549.0001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;toplevel:toplevel_dir_home-&amp;gt;roottree:root_sub_home&lt;/title&gt;
&lt;path d="M576,-529.5C547.625,-529.5 538.1205,-529.5 514.0208,-529.5" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514,-526.0001 504,-529.5 514,-533.0001 514,-526.0001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;toplevel:toplevel_dir_postgres-&amp;gt;roottree:root_sub_postgres&lt;/title&gt;
&lt;path d="M576,-483.5C547.625,-483.5 538.1205,-483.5 514.0208,-483.5" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514,-480.0001 504,-483.5 514,-487.0001 514,-480.0001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;toplevel:toplevel_dir_toplevels1-&amp;gt;roottree:root_sub_s1&lt;/title&gt;
&lt;path d="M576,-460.5C547.625,-460.5 538.1205,-460.5 514.0208,-460.5" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="514,-457.0001 504,-460.5 514,-464.0001 514,-457.0001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;toplevel:toplevel_dir_www-&amp;gt;roottree:root_sub_www&lt;/title&gt;
&lt;path d="M576,-391.5C519.4668,-391.5 558.652,-492.5742 514.0836,-505.2085" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="513.4743,-501.7579 504,-506.5 514.3637,-508.7011 513.4743,-501.7579" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;toplevel --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;toplevel:e-&amp;gt;toplevel:e&lt;/title&gt;
&lt;path d="M948,-506.5C1016.6667,-515.5 1154,-515.5 1154,-460.5 1154,-408.0781 1029.2399,-405.6208 958.0877,-413.2984" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="none" points="957.5158,-409.8417 948,-414.5 958.3438,-416.7926 957.5158,-409.8417" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;在 ROOT_TREE 中增加了 260 號子卷，其內容複製自 toplevel 子卷，然後 FS_TREE toplevel
的 256 號 inode 也就是根目錄中增加一個 dir_item 名叫 &lt;cite&gt;toplevel@s1&lt;/cite&gt; 它指向 ROOT_ITEM
的 260 號子卷。這裏看似是完整複製了整個 FS_TREE 的內容，這是因爲 CoW b-tree
當只有一個葉子節點時就複製整個葉子節點。如果子卷內容再多一些，除了葉子之外還有中間節點，
那麼只有被修改的葉子和其上的中間節點需要複製。從而創建快照的開銷基本上是
O( level of FS_TREE )，而B樹的高度一般都能維持在很低的程度，所以快照創建速度近乎是常數開銷。&lt;/p&gt;
&lt;p&gt;從子卷和快照的這種實現方式，可以看出： &lt;strong&gt;雖然子卷可以嵌套子卷，但是對含有嵌套子卷的子卷做快照的語義有些特別&lt;/strong&gt;
。上圖中我沒有畫 &lt;cite&gt;toplevel@s1&lt;/cite&gt; 下的各個子卷到對應 ROOT_ITEM 之間的虛線箭頭，
是因爲這時候如果你嘗試直接跳過 &lt;cite&gt;toplevel&lt;/cite&gt; 掛載 &lt;cite&gt;toplevel@s1&lt;/cite&gt; 到掛載點，
會發現那些子卷沒有被自動掛載，更奇怪的是那些子卷的目錄項也不是個普通目錄，
嘗試往它們中放東西會得到無權訪問的錯誤，對它們能做的唯一事情是手動將別的子卷掛載在上面。
推測原因在於這些子目錄並不是真的目錄，沒有對應的目錄的 inode ，試圖查看它們的 inode
號會得到 2 號，而這是個保留號不應該出現在 btrfs 的 inode 號中。
每個子卷創建時會記錄包含它的上級子卷，用 &lt;code class="code"&gt;
btrfs subvolume list&lt;/code&gt;
 可以看到每個子卷的
top level subvolid ，猜測當掛載 A 而 A 中嵌套的 B 子卷記錄的上級子卷不是 A 的時候，
會出現上述奇怪行爲。嵌套子卷的快照還有一些別的奇怪行爲，大家可以自己探索探索。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
建議用平坦的子卷佈局&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;p&gt;因爲上述嵌套子卷在做快照時的特殊行爲，
我個人建議是 &lt;strong&gt;保持平坦的子卷佈局&lt;/strong&gt; ，也就是說：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;只讓頂層子卷包含其它子卷，除了頂層子卷之外的子卷只做手工掛載，不放嵌套子卷&lt;/li&gt;
&lt;li&gt;只在頂層子卷對其它子卷做快照，不快照頂層子卷&lt;/li&gt;
&lt;li&gt;雖然可以在頂層子卷放子卷之外的東西（文件或目錄），不過因爲想避免對頂層子卷做快照，
所以避免在頂層子卷放普通文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;btrfs 的子卷可以設置「可寫」或者「只讀」，在創建一個快照的時候也可以通過 &lt;code class="code"&gt;
-r&lt;/code&gt;

參數創建出一個只讀快照。通常只讀快照可能比可寫的快照更有用，因爲 &lt;code class="code"&gt;
btrfs send&lt;/code&gt;

命令只接受只讀快照作爲參考點。子卷可以有兩種方式切換它是否只讀的屬性，可以通過
&lt;code class="code"&gt;
btrfs property set &amp;lt;subvol&amp;gt; ro&lt;/code&gt;
 直接修改是否只讀，也可以對只讀子卷用
&lt;code class="code"&gt;
btrfs subvolume snapshot&lt;/code&gt;
 創建出可寫子卷，或者反過來對可寫子卷創建出只讀子卷。&lt;/p&gt;
&lt;p&gt;只讀快照也有些特殊的限制，在 &lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Special_Cases"&gt;SysadminGuide#Special_Cases&lt;/a&gt;
就提到一例，你不能把只讀快照用 mv 移出包含它的目錄，雖然你能用 mv 給它改名或者移動包含它的目錄
到別的地方。 btrfs wiki 上給出這個限制的原因是子卷中記錄了它的上級，
所以要移動它到別的上級需要修改這個子卷，從而只讀子卷沒法移動到別的上級（
不過我還沒搞清楚子卷在哪兒記錄了它的上級，記錄的是上級目錄還是上級子卷）。不過這個限制可以通過
對只讀快照在目標位置創建一個新的只讀快照，然後刪掉原位置的只讀快照來解決。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zfs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;2   ZFS 的文件系統、快照、克隆及其它&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Btrfs 給傳統文件系統只增加了子卷的概念，相比之下 ZFS 中類似子卷的概念有好幾個，據我所知有這些：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;數據集（dataset）&lt;/li&gt;
&lt;li&gt;文件系統（filesystem）&lt;/li&gt;
&lt;li&gt;快照（snapshot）&lt;/li&gt;
&lt;li&gt;克隆（clone）&lt;/li&gt;
&lt;li&gt;書籤（bookmark）：從 ZFS on Linux v0.6.4 開始&lt;/li&gt;
&lt;li&gt;檢查點（checkpoint）：從 ZFS on Linux v0.8.0 開始&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;梳理一下這些概念之間的關係也是最初想寫下這篇筆記的初衷。先畫個簡圖，隨後逐一講講這些概念：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/f0cd8a5f.png"/&gt;
&lt;p&gt;上圖中，假設我們有一個 pool ，其中有 3 個文件系統叫 fs1~fs3 和一個 zvol 叫 zv1
，然後文件系統 fs1 有兩個快照 s1 和 s2 ，和兩個書籤 b1 和 b2。pool 整體有兩個檢查點 cp1 和
cp2 。這個簡圖將作爲例子在後面介紹這些概念。&lt;/p&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id39"&gt;2.1   ZFS 設計中和快照相關的一些術語和概念&lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="id9"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id40"&gt;數據集&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ZFS 中把文件系統、快照、克隆、zvol 等概念統稱爲數據集（dataset）。
一些文檔和介紹中把文件系統叫做數據集，大概因爲在 ZFS 中，文件系統是最先創建並且最有用的數據集。&lt;/p&gt;
&lt;p&gt;在 ZFS 的術語中，把底層管理和釋放存儲設備空間的叫做 ZFS 存儲池（pool），
簡稱 zpool ，其上可以容納多個數據集，這些數據集用類似文件夾路徑的語法
&lt;code class="code"&gt;
pool_name/​dataset_path@snapshot_name&lt;/code&gt;
 這樣來稱呼。
存儲池中的數據集一同共享可用的存儲空間，每個數據集單獨跟蹤自己所消耗掉的存儲空間。&lt;/p&gt;
&lt;p&gt;數據集之間有類似文件夾的層級父子關係，這一點有用的地方在於可以在父級數據集上設定一些 ZFS 參數，
這些參數可以被子級數據集繼承，從而通過層級關係可以方便地微調 ZFS 參數。在 btrfs
中目前還沒有類似的屬性繼承的功能。&lt;/p&gt;
&lt;p&gt;zvol 的概念和本文關係不大，可以參考我上一篇 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#ZVOL"&gt;ZFS 子系統筆記中 ZVOL 的說明&lt;/a&gt;
。用 zvol 能把 ZFS 當作一個傳統的卷管理器，繞開 ZFS
的 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#ZPL"&gt;ZPL（ZFS Posix filesystem Layer）&lt;/a&gt;
層。在 Btrfs 中可以用 loopback 塊設備某種程度上模擬 zvol 的功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id41"&gt;文件系統&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;創建了 ZFS 存儲池後，首先要在其中創建文件系統（filesystem），才能在文件系統中存儲文件。
容易看出 ZFS 文件系統的概念直接對應 btrfs 中的子卷。文件系統（filesystem）這個術語，
從命名方式來看或許是想要和（像 Solaris 的 SVM 或者 Linux 的 LVM 這樣的）傳統的卷管理器
與其上創建的多個文件系統（Solaris UFS 或者 Linux ext）這樣的上下層級做類比。
從 btrfs 的子卷在內部結構中叫作 FS_TREE 這一點可以看出，至少在 btrfs
早期設計中大概也是把子卷稱爲 filesystem 做過類似的類比的。
和傳統的卷管理器與傳統文件系統的上下層級不同的是， ZFS 和 btrfs 中由存儲池跟蹤和管理可用空間，
做統一的數據塊分配和釋放，沒有分配的數據塊算作整個存儲池中所有 ZFS 文件系統或者 btrfs
子卷的可用空間。&lt;/p&gt;
&lt;p&gt;與 btrfs 的子卷不同的是， ZFS 的文件系統之間是完全隔離的，（除了後文會講的 dedup
方式之外）不可以共享任何數據或者元數據。一個文件系統還包含了隸屬於其中的快照（snapshot）、
克隆（clone）和書籤（bookmark）。在 btrfs 中一個子卷和對其創建的快照之間雖然有父子關係，
但是在 ROOT_TREE 的記錄中屬於平級的關係。&lt;/p&gt;
&lt;p&gt;上面簡圖中 pool 裏面包含 3 個文件系統，分別是 fs1~3 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id42"&gt;快照&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ZFS 的快照對應 btrfs 的只讀快照，是標記數據集在某一歷史時刻上的只讀狀態。
和 btrfs 的只讀快照一樣， ZFS 的快照也兼作 send/receive 時的參考點。
快照隸屬於一個數據集，這說明 ZFS 的文件系統或者 zvol 都可以創建快照。&lt;/p&gt;
&lt;p&gt;ZFS 中快照是排列在一個時間線上的，因爲都是只讀快照，它們是數據集在歷史上的不同時間點。
這裏說的時間不是系統時鐘的時間，而是 ZFS 中事務組（TXG, transaction group）的一個序號。
整個 ZFS pool 的每次寫入會被合併到一個事務組，對事務組分配一個嚴格遞增的序列號，
提交一個事務組具有類似數據庫中事務的語義：要麼整個事務組都被完整提交，要麼整個 pool
處於上一個事務組的狀態，即使中間發生突然斷電之類的意外也不會破壞事務語義。
因此 ZFS 快照就是數據集處於某一個事務組時的狀態。&lt;/p&gt;
&lt;p&gt;如果不滿於對數據集進行的修改，想把整個數據集恢復到之前的狀態，那麼可以回滾（rollback
）數據集到一個快照。回滾操作會撤銷掉對數據集的所有更改，並且默認參數下只能回滾到最近的一個快照。
如果想回滾到更早的快照，可以先刪掉最近的幾個，或者可以使用 &lt;code class="code"&gt;
zfs rollback -r&lt;/code&gt;

參數刪除中間的快照並回滾。&lt;/p&gt;
&lt;p&gt;除了回滾操作，還可以直接只讀訪問到快照中的文件。 ZFS 的文件系統中有個隱藏文件夾叫 ".zfs"
，所以如果只想回滾一部分文件，可以從 ".zfs/snapshots/SNAPSHOT-NAME" 中把需要的文件複製出來。&lt;/p&gt;
&lt;p&gt;比如上面簡圖中 fs1 就有 &lt;code class="code"&gt;
pool/​fs1@s1&lt;/code&gt;
 和 &lt;code class="code"&gt;
pool/​fs1@s2&lt;/code&gt;
 這兩個快照，
那麼可以在 fs1 掛載點下 &lt;code class="code"&gt;
.zfs/​snapshots/​s1&lt;/code&gt;
 的路徑直接訪問到 s1 中的內容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id43"&gt;克隆&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;ZFS 的克隆（clone）有點像 btrfs 的可寫快照。因爲 ZFS 的快照是只讀的，如果想對快照做寫入，那需要先用
&lt;code class="code"&gt;
zfs clone&lt;/code&gt;
 從快照中建出一個克隆，創建出的克隆和快照共享元數據和數據，
然後對克隆的寫入不影響數據集原本的寫入點。
創建了克隆之後，作爲克隆參考點的快照會成爲克隆的依賴，克隆存在期間無法刪除掉作爲其依賴的快照。&lt;/p&gt;
&lt;p&gt;一個數據集可以有多個克隆，這些克隆都獨立於數據集當前的寫入點。使用 &lt;code class="code"&gt;
zfs promote&lt;/code&gt;

命令可以把一個克隆「升級」成爲數據集的當前寫入點，從而數據集原本的寫入點會調轉依賴關係，
成爲這個新寫入點的一個克隆，被升級的克隆原本依賴的快照和之前的快照會成爲新數據集寫入點的快照。&lt;/p&gt;
&lt;p&gt;比如上面簡圖中 fs1 有 c1 的克隆，它依賴於 s2 這個快照，從而 c1 存在的時候就不能刪除掉 s2 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id44"&gt;書籤&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;這是 ZFS 一個比較新的特性，ZFS on Linux 分支從 v0.6.4 開始支持創建書籤的功能。&lt;/p&gt;
&lt;p&gt;書籤（bookmark）特性存在的理由是基於這樣的事實：原本 ZFS 在 send 兩個快照間的差異的時候，比如 send S1 和
S2 之間的差異，在發送端實際上只需要 S1 中記錄的時間戳（TXG id），而不需要 S1 快照的數據，
就可以計算出 S1 到 S2 的差異。在接收端則需要 S1 的完整數據，在其上根據接收到的數據流創建 S2 。
因此在發送端，可以把快照 S1 轉變成書籤，只留下時間戳元數據而不保留任何目錄結構或者文件內容。
書籤只能作爲增量 send 時的參考點，並且在接收端需要有對應的快照，這種方式可以在發送端節省很多存儲。&lt;/p&gt;
&lt;p&gt;通常的使用場景是，比如你有一個筆記本電腦，上面有 ZFS 存儲的數據，然後使用一個服務器上 ZFS
作爲接收端，定期對筆記本上的 ZFS 做快照然後 send 給服務器。在沒有書籤功能的時候，
筆記本上至少得保留一個和服務器上相同的快照，作爲 send 的增量參考點，
而這個快照的內容已經在服務器上，所以筆記本中存有相同的快照只是在浪費存儲空間。
有了書籤功能之後，每次將定期的新快照發送到服務器之後，就可以把這個快照轉化成書籤，節省存儲開銷。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id45"&gt;檢查點&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;這也是 ZFS 的新特性， ZFS on Linux 分支從 v0.8.0 開始支持創建檢查點。&lt;/p&gt;
&lt;p&gt;簡而言之，檢查點（checkpoint）可以看作是整個存儲池級別的快照，使用檢查點能快速將整個存儲池都恢復到上一個狀態。
這邊有篇文章介紹 &lt;a class="reference external" href="https://sdimitro.github.io/post/zpool-checkpoint/"&gt;ZFS checkpoint 功能的背景、用法和限制&lt;/a&gt;
，可以看出當存儲池中有檢查點的時候很多存儲池的功能會受影響（比如不能刪除 vdev 、不能處於
degraded 狀態、不能 scrub 到當前存儲池中已經釋放而在檢查點還在引用的數據塊），
於是檢查點功能設計上更多是給系統管理員準備的用於調整整個 ZFS pool 時的後悔藥，
調整結束後日用狀態下應該刪除掉所有檢查點。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zfs-btrfs"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id46"&gt;2.2   ZFS 的概念與 btrfs 概念的對比&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先說書籤和檢查點，因爲這是兩個 btrfs 目前完全沒有的功能。&lt;/p&gt;
&lt;p&gt;書籤功能完全圍繞 ZFS send 的工作原理，而 ZFS send 位於
&lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#DSL"&gt;ZFS 設計中的 DSL&lt;/a&gt;
層面，甚至不關心它 send 的快照的數據是來自文件系統還是 zvol
。在發送端它只是從目標快照遞歸取數據塊，判斷 TXG
是否老於參照點的快照，然後把新的數據塊全部發往 send stream ；在接收端也只是完整地接收數據塊，
不加以處理，。與之不同的是 btrfs 的 send 的工作原理是工作在文件系統的只讀子卷層面，
發送端在內核代碼中根據目標快照的 b 樹和參照點快照的 generation 生成一個 diff
（可以通過 &lt;code class="code"&gt;
btrfs subvolume find-new&lt;/code&gt;
 直接拿到這個 diff ），然後在用戶態代碼中根據
diff 和參照點、目標快照的兩個只讀子卷的數據產生一連串修改文件系統的指令，
指令包括創建文件、刪除文件、讓文件引用數據塊（保持 reflink ）等操作；在接收端則完全工作在用戶態下，
根據接收到的指令重建目標快照。可見 btrfs send 需要在發送端讀取參照點快照的數據（比如找到
reflink 引用），從而 btrfs 沒法（或者很難）實現書籤功能。&lt;/p&gt;
&lt;p&gt;檢查點也是 btrfs 目前沒有的功能。 btrfs 目前不能對頂層子卷做遞歸的 snapshot ，btrfs
的子卷也沒有類似 ZFS 數據集的層級關係和可繼承屬性，從而沒法實現類似檢查點的功能。&lt;/p&gt;
&lt;p&gt;除了書籤和檢查點之外，剩下的概念可以在 ZFS 和 btrfs 之間有如下映射關係：&lt;/p&gt;
&lt;table border="0" class="docutils table field-list" frame="void" rules="none"&gt;
&lt;col class="field-name"/&gt;
&lt;col class="field-body"/&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ZFS 文件系統:&lt;/th&gt;&lt;td class="field-body"&gt;btrfs 子卷&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ZFS 快照:&lt;/th&gt;&lt;td class="field-body"&gt;btrfs 只讀快照&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;ZFS 克隆:&lt;/th&gt;&lt;td class="field-body"&gt;btrfs 可寫快照&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;對 ZFS 數據集的操作，大部分也可以找到對應的對 btrfs 子卷的操作。&lt;/p&gt;
&lt;table border="0" class="docutils table field-list" frame="void" rules="none"&gt;
&lt;col class="field-name"/&gt;
&lt;col class="field-body"/&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs list:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume list&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs create:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume create&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs destroy:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume delete&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs rename:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
mv&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs snapshot:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume snapshot -r&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs rollback:&lt;/th&gt;&lt;td class="field-body"&gt;這個在 btrfs 需要對只讀快照創建出可寫的快照（用 snapshot 命令，或者直接修改讀寫屬性），然後改名或者調整掛載點&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs diff:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume find-new&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs clone:&lt;/th&gt;&lt;td class="field-body"&gt;&lt;code class="code"&gt;
btrfs subvolume snapshot&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;zfs promote:&lt;/th&gt;&lt;td class="field-body"&gt;和 rollback 類似，可以直接調整 btrfs 子卷的掛載點&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可見雖然功能上類似，但是至少從管理員管理的角度而言， zfs 對文件系統、快照、克隆的劃分更爲清晰，
對他們能做的操作也更爲明確。這也是很多從 ZFS 遷移到 btrfs ，或者反過來從 btrfs 換用 zfs
時，一些人困惑的起源（甚至有人據此說 ZFS 比 btrfs 好在 cli 設計上）。&lt;/p&gt;
&lt;p&gt;不過 btrfs 子卷的設計也使它在系統管理上有了更大的靈活性。比如在 btrfs
中刪除一個子卷不會受制於別的子卷是否存在，而在 zfs 中要刪除一個快照必須先保證先摧毀掉依賴它的克隆。
再比如 btrfs 的可寫子卷沒有主次之分，而 zfs 中一個文件系統和其克隆之間有明顯的區別，所以需要
promote 命令調整差異。還有比如 ZFS 的文件系統只能回滾到最近一次的快照，
要回滾到更久之前的快照需要刪掉中間的快照，並且回滾之後原本的文件系統數據和快照數據就被丟棄了；
而 btrfs 中因爲回滾操作相當於調整子卷的掛載，所以不需要刪掉快照，
並且回滾之後原本的子卷和快照還可以繼續保留。&lt;/p&gt;
&lt;p&gt;加上 btrfs 有 reflink ，這給了 btrfs 在使用中更大的靈活性，可以有一些 zfs 很難做到的用法。
比如想從快照中打撈出一些虛擬機鏡像的歷史副本，而不想回滾整個快照的時候，在
btrfs 中可以直接 &lt;code class="code"&gt;
cp --reflink=always&lt;/code&gt;
 將鏡像從快照中複製出來，此時的複製將和快照共享數據塊；
而在 zfs 中只能用普通 cp 複製，會浪費很多存儲空間。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id47"&gt;2.3   ZFS 中是如何存儲這些數據集的呢&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要講到存儲細節，首先需要 瞭解一下 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html"&gt;ZFS 的分層設計&lt;/a&gt;
。不像 btrfs 基於現代 Linux 內核，有許多現有文件系統已經實現好的基礎設施可以利用，
並且大體上只用到一種核心數據結構（CoW的B樹）； ZFS 則脫胎於 Solaris 的野心勃勃，
設計時就分成很多不同的子系統，逐步提升抽象層次，
並且每個子系統都發明了許多特定需求下的數據結構來描述存儲的信息。 在這裏和本文內容密切相關的是
&lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#zpl"&gt;ZPL&lt;/a&gt; 、 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#DSL"&gt;DSL&lt;/a&gt; 、 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#dmu"&gt;DMU&lt;/a&gt; 這些 ZFS 子系統。&lt;/p&gt;
&lt;p&gt;Sun 曾經寫過一篇 ZFS 的 &lt;a class="reference external" href="http://www.giis.co.in/Zfs_ondiskformat.pdf"&gt;On disk format&lt;/a&gt;
對理解 ZFS 如何存儲在磁盤上很有幫助，雖然這篇文檔是針對 Sun 還在的時候 Solaris 的 ZFS
，現在 ZFS 的內部已經變化挺大，不過對於理解本文想講的快照的實現方式還具有參考意義。這裏藉助這篇
ZFS On Disk Format 中的一些圖示來解釋 ZFS 在磁盤上的存儲方式。&lt;/p&gt;
&lt;div class="section" id="id18"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id48"&gt;ZFS 的塊指針&lt;/a&gt;&lt;/h4&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
&lt;a class="reference external" href="//farseerfc.me/images/zfs-block-pointer.svg"&gt;ZFS 中用的 128 字節塊指針&lt;/a&gt;&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/zfs-block-pointer.svg" type="image/svg+xml"&gt;
zfs-block-pointer.svg&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;要理解 ZFS 的磁盤結構首先想介紹一下 ZFS 中的塊指針（block pointer, &lt;code class="code"&gt;
blkptr_t&lt;/code&gt;

），結構如右圖所示。 ZFS 的塊指針用在 ZFS 的許多數據結構之中，當需要從一個地方指向任意另一個地址的時候都會
插入這樣的一個塊指針結構。大多數文件系統中也有類似的指針結構，比如 btrfs
中有個8字節大小的邏輯地址（logical address），一般也就是個 4字節 到 16字節
大小的整數寫着扇區號、塊號或者字節偏移，在 ZFS 中的塊指針則是一個巨大的128字節（不是
128bit !）的結構體。&lt;/p&gt;
&lt;p&gt;128字節塊指針的開頭是3個數據虛擬地址（DVA, Data Virtual Address），每個 DVA 是 128bit
，其中記錄這塊數據在什麼設備（vdev）的什麼偏移（offset）上佔用多大（asize)，有 3個
DVA 槽是用來存儲最多3個不同位置的副本。然後塊指針還記錄了這個塊用什麼校驗算法（ cksum
）和什麼壓縮算法（comp），壓縮前後的大小（PSIZE/LSIZE），以及256bit的校驗和（checksum）。&lt;/p&gt;
&lt;p&gt;當需要間接塊（indirect block）時，塊指針中記錄了間接塊的層數（lvl），和下層塊指針的數量（fill）。
一個間接塊就是一個數據塊中包含一個塊指針的數組，當引用的對象很大需要很多塊時，間接塊構成一棵樹狀結構。&lt;/p&gt;
&lt;p&gt;塊指針中還有和本文關係很大的一個值 birth txg ，記錄這個塊指針誕生時的整個 pool 的 TXG id
。一次 TXG 提交中寫入的數據塊都會有相同的 birth txg ，這個相當於 btrfs 中 generation 的概念。
實際上現在的 ZFS 塊指針似乎記錄了兩個 birth txg ，分別在圖中的9行和a行的位置，
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSBlockPointers"&gt;一個 physical 一個 logical ，用於 dedup 和 device removal&lt;/a&gt;
。值得注意的是塊指針裏只有 birth txg ，沒有引用計數或者別的機制做引用，這對後面要講的東西很關鍵。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id49"&gt;DSL 的元對象集&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;理解塊指針和 ZFS 的子系統層級之後，就可以來看看 ZFS 存儲在磁盤上的具體結構了。
因爲涉及的數據結構種類比較多，所以先來畫一張邏輯上的簡圖，其中箭頭只是某種引用關係不代表塊指針，
方框也不是結構體細節：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: zfs_layout_simple Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="262pt" viewbox="0.00 0.00 1128.00 262.00" width="1128pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 258)"&gt;
&lt;title&gt;zfs_layout_simple&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-258 1124,-258 1124,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- uberblock --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;uberblock&lt;/title&gt;
&lt;polygon fill="none" points="0,-184.5 0,-253.5 114,-253.5 114,-184.5 0,-184.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="57" y="-238.3"&gt;UBERBLOCK&lt;/text&gt;
&lt;polyline fill="none" points="0,-230.5 114,-230.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="57" y="-215.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="0,-207.5 114,-207.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="57" y="-192.3"&gt;mos_blkptr&lt;/text&gt;
&lt;/g&gt;
&lt;!-- mos --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;mos&lt;/title&gt;
&lt;polygon fill="none" points="186,-115 186,-207 320,-207 320,-115 186,-115" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="253" y="-191.8"&gt;Meta Object Set&lt;/text&gt;
&lt;polyline fill="none" points="186,-184 320,-184 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="253" y="-168.8"&gt;root dataset&lt;/text&gt;
&lt;polyline fill="none" points="186,-161 320,-161 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="253" y="-145.8"&gt;config&lt;/text&gt;
&lt;polyline fill="none" points="186,-138 320,-138 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="253" y="-122.8"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- uberblock&amp;#45;&amp;gt;mos --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;uberblock:ub_rootbp-&amp;gt;mos:mos_label&lt;/title&gt;
&lt;path d="M114,-196C142.375,-196 151.8795,-196 175.9792,-196" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="176,-199.5001 186,-196 176,-192.5001 176,-199.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- root_dataset --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;root_dataset&lt;/title&gt;
&lt;polygon fill="none" points="392,-92 392,-184 541,-184 541,-92 392,-92" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="466.5" y="-168.8"&gt;ROOT dataset&lt;/text&gt;
&lt;polyline fill="none" points="392,-161 541,-161 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="466.5" y="-145.8"&gt;dataset1 directory&lt;/text&gt;
&lt;polyline fill="none" points="392,-138 541,-138 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="466.5" y="-122.8"&gt;dataset2 directory&lt;/text&gt;
&lt;polyline fill="none" points="392,-115 541,-115 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="466.5" y="-99.8"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- mos&amp;#45;&amp;gt;root_dataset --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;mos:mos_root_dataset-&amp;gt;root_dataset:rd_label&lt;/title&gt;
&lt;path d="M320,-173C348.375,-173 357.8795,-173 381.9792,-173" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="382,-176.5001 392,-173 382,-169.5001 382,-176.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ds1_directory --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;ds1_directory&lt;/title&gt;
&lt;polygon fill="none" points="613,-.5 613,-161.5 805,-161.5 805,-.5 613,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-146.3"&gt;DSL Directory&lt;/text&gt;
&lt;polyline fill="none" points="613,-138.5 805,-138.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-123.3"&gt;ds1 property ZAP object&lt;/text&gt;
&lt;polyline fill="none" points="613,-115.5 805,-115.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-100.3"&gt;ds1 child ZAP object&lt;/text&gt;
&lt;polyline fill="none" points="613,-92.5 805,-92.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-77.3"&gt;ds1 dataset (active)&lt;/text&gt;
&lt;polyline fill="none" points="613,-69.5 805,-69.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-54.3"&gt;ds1 snapshot1&lt;/text&gt;
&lt;polyline fill="none" points="613,-46.5 805,-46.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-31.3"&gt;ds1 snapshot2&lt;/text&gt;
&lt;polyline fill="none" points="613,-23.5 805,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="709" y="-8.3"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root_dataset&amp;#45;&amp;gt;ds1_directory --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;root_dataset:rd_ds1-&amp;gt;ds1_directory:ds1_label&lt;/title&gt;
&lt;path d="M541,-150C569.375,-150 578.8795,-150 602.9792,-150" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="603,-153.5001 613,-150 603,-146.5001 603,-153.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ds1_dataset --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;ds1_dataset&lt;/title&gt;
&lt;polygon fill="none" points="916,-67 916,-113 1081,-113 1081,-67 916,-67" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="998.5" y="-97.8"&gt;ds1 DMU Object Set&lt;/text&gt;
&lt;polyline fill="none" points="916,-90 1081,-90 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="998.5" y="-74.8"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ds1_directory&amp;#45;&amp;gt;ds1_dataset --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;ds1_directory:ds1_dataset-&amp;gt;ds1_dataset:ds1_ds_label&lt;/title&gt;
&lt;path d="M805,-81C851.3776,-81 863.7833,-99.0745 905.2509,-101.6868" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="905.3977,-105.1929 915.5,-102 905.6116,-98.1961 905.3977,-105.1929" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ds1_snapshot1 --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;ds1_snapshot1&lt;/title&gt;
&lt;polygon fill="none" points="877,-2 877,-48 1120,-48 1120,-2 877,-2" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="998.5" y="-32.8"&gt;ds1 snapshot1 DMU Object Set&lt;/text&gt;
&lt;polyline fill="none" points="877,-25 1120,-25 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="998.5" y="-9.8"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ds1_directory&amp;#45;&amp;gt;ds1_snapshot1 --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;ds1_directory:ds1_s1-&amp;gt;ds1_snapshot1:ds1_s1_label&lt;/title&gt;
&lt;path d="M805,-58C834.6875,-58 842.165,-41.3425 866.9941,-37.6987" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="867.2681,-41.1882 877,-37 866.7804,-34.2052 867.2681,-41.1882" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;如上簡圖所示，首先 ZFS pool 級別有個 uberblock ，具體每個 vdev 如何存儲和找到這個 uberblock
今後有空再聊，這裏認爲整個 zpool 有唯一的一個 uberblock 。從 uberblock
有個指針指向元對象集（MOS, Meta Object Set），它是個 DMU 的對象集，它包含整個 pool
的一些配置信息，和根數據集（root dataset）。根數據集再包含整個 pool
中保存的所有頂層數據集，每個數據集有一個 DSL Directory 結構。然後從每個數據集的
DSL Directory 可以找到一系列子數據集和一系列快照等結構。最後每個數據集有個 active
的 DMU 對象集，這是整個文件系統的當前寫入點，每個快照也指向一個各自的 DMU 對象集。&lt;/p&gt;
&lt;p&gt;DSL 層的每個數據集的邏輯結構也可以用下面的圖表達（來自 ZFS On Disk Format ）：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/zfs-dsl-infrastructure.svg" type="image/svg+xml"&gt;
zfs-dsl-infrastructure.svg&lt;/object&gt;
&lt;p class="caption"&gt;ZFS On Disk Format 中 4.1 節的 DSL infrastructure&lt;/p&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
&lt;a class="reference external" href="//farseerfc.me/images/zfs-metaobjectset.svg"&gt;ZFS On Disk Format 中 4.2 節的 Meta Object Set&lt;/a&gt;&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="//farseerfc.me/images/zfs-metaobjectset.svg" type="image/svg+xml"&gt;
zfs-metaobjectset.svg&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;需要記得 ZFS 中沒有類似 btrfs 的 CoW b-tree 這樣的統一數據結構，所以上面的這些設施是用各種不同的數據結構表達的。
尤其每個 Directory 的結構可以包含一個 ZAP 的鍵值對存儲，和一個 DMU 對象。
可以理解爲， DSL 用 DMU 對象集（Objectset）表示一個整數（uinit64_t 的 dnode 編號）到 DMU
對象的映射，然後用 ZAP 對象表示一個名字到整數的映射，然後又有很多額外的存儲於 DMU 對象中的 DSL
結構體。如果我們畫出不同的指針和不同的結構體，那麼會得到一個稍顯複雜的圖，見右邊「ZFS
On Disk Format 中 4.2 節的 Meta Object Set」，圖中還只畫到了 root_dataset 爲止。&lt;/p&gt;
&lt;p&gt;看到這裏，大概可以理解在 ZFS 中創建一個 ZFS 快照的操作其實很簡單：找到數據集的 DSL Directory
中當前 active 的 DMU 對象集指針，創建一個表示 snapshot 的 DSL dataset 結構，指向那個
DMU 對象集，然後快照就建好了。因爲今後對 active 的寫入會寫時複製對應的 DMU 對象集，所以
snapshot 指向的 DMU 對象集不會變化。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id50"&gt;3   創建快照這麼簡單麼？那麼刪除快照呢？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;按上面的存儲格式細節來看， btrfs 和 zfs 中創建快照似乎都挺簡單的，利用寫時拷貝，創建快照本身沒什麼複雜操作。&lt;/p&gt;
&lt;p&gt;如果你也聽到過別人介紹 CoW 文件系統時這麼講，是不是會覺得似乎哪兒少了點什麼。創建快照是挺簡單的，
&lt;strong&gt;直到你開始考慮如何刪除快照&lt;/strong&gt; ……&lt;/p&gt;
&lt;p&gt;或者不侷限在刪除單個快照上， CoW 文件系統因爲寫時拷貝，每修改一個文件內容或者修改一個文件系統結構，
都是分配新數據塊，然後考慮是否要刪除這個數據替換的老數據塊，此時如何決定老數據塊能不能刪呢？
刪除快照的時候也是同樣，快照是和別的文件系統有共享一部分數據和元數據的，
所以顯然不能把快照引用到的數據塊都直接刪掉，要考察快照引用的數據塊是否還在別的地方被引用着，
只能刪除那些沒有被引用的數據。&lt;/p&gt;
&lt;p&gt;深究「如何刪快照」這個問題，就能看出 WAFL 、 btrfs 、 ZFS 甚至別的 log-structured
文件系統間的關鍵區別，從而也能看到另一個問題的答案：
&lt;strong&gt;爲什麼 btrfs 只需要子卷的抽象，而 zfs 搞出了這麼多抽象概念？&lt;/strong&gt;
帶着這兩個疑問，我們來研究一下這些文件系統的塊刪除算法。&lt;/p&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;3.1   日誌結構文件系統中用的垃圾回收算法&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;講 btrfs 和 zfs 用到的刪除算法之前，先講一下日誌結構（log-structured）文件系統中的垃圾回收（
GC, Garbage Collection）算法。對熟悉編程的人來說，講到空間釋放算法，大概首先會想到 GC
，因爲這裏要解決的問題乍看起來很像編程語言的內存管理中 GC
想要解決的問題：有很多指針相互指向很多數據結構，找其中沒有被引用的垃圾然後釋放掉。&lt;/p&gt;
&lt;p&gt;首先要澄清一下 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Log-structured_file_system"&gt;日誌結構文件系統（log-structured file system）&lt;/a&gt;
的定義，因爲有很多文件系統用日誌，而用了日誌的不一定是日誌結構文件系統。
在維基百科上有個頁面介紹 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Log-structured_file_system"&gt;日誌結構文件系統&lt;/a&gt;
，還有個 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_log-structured_file_systems"&gt;列表列出了一些日誌結構文件系統&lt;/a&gt;
。通常說，整個文件系統的存儲結構都組織成一個大日誌的樣子，就說這個文件系統是日誌結構的，
這包括很多早期學術研究的文件系統，以及目前 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Log-structured_File_System_(BSD)"&gt;NetBSD 的 LFS&lt;/a&gt;
、Linux 的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/NILFS"&gt;NILFS&lt;/a&gt;
，用在光盤介質上的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Universal_Disk_Format"&gt;UDF&lt;/a&gt;
，還有一些專門爲閃存優化的 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/JFFS"&gt;JFFS&lt;/a&gt; 、
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/YAFFS"&gt;YAFFS&lt;/a&gt; 以及
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/F2FS"&gt;F2FS&lt;/a&gt;
。日誌結構文件系統不包括那些用額外日誌保證文件系統一致性，但文件系統結構不在日誌中的 ext4 、 xfs
、 ntfs 、 hfs+ 。&lt;/p&gt;
&lt;p&gt;簡單來說，日誌結構文件系統就是把存儲設備當作一個大日誌，每次寫入數據時都添加在日誌末尾，
然後用寫時複製重新寫入元數據，最後提交整個文件系統結構。因爲這裏用了寫時複製，原本的數據塊都還留着，
所以可以很容易實現快照之類的功能。從這個特徵上來說，寫時拷貝文件系統（CoW
FS）像 btrfs/zfs 這些在一些人眼中也符合日誌結構文件系統的特徵，
所以也有人說寫時拷貝文件系統算是日誌結構文件系統的一個子類。不過日誌結構文件系統的另一大特徵是利用
GC 回收空間，這裏是本文要講的區別，所以在我看來不用 GC 的 btrfs 和 zfs 不算是日誌結構文件系統。&lt;/p&gt;
&lt;p&gt;舉個例子，比如下圖是一個日誌結構文件系統的磁盤佔用，其中綠色是數據，藍色是元數據（比如目錄結構和
inode），紅色是文件系統級關鍵數據（比如最後的日誌提交點），一開始可能是這樣，有9個數據塊，
2個元數據塊，1個系統塊：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/c8f452c3.png"/&gt;
&lt;p&gt;現在要覆蓋 2 和 3 的內容，新寫入 n2 和 n3 ，再刪除 4 號的內容 ，然後修改 10 裏面的 inode 變成 n10
引用這些新數據，然後寫入一個新提交 n12 ，用黃色表示不再被引用的垃圾，提交完大概是這樣：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/a0eb592f.png"/&gt;
&lt;p&gt;日誌結構文件系統需要 GC 比較容易理解，寫日誌嘛，總得有一個「添加到末尾」的寫入點，比如上面圖中的
n12 就是當前的寫入點。空盤上連續往後寫而不 GC 總會遇到空間末尾，這時候就要覆蓋寫空間開頭，
就很難判斷「末尾」在什麼地方，而下一次寫入需要在哪裏了。
這時文件系統也不知道需要回收哪些塊（圖中的 o2 o3 o4 o10 和 o12），因爲這些塊可能被別的地方還繼續
引用着，需要等到 GC 時掃描元數據來判斷。&lt;/p&gt;
&lt;p&gt;和內存管理時的 GC 不同的一點在於，文件系統的 GC 肯定不能停下整個世界跑 GC
，也不能把整個地址空間對半分然後 Mark-and-Sweep
，這些在內存中還尚可的簡單策略直接放到文件系統中絕對是性能災難。所以文件系統的 GC
需要並行的後臺 GC ，並且需要更細粒度的分塊機制能在 Mark-and-Sweep
的時候保持別的地方可以繼續寫入數據而維持文件系統的正常職能。&lt;/p&gt;
&lt;p&gt;通常文件系統的 GC 是這樣，先把整個盤分成幾個段（segment）或者區域(zone)，術語不同不過表達的概念類似，
然後 GC 時挑一個老段，掃描文件系統元數據找出要釋放的段中還被引用的數據塊，搬運到日誌末尾，最後整個釋放一段。
搬運數據塊時，也要調整文件系統別的地方對被搬運的數據塊的引用。&lt;/p&gt;
&lt;p&gt;物理磁盤上一般有扇區的概念，通常是 512B 或者 4KiB 的大小，在文件系統中一般把連續幾個物理塊作爲一個數據塊，
大概是 4KiB 到 1MiB 的數量級，然後日誌結構文件系統中一個段(segment)通常是連續的很多塊，數量級來看大約是
4MiB 到 64MiB 這樣的數量級。相比之下 ufs/ext4/btrfs/zfs 的分配器通常還有 block group 的概念，
大概是 128MiB 到 1GiB 的大小。可見日誌結構文件系統的段，是位於數據塊和其它文件系統 block group
中間的一個單位。段大小太小的話，會顯著增加空間管理需要的額外時間空間開銷，而段大小太大的話，
又不利於利用整個可用空間，這裏的抉擇有個平衡點。&lt;/p&gt;
&lt;p&gt;繼續上面的例子，假設上面文件系統的圖示中每一列的4塊是一個段，想要回收最開頭那個段，
那麼需要搬運還在用的 1 到空閒空間，順帶修改引用它的 n10 ，最後提交 n12 ：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/ba5b5955.png"/&gt;
&lt;p&gt;要掃描並釋放一整段，需要掃描整個文件系統中別的元數據（圖中的 n12 和 n10 和
11）來確定有沒有引用到目標段中的地址，可見釋放一個段是一個 &lt;span class="math"&gt;\(O(N)\)&lt;/span&gt; 的操作，其中 N
是元數據段的數量，按文件系統的大小增長，
於是刪除快照之類可能要連續釋放很多段的操作在日誌文件系統中是個 &lt;span class="math"&gt;\(O(N^2)\)&lt;/span&gt; 甚至更昂贵的操作。
在文件系統相對比較小而系統內存相對比較大的時候，比如手機上或者PC讀寫SD卡，大部分元數據塊（
其中包含塊指針）都能放入內存緩存起來的話，這個掃描操作的開銷還是可以接受的。
但是對大型存儲系統顯然掃描並釋放空間就不合適了。&lt;/p&gt;
&lt;p&gt;段的抽象用在閃存類存儲設備上的一點優勢在於，閃存通常也有擦除塊的概念，比寫入塊的大小要大，
是連續的多個寫入塊構成，從而日誌結構的文件系統中一個段可以直接對應到閃存的一個擦除塊上。
所以閃存設備諸如U盤或者 SSD 通常在底層固件中用日誌結構文件系統模擬一個塊設備，來做寫入平衡。
大家所說的 SSD 上固件做的 GC ，大概也就是這樣一種操作。&lt;/p&gt;
&lt;p&gt;基於段的 GC 還有一個顯著缺陷，需要掃描元數據，複製搬運仍然被引用到的塊，這不光會增加設備寫入，
還需要調整現有數據結構中的指針，調整指針需要更多寫入，同時又釋放更多數據塊，
F2FS 等一些文件系統設計中把這個問題叫 Wandering Tree Problem ，在 F2FS
設計中是通過近乎「作弊」的 &lt;a class="reference external" href="WanderingTreeProblem"&gt;NAT 轉換表&lt;/a&gt;
放在存儲設備期待的 FAT 所在位置，不僅能讓需要掃描的元數據更集中，還能減少這種指針調整導致的寫入。&lt;/p&gt;
&lt;p&gt;不過基於段的 GC 也有一些好處，它不需要複雜的文件系統設計，不需要特殊構造的指針，
就能很方便地支持大量快照。一些日誌結構文件系統比如 NILFS 用這一點支持了「連續快照（continuous
snapshots）」，每次文件系統提交都是自動創建一個快照，用戶可以手動標記需要保留哪些快照，
GC 算法則排除掉用戶手動標記的快照之後，根據快照創建的時間，先從最老的未標記快照開始回收。
即便如此， GC 的開銷（CPU時間和磁盤讀寫帶寬）仍然是 NILFS
最爲被人詬病的地方，是它難以被廣泛採用的原因。 爲了加快 NILFS 這類日誌文件系統的 GC
性能讓他們能更適合於普通使用場景，也有許多學術研究致力於探索和優化 GC
，使用更先進的數據結構和算法跟蹤數據塊來調整 GC 策略，比如這裏有一篇
&lt;a class="reference external" href="https://www.complang.tuwien.ac.at/Diplomarbeiten/rohner18.pdf"&gt;State-of-the-art Garbage Collection Policies for NILFS2&lt;/a&gt;
。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wafl"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;3.2   WAFL 早期使用的可用空間位圖數組&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;從日誌結構文件系統使用 GC 的困境中可以看出，文件系統級別實際更合適的，
可能不是在運行期依賴掃描元數據來計算空間利用率的 GC
，而是在創建快照時或者寫入數據時就預先記錄下快照的空間利用情況，
從而可以細粒度地跟蹤空間和回收空間，這也是 WAFL 早期實現快照的設計思路。&lt;/p&gt;
&lt;p&gt;WAFL 早期記錄快照佔用數據塊的思路從表面上來看也很「暴力」，傳統文件系統一般有個叫做「位圖（bitmap
）」的數據結構，用一個二進制位記錄一個數據塊是否佔用，靠掃描位圖來尋找可用空間和已用空間。 WAFL
的設計早期中考慮既然需要支持快照，那就把記錄數據塊佔用情況的位圖，變成快照的數組。
於是整個文件系統有個 256 大小的快照利用率數組，數組中每個快照記錄自己佔用的數據塊位圖，
文件系統中最多能容納 255 個快照。&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/5dfeb8e2.png"/&gt;
&lt;p&gt;上面每個單元格都是一個二進制位，表示某個快照有沒有引用某個數據塊。有這樣一個位圖的數組之後，
就可以直接掃描位圖判斷出某個數據塊是否已經佔用，可以找出尚未被佔用的數據塊用作空間分配，
也可以方便地計算每個快照引用的空間大小或者獨佔的空間大小，估算刪除快照後可以釋放的空間。&lt;/p&gt;
&lt;p&gt;需要注意的是，文件系統中可以有非常多的塊，從而位圖數組比位圖需要更多的元數據來表達。
比如估算一下傳統文件系統中一塊可以是 4KiB 大小，那麼跟蹤空間利用的位圖需要 1bit/4KiB
， 1TiB 的盤就需要 32MiB 的元數據來存放位圖；
而 WAFL 這種位圖數組即便限制了快照數量只能有255個，仍需要 256bit/4KiB 的空間開銷，
1TiB 的盤需要的元數據開銷陡增到 8GiB ，這些還只是單純記錄空間利用率的位圖數組，不包括別的元數據。&lt;/p&gt;
&lt;p&gt;使用這麼多元數據表示快照之後，創建快照的開銷也相應地增加了，需要複製整個位圖來創建一個新的快照，
按上面的估算 1TiB 的盤可能需要複製 32MiB 的位圖，這不再是一瞬能完成的事情，
期間可能需要停下所有對文件系統的寫入等待複製完成。
位圖數組在存儲設備上的記錄方式也很有講究，當刪除快照時希望能快速讀寫上圖中的一整行位圖，
於是可能希望每一行位圖的存儲方式在磁盤上都儘量連續，
而在普通的寫入操作需要分配新塊時，想要按列的方式掃描位圖數組，找到沒有被快照佔用的塊，
從而上圖中按列的存儲表達也希望在磁盤上儘量連續。
WAFL 的設計工程師們在位圖數組的思路下，實現了高效的數據結構讓上述兩種維度的操作都能快速完成，
但是這絕不是一件容易的事情。&lt;/p&gt;
&lt;p&gt;位圖數組的表達方式也有其好處，比如除了快照之外，也可以非常容易地表達類似 ZFS
的克隆和獨立的文件系統這樣的概念，這些東西和快照一樣，佔用僅有的 256 個快照數量限制。
這樣表達的克隆可以有數據塊和別的文件系統共享，文件系統之間也可以有類似
reflink 的機制共享數據塊，在位圖數組的相應位置將位置1即可。&lt;/p&gt;
&lt;p&gt;使用位圖數組的做法，也只是 WAFL 早期可能採用的方式，由於 WAFL 本身是閉源產品，
難以獲知它具體的工作原理。哈佛大學和 NetApp 的職員曾經在 FAST10
(USENIX Conference on File and Storage Technologies) 上發表過一篇講解高效跟蹤和使用
back reference 的論文，叫
&lt;a class="reference external" href="https://www.usenix.org/legacy/event/fast10/tech/full_papers/macko.pdf"&gt;Tracking Back References in a Write-Anywhere File System&lt;/a&gt;
，可以推測在新一代 WAFL 的設計中可能使用了類似 btrfs backref 的實現方式，接下來會詳細介紹。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;3.3   ZFS 中關於快照和克隆的空間跟蹤算法&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
How ZFS snapshots really work And why they perform well (usually)&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/NXg86uBDSqI"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.bsdcan.org/2019/schedule/attachments/500_How%20ZFS%20Snapshots%20Really%20Work.pdf"&gt;幻燈片可以從這裏下載&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;embed class="embed-responsive-item" src="//farseerfc.me/images/500_How_ZFS_Snapshots_Really_Work.pdf" style="width:90%;height:480px"/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;OpenZFS 的項目領導者，同時也是最初設計 ZFS 中 DMU 子系統的作者 Matt Ahrens 在 DMU 和 DSL
中設計並實現了 ZFS 獨特的快照的空間跟蹤算法。他也在很多地方發表演講，講過這個算法的思路和細節，
比如右側就是他在 BSDCan 2019 做的演講
&lt;a class="reference external" href="https://youtu.be/NXg86uBDSqI"&gt;How ZFS snapshots really work And why they perform well (usually)&lt;/a&gt;
的 YouTube 視頻。&lt;/p&gt;
&lt;p&gt;其中 Matt 講到了三個刪除快照的算法，分別可以叫做「🐢烏龜算法」、「🐰兔子算法」、「🐆豹子算法」，
接下來簡單講講這些算法背後的思想和實現方式。&lt;/p&gt;
&lt;div class="section" id="id26"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id54"&gt;🐢烏龜算法：概念上 ZFS 如何刪快照&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;烏龜算法沒有實現在 ZFS 中，不過方便理解 ZFS 在概念上如何考慮快照刪除這個問題，從而幫助理解
後面的🐰兔子算法和🐆豹子算法。&lt;/p&gt;
&lt;p&gt;要刪除一個快照， ZFS 需要找出這個快照引用到的「獨佔」數據塊，也就是那些不和別的數據集或者快照共享的
數據塊。 ZFS 刪除快照基於這幾點條件：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ZFS 快照是只讀的。創建快照之後無法修改其內容。&lt;/li&gt;
&lt;li&gt;ZFS 的快照是嚴格按時間順序排列的，這裏的時間指 TXG id ，即記錄文件系統提交所屬事務組的嚴格遞增序號。&lt;/li&gt;
&lt;li&gt;ZFS 不存在 reflink 之類的機制，從而在某個時間點刪除掉的數據塊，不可能在比它更後面的快照中「復活」。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第三點關於 reflink 造成的數據復活現象可能需要解釋一下，比如在（支持 reflink 的） btrfs 中有如下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;btrfs subvolume snapshot -r fs s1&lt;/span&gt;
&lt;span class="code-line"&gt;rm fs/somefile&lt;/span&gt;
&lt;span class="code-line"&gt;btrfs subvolume snapshot -r fs s2&lt;/span&gt;
&lt;span class="code-line"&gt;cp --reflink&lt;span class="o"&gt;=&lt;/span&gt;always s1/somefile fs/somefile&lt;/span&gt;
&lt;span class="code-line"&gt;btrfs subvolume snapshot -r fs s3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我們對 fs 創建了 s1 快照，刪除了 fs 中某個文件，創建了 s2 快照，然後用 reflink
把剛剛刪除的文件從 s1 中複製出來，再創建 s3 。如此操作之後，按時間順序有 s1、s2、s3 三個快照：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/f91316de.png"/&gt;
&lt;p&gt;其中只有 s2 不存在 somefile ，而 s1 、 s3 和當前的 fs 都有，並且都引用到了同一個數據塊。
於是從時間線來看， somefile 的數據塊在 s2 中「死掉」了，又在 s3 中「復活」了。&lt;/p&gt;
&lt;p&gt;而 ZFS (目前還）不支持 reflink ，所以沒法像這樣讓數據塊復活。一旦某個數據塊在某個快照中「死」了，
就意味着它在隨後的所有快照中都不再被引用到了。&lt;/p&gt;
&lt;p&gt;ZFS 的快照具有的上述三點條件，使得 ZFS 的快照刪除算法可以基於 birth time
。回顧上面 &lt;a class="reference internal" href="#id18"&gt;ZFS 的塊指針&lt;/a&gt; 中講到， ZFS 的每個塊指針都有一個 birth txg
屬性，記錄這個塊誕生時 pool 所在的 txg 。於是可以根據這個 birth txg
找到快照所引用的「獨佔」數據塊然後釋放掉它們。&lt;/p&gt;
&lt;p&gt;具體來說，🐢烏龜算法可以這樣刪除一個快照：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在 DSL 層找出要刪除的快照（我們叫他 s ），它的前一個快照（叫它 ps ），後一個快照（叫它 ns
），分別有各自的 birth txg 叫 s.birth, ps.birth, ns.birth 。&lt;/li&gt;
&lt;li&gt;遍歷 s 的 DMU 對象集指針所引出的所有塊指針。
這裏所有塊指針在邏輯上構成一個由塊指針組成的樹狀結構，可以有間接塊組成的指針樹，可以有對象集的
dnode 保存的塊指針，這些都可以看作是樹狀結構的中間節點。&lt;ol class="arabic"&gt;
&lt;li&gt;每個樹節點的指針 bp，考察如果 bp.birth &amp;lt;= ps.birth
，那麼這個指針和其下所有指針都還被前一個快照引用着，需要保留這個 bp 引出的整個子樹。&lt;/li&gt;
&lt;li&gt;按定義 bp.birth 不可能 &amp;gt; s.birth 。&lt;/li&gt;
&lt;li&gt;對所有滿足 ps.birth &amp;lt; bp.birtu &amp;lt;= s.birth 的 bp ，需要去遍歷 ns
的相應塊指針（同樣文件的同樣偏移位置），看是否還在引用 bp 。&lt;ul&gt;
&lt;li&gt;如果存在，繼續遞歸往下考察樹狀結構中 bp 的所有子節點指針。因爲可能共享了這個 bp 但
CoW 了新的子節點。&lt;/li&gt;
&lt;li&gt;如果不存在，說明下一個快照中已經刪了 bp 。這時可以確定地說 bp 是 s 的「獨佔」數據塊。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;釋放掉所有找到的 s 所「獨佔」的數據塊。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述算法的一些邊角情況可以自然地處理，比如沒有後一個快照時使用當前數據集的寫入點，
沒有前一個快照時那麼不被後一個快照引用的數據塊都是當前要刪除快照的獨佔數據塊。&lt;/p&gt;
&lt;p&gt;分析一下烏龜算法的複雜度的話，算法需要分兩次，讀 s 和 ns 中引用到的所有 ps
之後創建的數據塊的指針，重要的是這些讀都是在整個文件系統範圍內的隨機讀操作，所以速度非常慢……&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id27"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id55"&gt;🐰兔子算法：死亡列表算法（ZFS早期）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;可以粗略地認爲🐢烏龜算法算是用 birth txg 優化代碼路徑的 GC 算法，利用了一部分元數據中的 birth txg
信息來避免掃描所有元數據，但是概念上仍然是在掃描元數據找出快照的獨佔數據塊，
而非記錄和跟蹤快照的數據塊，在最壞的情況下仍然可能需要掃描幾乎所有元數據。&lt;/p&gt;
&lt;p&gt;🐰兔子算法基於🐢烏龜算法的基本原理，在它基礎上跟蹤快照所引用數據塊的一些信息，
從而很大程度上避免了掃描元數據的開銷。ZFS 在早期使用這個算法跟蹤數據集和快照引用數據塊的情況。&lt;/p&gt;
&lt;p&gt;🐰兔子算法爲每個數據集（文件系統或快照）增加了一個數據結構，叫死亡列表（dead list），
記錄 &lt;strong&gt;前一個快照中還活着，而當前數據集中死掉了的數據塊指針&lt;/strong&gt;
，換句話說就是在本數據集中「殺掉」的數據塊。舉例畫圖大概是這樣&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/ab76244a.png"/&gt;
&lt;p&gt;上圖中有三個快照和一個文件系統，共 4 個數據集。每個數據集維護自己的死亡列表，
死亡列表中是那些在該數據集中被刪掉的數據塊。於是🐰兔子算法把🐢烏龜算法所做的操作分成了兩部分，
一部分在文件系統刪除數據時記錄死亡列表，另一部分在刪除快照時根據死亡列表釋放需要釋放的塊。&lt;/p&gt;
&lt;p&gt;在當前文件系統刪除數據塊（不再被當前文件系統引用）時，負責比對 birth txg
維護當前文件系統的死亡列表。每刪除一個數據塊，指針爲 bp 時，判斷 bp.birth
和文件系統最新的快照（上圖爲 s3）的 birth：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bp.birth &amp;lt;= s3.birth： 說明 bp 被 s3 引用，於是將 bp 加入 fs1 的 deadlist&lt;/li&gt;
&lt;li&gt;bp.birth &amp;gt; s3.birth：說明 bp 指向的數據塊誕生於 s3 之後，可以直接釋放 bp 指向的塊。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;創建新快照時，將當前文件系統（圖中 fs1）的死亡列表交給快照，文件系統可以初始化一個空列表。&lt;/p&gt;
&lt;p&gt;刪除快照時，我們有被刪除的快照 s 和前一個快照 ps 、後一個快照 ns ，需要讀入當前快照 s
和後一個快照 ns 的死亡列表：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;對 s.deadlist 中的每個指針 bp&lt;ul&gt;
&lt;li&gt;複製 bp 到 ns.deadlist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;對 ns.deadlist 中的每個指針 bp （其中包含了上一步複製來的）&lt;ul&gt;
&lt;li&gt;如果 bp.birth &amp;gt; ps.birth ，釋放 bp 的空間&lt;/li&gt;
&lt;li&gt;否則保留 bp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;換個說法的話， &lt;strong&gt;死亡列表記錄的是每個數據集需要負責刪除，但因爲之前的快照還引用着所以不能刪除的數據塊列表&lt;/strong&gt;
。從當前文件系統中刪除一個數據塊時，這個職責最初落在當前文件系統身上，隨後跟着創建新快照職責被轉移到新快照上。
每個負責的數據集根據數據塊的出生時間是否早於之前一個快照來判斷現在是否能立刻釋放該塊，
刪除一個快照時則重新評估自己負責的和下一個快照負責的數據塊的出生時間。&lt;/p&gt;
&lt;p&gt;從所做的事情來看，🐰兔子算法並沒有比🐢烏龜算法少做很多事情。🐢烏龜算法刪除一個快照，
需要遍歷當前快照和後一個快照兩組數據塊指針中，新寫入的部分；
🐰兔子算法則需要遍歷當前快照和後一個快照兩個死亡列表中，新刪除的塊指針。
但是實際🐰兔子算法能比🐢烏龜算法快不少，因爲維護死亡列表的操作只在文件系統刪除數據時和刪除快照時，
順序寫入，並且刪除快照時也只需要順序讀取死亡列表。在磁盤這種塊設備上，順序訪問能比隨機訪問有數量級的差異。&lt;/p&gt;
&lt;p&gt;不過記錄死亡列表也有一定存儲開銷。最差情況下，比如把文件系統寫滿之後，創建一個快照，
再把所有數據都刪掉，此時文件系統引用的所有數據塊的塊指針都要保存在文件系統的死亡列表中。
按 ZFS 默認的 128KiB 數據塊大小，每塊需要 128 字節的塊指針，存儲這些死亡列表所需開銷可能要
整個文件系統大小的 1/1024 。如果用 4KiB 的數據塊大小，所需開銷則是 1/32 ， 1TiB
的盤會有 32GiB 拿來存放這些塊指針，將高於用位圖數組所需的存儲量。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id28"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id56"&gt;🐆豹子算法：死亡列表的子列表&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;🐆豹子算法是 ZFS 後來在 2009 年左右實現的算法。在🐰兔子算法中就可以看到，每次刪除快照操作死亡列表的時候，
都需要掃描死亡列表中的塊指針，根據指針中記錄的 birth txg 做判斷是否能直接釋放或是需要保留到另一個快照的死亡列表。
於是🐆豹子算法的思路是，在死亡列表中記錄塊指針時，就把其中的塊指針按 birth txg 分成子列表（sublist）。&lt;/p&gt;
&lt;p&gt;比如上面🐰兔子算法中那4個死亡列表，可以這樣拆成子列表：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/34b39b01.png"/&gt;
&lt;p&gt;這樣拆成子列表之後，每次從死亡列表中釋放數據塊都能根據出生時間找到對應的子列表，
然後連續釋放整個子列表。每次合併死亡列表時，也能直接用單鏈表穿起需要合併的子列表，不需要複製塊指針。&lt;/p&gt;
&lt;p&gt;死亡列表並不在跟蹤快照的獨佔大小，而是在跟蹤快照所需負責刪除的數據塊大小，
從這個數值可以推算出快照的獨佔大小之類的信息。
有了按出生時間排列的死亡列表子列表之後，事實上給任何一個出生時間到死亡時間的範圍，
都可以找出對應的幾個子列表，從而根據子列表的大小可以快速計算出每個快照範圍的「獨佔」數據塊、
「共享」數據塊等大小，這不光在刪除快照時很有用，也可以用來根據大小估算 zfs send
或者別的基於快照操作時需要的時間。&lt;/p&gt;
&lt;p&gt;從直覺上理解，雖然 ZFS 沒有直接記錄每個數據塊屬於哪個數據集，但是 ZFS
跟蹤記錄了每個數據塊的歸屬信息，也就是說由哪個數據集負責釋放這個數據塊。
在文件系統中刪除數據塊或者快照時，這個歸屬信息跟着共享數據塊轉移到別的快照中，直到最終被釋放掉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id29"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id57"&gt;生存日誌：ZFS 如何管理克隆的空間佔用&lt;/a&gt;&lt;/h4&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Fast Clone Deletion by Sara Hartse&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/GLABJRWwGMk"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;以上三種算法負責在 ZFS 中跟蹤快照的空間佔用，它們都基於數據塊的誕生時間，所以都假設 ZFS
中對數據塊的分配是位於連續的快照時間軸上。但是明顯 ZFS 除了快照和文件系統，
還有另一種數據集可能分配數據塊，那就是 &lt;a class="reference internal" href="#id12"&gt;克隆&lt;/a&gt;
，於是還需要在克隆中使用不同的算法單獨管理因克隆而分配的數據塊。
OpenZFS Summit 2017 有個演講 &lt;a class="reference external" href="https://www.youtube.com/watch?v=GLABJRWwGMk"&gt;Fast Clone Deletion by Sara Hartse&lt;/a&gt;
解釋了其中的細節。&lt;/p&gt;
&lt;p&gt;首先克隆的存在本身會鎖住克隆引用到的快照，不能刪除這些被依賴的快照，
所以克隆無須擔心靠快照共享的數據塊的管理問題。因此克隆需要管理的，是從快照分離之後，
新創建的數據塊。&lt;/p&gt;
&lt;p&gt;和🐢烏龜算法一樣，原理上刪除克隆的時候可以遍歷克隆引用的整個 DMU
對象集，找出其中晚於快照的誕生時間的數據塊，然後釋放它們。也和🐢烏龜算法一樣，
這樣掃描整個對象集的開銷很大，所以使用一個列表來記錄數據塊指針。
克隆管理新數據塊的思路和快照的🐰兔子算法維持死亡列表的思路相反，
記錄所有新誕生的數據塊，這個列表叫做「生存日誌（livelist）」。&lt;/p&gt;
&lt;p&gt;克隆不光要記錄新數據塊的誕生，還要記錄新數據塊可能的死亡，所以磁盤上保存的生存日誌雖然叫 livelist
，但不像死亡列表那樣是列表的形式，而是日誌的形式，而內存中保存的生存日誌則組織成了棵
&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/AVL%E6%A0%91"&gt;自平衡樹（AVLTree）&lt;/a&gt; 來加速查找。&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/7f244754.png"/&gt;
&lt;p&gt;磁盤上存儲的生存日誌如上圖，每個表項記錄它是分配（A）或者刪除（F）一個數據塊，同時記錄數據塊的地址。
這些記錄在一般情況下直接記錄在日誌末尾，隨着對克隆的寫入操作而不斷增長，長到一定程度則從內存中的
AVL Tree 直接輸出一個新的生存日誌替代掉舊的，合併其中對應的分配和刪除操作。&lt;/p&gt;
&lt;p&gt;生存日誌可以無限增長，從而要將整個生存列表載入內存也有不小的開銷，這裏的解決方案有點像快照管理中用
🐆豹子算法改進🐰兔子算法的思路，把一個克隆的整個生存日誌也按照數據塊的誕生時間拆分成子列表。
Sara Hartse 的演講 Fast Clone Deletion 中繼續解釋了其中的細節和優化方案，感興趣的可以看看。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id30"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id58"&gt;3.4   btrfs 的空間跟蹤算法：引用計數與反向引用&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;理解了 ZFS 中根據 birth txg 管理快照和克隆的算法之後，可以發現它們基於的假設難以用於 WAFL
和 btrfs 。 ZFS 嚴格區分文件系統、快照、克隆，並且不存在 reflink ，從而可以用 birth txg
判斷數據塊是否需要保留，而 WAFL 和 btrfs 中不存在 ZFS 的那些數據集分工，又想支持 reflink
，可見單純基於 birth txg 不足以管理 WAFL 和 btrfs 子卷。&lt;/p&gt;
&lt;p&gt;讓我們回到一開始日誌結構文件系統中基於垃圾回收（GC）的思路上來，作爲程序員來看，
當垃圾回收的性能不足以滿足當前需要時，大概很自然地會想到：引用計數（reference counting）。
編程語言中用引用計數作爲內存管理策略的缺陷是：強引用不能成環，
這在文件系統中看起來不是很嚴重的問題，文件系統總體上看是個樹狀結構，或者就算有共享的數據也是個
上下層級分明的有向圖，很少會使用成環的指針，以及文件系統記錄指針的時候也都會區分指針的類型，
根據指針類型可以分出強弱引用。&lt;/p&gt;
&lt;div class="section" id="extent-tree"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id59"&gt;EXTENT_TREE 和引用計數&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;btrfs 中就是用引用計數的方式跟蹤和管理數據塊的。引用計數本身不能保存在 FS_TREE
或者指向的數據塊中，因爲這個計數需要能夠變化，對只讀快照來說整個 FS_TREE 都是只讀的。
所以這裏增加一層抽象， btrfs 中關於數據塊的引用計數用一個單獨的 CoW B樹來記錄，叫做
EXTENT_TREE ，保存於 ROOT_TREE 中的 2 號對象位置。&lt;/p&gt;
&lt;p&gt;btrfs 中每個塊都是按 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Extent_(file_systems)"&gt;區塊（extent）&lt;/a&gt;
的形式分配的，區塊是一塊連續的存儲空間，而非 zfs 中的固定大小。每個區塊記錄存儲的位置和長度，
以及這裏所說的引用計數。所以本文最開始講 &lt;a class="reference internal" href="#btrfs"&gt;Btrfs 的子卷和快照&lt;/a&gt; 中舉例的那個平坦佈局，如果畫上
EXTENT_TREE 大概像是下圖這樣，其中每個粗箭頭是一個區塊指針，指向磁盤中的邏輯地址，細箭頭則是對應的
EXTENT_TREE 中關於這塊區塊的描述：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: Flat_layout_extents_on_disk Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="599pt" viewbox="0.00 0.00 1280.00 598.88" width="1280pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 594.8766)"&gt;
&lt;title&gt;Flat_layout_extents_on_disk&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-594.8766 1276,-594.8766 1276,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- superblock --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;superblock&lt;/title&gt;
&lt;polygon fill="none" points="0,-315.5 0,-407.5 123,-407.5 123,-315.5 0,-315.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-392.3"&gt;SUPERBLOCK&lt;/text&gt;
&lt;polyline fill="none" points="0,-384.5 123,-384.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-369.3"&gt;...&lt;/text&gt;
&lt;polyline fill="none" points="0,-361.5 123,-361.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-346.3"&gt;root_tree&lt;/text&gt;
&lt;polyline fill="none" points="0,-338.5 123,-338.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="61.5" y="-323.3"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;roottree&lt;/title&gt;
&lt;polygon fill="none" points="195,-62 195,-361 504,-361 504,-62 195,-62" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-345.8"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="195,-338 504,-338 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-322.8"&gt;2: extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-315 504,-315 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-299.8"&gt;3: chunk_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-292 504,-292 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-276.8"&gt;4: dev_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-269 504,-269 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-253.8"&gt;5: fs_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-246 504,-246 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-230.8"&gt;6: root_dir "default" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="195,-223 504,-223 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-207.8"&gt;10: free_space_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-200 504,-200 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-184.8"&gt;256: fs_tree "root"&lt;/text&gt;
&lt;polyline fill="none" points="195,-177 504,-177 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-161.8"&gt;257: fs_tree "home"&lt;/text&gt;
&lt;polyline fill="none" points="195,-154 504,-154 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-138.8"&gt;258: fs_tree "www"&lt;/text&gt;
&lt;polyline fill="none" points="195,-131 504,-131 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-115.8"&gt;259: fs_tree "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="195,-108 504,-108 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-92.8"&gt;-7: tree_log_tree&lt;/text&gt;
&lt;polyline fill="none" points="195,-85 504,-85 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="349.5" y="-69.8"&gt;-5: orphan_root&lt;/text&gt;
&lt;/g&gt;
&lt;!-- superblock&amp;#45;&amp;gt;roottree --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;superblock:sn_root-&amp;gt;roottree:label&lt;/title&gt;
&lt;path d="M123,-349.5C151.375,-349.5 160.8795,-349.5 184.9792,-349.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="185,-353.0001 195,-349.5 185,-346.0001 185,-353.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;toplevel&lt;/title&gt;
&lt;polygon fill="none" points="576,-260.5 576,-490.5 923,-490.5 923,-260.5 576,-260.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-475.3"&gt;FS_TREE "toplevel"&lt;/text&gt;
&lt;polyline fill="none" points="576,-467.5 923,-467.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-452.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-444.5 923,-444.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-429.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-421.5 923,-421.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-406.3"&gt;256: dir_item: "root" -&amp;gt; ROOT_ITEM 256&lt;/text&gt;
&lt;polyline fill="none" points="576,-398.5 923,-398.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-383.3"&gt;256: dir_item: "home" -&amp;gt; ROOT_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-375.5 923,-375.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-360.3"&gt;256: dir_item: "var" -&amp;gt; INODE_ITEM 257&lt;/text&gt;
&lt;polyline fill="none" points="576,-352.5 923,-352.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-337.3"&gt;256: dir_item: "postgres" -&amp;gt; ROOT_ITEM 259&lt;/text&gt;
&lt;polyline fill="none" points="576,-329.5 923,-329.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-314.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="576,-306.5 923,-306.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-291.3"&gt;257: inode_item DIR&lt;/text&gt;
&lt;polyline fill="none" points="576,-283.5 923,-283.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-268.3"&gt;257: dir_item: "www" -&amp;gt; ROOT_ITEM 258&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;toplevel --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;roottree:root_fs-&amp;gt;toplevel:label&lt;/title&gt;
&lt;path d="M504,-257.5C604.0795,-257.5 481.5022,-464.165 565.9262,-478.6961" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="565.7533,-482.1934 576,-479.5 566.3101,-475.2156 565.7533,-482.1934" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-195.5 667.5,-241.5 831.5,-241.5 831.5,-195.5 667.5,-195.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-226.3"&gt;FS_TREE "root"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-218.5 831.5,-218.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-203.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;roottree:root_sub_root-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M504,-188.5C575.5091,-188.5 591.078,-226.6548 657.3427,-230.2318" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.4111,-233.7347 667.5,-230.5 657.5959,-226.7372 657.4111,-233.7347" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- home --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;home&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-130.5 667.5,-176.5 831.5,-176.5 831.5,-130.5 667.5,-130.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-161.3"&gt;FS_TREE "home"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-153.5 831.5,-153.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-138.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;home --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;roottree:root_sub_home-&amp;gt;home:label&lt;/title&gt;
&lt;path d="M504,-165.5C573.1185,-165.5 592.9293,-165.5 657.2326,-165.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.5,-169.0001 667.5,-165.5 657.5,-162.0001 657.5,-169.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- www --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;www&lt;/title&gt;
&lt;polygon fill="none" points="667.5,-65.5 667.5,-111.5 831.5,-111.5 831.5,-65.5 667.5,-65.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-96.3"&gt;FS_TREE "www"&lt;/text&gt;
&lt;polyline fill="none" points="667.5,-88.5 831.5,-88.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-73.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;www --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;roottree:root_sub_www-&amp;gt;www:label&lt;/title&gt;
&lt;path d="M504,-142.5C537.3333,-142.5 543.742,-129.8984 576,-121.5 612.9079,-111.8909 623.9319,-102.3027 657.4191,-100.7257" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="657.5809,-104.2231 667.5,-100.5 657.4241,-97.2248 657.5809,-104.2231" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- postgres --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;postgres&lt;/title&gt;
&lt;polygon fill="none" points="667,-.5 667,-46.5 832,-46.5 832,-.5 667,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-31.3"&gt;FS_TREE "postgres"&lt;/text&gt;
&lt;polyline fill="none" points="667,-23.5 832,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="749.5" y="-8.3"&gt;256: inode_item DIR&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;postgres --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;roottree:root_sub_postgres-&amp;gt;postgres:label&lt;/title&gt;
&lt;path d="M504,-119.5C546.5206,-119.5 538.1561,-75.8865 576,-56.5 609.5913,-39.292 622.8882,-35.9967 656.4598,-35.5574" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="656.5202,-39.0572 666.5,-35.5 656.4801,-32.0573 656.5202,-39.0572" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent_tree --&gt;
&lt;g class="node" id="node8"&gt;
&lt;title&gt;extent_tree&lt;/title&gt;
&lt;polygon fill="none" points="995,-338.5 995,-568.5 1272,-568.5 1272,-338.5 995,-338.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-553.3"&gt;EXTENT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="995,-545.5 1272,-545.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-530.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="995,-522.5 1272,-522.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-507.3"&gt;0x2000 len=0x1000 : ref=1 gen=8&lt;/text&gt;
&lt;polyline fill="none" points="995,-499.5 1272,-499.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-484.3"&gt;0x3000 len=0x1000 : ref=1 gen=8&lt;/text&gt;
&lt;polyline fill="none" points="995,-476.5 1272,-476.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-461.3"&gt;0x11000 len=0x1000 : ref=1 gen=8&lt;/text&gt;
&lt;polyline fill="none" points="995,-453.5 1272,-453.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-438.3"&gt;0x12000 len=0x1000 : ref=1 gen=6&lt;/text&gt;
&lt;polyline fill="none" points="995,-430.5 1272,-430.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-415.3"&gt;0x13000 len=0x1000 : ref=1 gen=6&lt;/text&gt;
&lt;polyline fill="none" points="995,-407.5 1272,-407.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-392.3"&gt;0x14000 len=0x1000 : ref=1 gen=6&lt;/text&gt;
&lt;polyline fill="none" points="995,-384.5 1272,-384.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-369.3"&gt;0x15000 len=0x1000 : ref=1 gen=7&lt;/text&gt;
&lt;polyline fill="none" points="995,-361.5 1272,-361.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="1133.5" y="-346.3"&gt;...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;roottree:root_extent-&amp;gt;extent_tree:label&lt;/title&gt;
&lt;path d="M504,-326.5C601.4064,-326.5 498.2586,-474.812 576,-533.5 722.1806,-643.8537 805.4304,-560.628 984.9901,-557.5848" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="985.0301,-561.0847 995,-557.5 984.9707,-554.085 985.0301,-561.0847" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- roottree&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;roottree:label-&amp;gt;extent_tree:extent_roottree&lt;/title&gt;
&lt;path d="M504,-349.5C578.3499,-349.5 513.6489,-460.0002 576,-500.5 651.4417,-549.5028 885.1193,-514.1107 984.9203,-511.6341" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="985.0475,-515.1328 995,-511.5 984.9543,-508.1334 985.0475,-515.1328" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- toplevel&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;toplevel:label-&amp;gt;extent_tree:extent_toplevel&lt;/title&gt;
&lt;path d="M923,-479.5C951.9064,-479.5 960.5287,-468.4922 984.8395,-465.9983" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="985.1835,-469.4857 995,-465.5 984.8405,-462.4941 985.1835,-469.4857" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;root:label-&amp;gt;extent_tree:extent_root&lt;/title&gt;
&lt;path d="M831.5,-230.5C873.224,-230.5 891.5516,-224.0794 923,-251.5 988.2728,-308.413 911.5209,-430.9023 984.7571,-440.8546" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="984.7996,-444.3641 995,-441.5 985.2399,-437.3779 984.7996,-444.3641" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- home&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;home:label-&amp;gt;extent_tree:extent_home&lt;/title&gt;
&lt;path d="M831.5,-165.5C873.224,-165.5 892.4068,-158.1284 923,-186.5 999.5328,-257.4751 894.4682,-408.0627 984.9685,-417.9844" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="984.8335,-421.482 995,-418.5 985.1929,-414.4912 984.8335,-421.482" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- www&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;www:label-&amp;gt;extent_tree:extent_www&lt;/title&gt;
&lt;path d="M831.5,-100.5C873.224,-100.5 893.0377,-92.463 923,-121.5 1010.8577,-206.6445 877.0747,-385.0229 984.9412,-395.058" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="984.856,-398.5576 995,-395.5 985.1633,-391.5643 984.856,-398.5576" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- postgres&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;postgres:label-&amp;gt;extent_tree:extent_postgres&lt;/title&gt;
&lt;path d="M832.5,-35.5C873.7909,-35.5 893.8612,-27.2448 923,-56.5 1022.0703,-155.9659 859.5991,-361.7078 984.6327,-372.0916" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="984.8699,-375.6035 995,-372.5 985.1456,-368.609 984.8699,-375.6035" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent_tree&amp;#45;&amp;gt;extent_tree --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;extent_tree:extent_extent-&amp;gt;extent_tree:label&lt;/title&gt;
&lt;path d="M994.6922,-483.8069C898.1723,-484.611 803,-494.4106 803,-523 803,-550.5843 891.5981,-560.6768 984.5214,-562.0745" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="984.652,-565.5762 994.6922,-562.1931 984.7337,-558.5767 984.652,-565.5762" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
btrfs 中關於 &lt;code class="code"&gt;
chattr +C&lt;/code&gt;
 關閉了 CoW 的文件的處理&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2020年2月20日補充&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;這裏從 EXTENT_TREE 的記錄可以看出，每個區塊都有引用計數記錄。對用 &lt;code class="code"&gt;
chattr +C&lt;/code&gt;

關閉了 CoW 的文件而言，文件數據同樣還是有引用計數，可以和別的文件或者快照共享文件數據的。
這裏的特殊處理在於，每次寫入一個 nocow 的文件的時候，考察這個文件指向區塊的引用計數，
如果引用計數 &amp;gt;1 ，表示這個文件的區塊發生過 reflink ，那會對文件內容做一次 CoW 斷開
reflink 並寫入新位置；如果引用計數 =1 ，那麼直接原地寫入文件內容而不 CoW 。於是
nocow 的文件仍然能得到 reflink 和 snapshot 的功能，
使用這些功能仍然會造成文件碎片並伴隨性能損失，只是在引用計數爲 1 的時候不發生 CoW 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;包括 ROOT_TREE 和 EXTENT_TREE 在內，btrfs 中所有分配的區塊（extent）都在 EXTENT_TREE
中有對應的記錄，按區塊的邏輯地址索引。從而給定一個區塊，能從 EXTENT_TREE 中找到 ref
字段描述這個區塊有多少引用。不過 ROOT_TREE 、 EXTENT_TREE 和別的一些 pool-wide
數據結構本身不依賴引用計數的，這些數據結構對應的區塊的引用計數總是 1 ，不會和別的樹共享區塊；從 FS_TREE
開始的所有樹節點都可以共享區塊，這包括所有子卷的元數據和文件數據，這些區塊對應的引用計數可以大於
1 表示有多處引用。&lt;/p&gt;
&lt;p&gt;EXTENT_TREE 按區塊的邏輯地址索引，記錄了起始地址和長度，所以 EXTENT_TREE 也兼任 btrfs
的空間利用記錄，充當別的文件系統中 block bitmap 的指責。比如上面例子中的 extent_tree 就表示
&lt;code class="code"&gt;
[0x2000,0x4000) [0x11000,0x16000)&lt;/code&gt;
 這兩段連續的空間是已用空間，
剩下的空間按定義則是可用空間。爲了加速空間分配器， btrfs 也有額外的
free space cache 記錄在 ROOT_TREE 的 10 號位置 free_space_tree 中，不過在 btrfs
中這個 free_space_tree 記錄的信息只是緩存，必要時可以通過
&lt;code class="code"&gt;
btrfs check --clear-space-cache&lt;/code&gt;

扔掉這個緩存重新掃描 extent_tree 並重建可用空間記錄。&lt;/p&gt;
&lt;p&gt;比如我們用如下命令創建了兩個文件，通過 reflink 讓它們共享區塊，然後創建兩個快照，
然後刪除文件系統中的 file2 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;write fs/file1&lt;/span&gt;
&lt;span class="code-line"&gt;cp --reflink&lt;span class="o"&gt;=&lt;/span&gt;always fs/file1 fs/file2&lt;/span&gt;
&lt;span class="code-line"&gt;btrfs subvolume snapshot fs sn1&lt;/span&gt;
&lt;span class="code-line"&gt;btrfs subvolume snapshot fs sn2&lt;/span&gt;
&lt;span class="code-line"&gt;rm fs/file2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;經過以上操作之後，整個 extent_tree 的結構中記錄的引用計數大概如下圖所示：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: btrfs_reflink_backref Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="290pt" viewbox="0.00 0.00 823.00 290.00" width="823pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 286)"&gt;
&lt;title&gt;btrfs_reflink_backref&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-286 819,-286 819,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="0,-90.5 0,-182.5 110,-182.5 110,-90.5 0,-90.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-167.3"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="0,-159.5 110,-159.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-144.3"&gt;sn1&lt;/text&gt;
&lt;polyline fill="none" points="0,-136.5 110,-136.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-121.3"&gt;sn2&lt;/text&gt;
&lt;polyline fill="none" points="0,-113.5 110,-113.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-98.3"&gt;fs&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1 --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;sn1&lt;/title&gt;
&lt;polygon fill="none" points="182,-154.5 182,-200.5 297,-200.5 297,-154.5 182,-154.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-185.3"&gt;FS_TREE sn1&lt;/text&gt;
&lt;polyline fill="none" points="182,-177.5 297,-177.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-162.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn1 --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;root:sn1-&amp;gt;sn1:label&lt;/title&gt;
&lt;path d="M110,-148.5C143.0846,-148.5 145.1136,-181.5948 171.89,-188.3172" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="171.661,-191.8142 182,-189.5 172.4745,-184.8616 171.661,-191.8142" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2 --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;sn2&lt;/title&gt;
&lt;polygon fill="none" points="182,-89.5 182,-135.5 297,-135.5 297,-89.5 182,-89.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-120.3"&gt;FS_TREE sn2&lt;/text&gt;
&lt;polyline fill="none" points="182,-112.5 297,-112.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-97.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn2 --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;root:sn2-&amp;gt;sn2:label&lt;/title&gt;
&lt;path d="M110,-124.5C138.375,-124.5 147.8795,-124.5 171.9792,-124.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="172,-128.0001 182,-124.5 172,-121.0001 172,-128.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;fs&lt;/title&gt;
&lt;polygon fill="none" points="188.5,-24.5 188.5,-70.5 290.5,-70.5 290.5,-24.5 188.5,-24.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-55.3"&gt;FS_TREE fs&lt;/text&gt;
&lt;polyline fill="none" points="188.5,-47.5 290.5,-47.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-32.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;fs --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;root:fs-&amp;gt;fs:label&lt;/title&gt;
&lt;path d="M110,-101.5C145.8591,-101.5 148.6975,-67.0059 178.3652,-60.5382" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="178.9088,-64.0009 188.5,-59.5 178.1954,-57.0374 178.9088,-64.0009" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;extent&lt;/title&gt;
&lt;polygon fill="none" points="599,-97.5 599,-281.5 815,-281.5 815,-97.5 599,-97.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-266.3"&gt;EXTENT_TREE extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="599,-258.5 815,-258.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-243.3"&gt;root_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-235.5 815,-235.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-220.3"&gt;sn1 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-212.5 815,-212.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-197.3"&gt;sn2 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-189.5 815,-189.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-174.3"&gt;sn1 sn2 leaf_node: ref 2&lt;/text&gt;
&lt;polyline fill="none" points="599,-166.5 815,-166.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-151.3"&gt;fs fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-143.5 815,-143.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-128.3"&gt;fs leaf_node : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-120.5 815,-120.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="707" y="-105.3"&gt;file1 : ref 3&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;root:label-&amp;gt;extent:root&lt;/title&gt;
&lt;path d="M110,-171.5C146.3929,-171.5 147.3645,-199.3276 182,-210.5 355.7912,-266.56 410.8974,-248.22 588.778,-247.5202" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.007,-251.0198 599,-247.5 588.9931,-244.0198 589.007,-251.0198" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- snleaf --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;snleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-104 369,-173 527,-173 527,-104 369,-104" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-157.8"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-150 527,-150 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-134.8"&gt;file1&lt;/text&gt;
&lt;polyline fill="none" points="369,-127 527,-127 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-111.8"&gt;file2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;sn1:leaf-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M297,-165.5C325.4188,-165.5 334.8506,-162.3549 358.9677,-161.6424" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.0507,-165.1416 369,-161.5 358.9513,-158.1423 359.0507,-165.1416" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;sn1:label-&amp;gt;extent:sn1&lt;/title&gt;
&lt;path d="M297,-189.5C331.0225,-189.5 335.608,-208.9802 369,-215.5 465.9727,-234.434 494.7483,-225.1896 588.7672,-224.5355" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.0122,-228.0348 599,-224.5 588.9879,-221.0348 589.0122,-228.0348" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;sn2:leaf-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M297,-100.5C335.1725,-100.5 328.7599,-151.0314 358.921,-160.1113" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="358.6158,-163.6023 369,-161.5 359.5713,-156.6678 358.6158,-163.6023" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;sn2:label-&amp;gt;extent:sn2&lt;/title&gt;
&lt;path d="M297,-124.5C338.0913,-124.5 330.8441,-167.2481 369,-182.5 460.9878,-219.27 494.1557,-202.7369 588.7239,-201.5638" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.022,-205.0621 599,-201.5 588.9784,-198.0622 589.022,-205.0621" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fsleaf --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;fsleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-.5 369,-46.5 527,-46.5 527,-.5 369,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-31.3"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-23.5 527,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-8.3"&gt;file1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;fsleaf --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;fs:leaf-&amp;gt;fsleaf:label&lt;/title&gt;
&lt;path d="M290.5,-35.5C321.7092,-35.5 331.9802,-35.5 358.7727,-35.5" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359,-39.0001 369,-35.5 359,-32.0001 359,-39.0001" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;fs:label-&amp;gt;extent:fs&lt;/title&gt;
&lt;path d="M290.5,-59.5C396.7559,-59.5 430.015,-51.0924 527,-94.5 561.6044,-109.9879 558.3556,-146.986 588.8984,-153.5091" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="588.7061,-157.007 599,-154.5 589.3895,-150.0404 588.7061,-157.007" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;snleaf:label-&amp;gt;extent:snleaf&lt;/title&gt;
&lt;path d="M527,-161.5C556.0672,-161.5 564.4226,-174.0803 588.7972,-176.9306" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="588.8205,-180.4372 599,-177.5 589.2106,-173.4481 588.8205,-180.4372" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;snleaf:f1-&amp;gt;extent:f1&lt;/title&gt;
&lt;path d="M527,-138.5C558.0104,-138.5 563.4149,-114.4944 589.024,-109.4307" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.3684,-112.9139 599,-108.5 588.7181,-105.9442 589.3684,-112.9139" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;snleaf:f2-&amp;gt;extent:f1&lt;/title&gt;
&lt;path d="M527,-115.5C555.5088,-115.5 564.7912,-109.9961 588.944,-108.7491" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.0898,-112.2467 599,-108.5 588.9163,-105.2488 589.0898,-112.2467" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;fsleaf:label-&amp;gt;extent:fsleaf&lt;/title&gt;
&lt;path d="M527,-35.5C576.5833,-35.5 550.1066,-118.4746 588.994,-130.1429" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="588.6203,-133.6242 599,-131.5 589.5611,-126.6877 588.6203,-133.6242" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;g class="edge" id="edge15"&gt;
&lt;title&gt;fsleaf:f1-&amp;gt;extent:f1&lt;/title&gt;
&lt;path d="M527,-11.5C576.9145,-11.5 549.8453,-95.3389 588.934,-107.1288" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="588.6191,-110.6181 599,-108.5 589.564,-103.6822 588.6191,-110.6181" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;上圖簡化了一些細節，實際上每個文件可以引用多個區塊（文件碎片），
其中每個對區塊的引用都可以指明引用到具體某個區塊記錄的某個地址偏移和長度，
也就是說文件引用的區塊可以不是區塊記錄中的一整個區塊，而是一部分內容。&lt;/p&gt;
&lt;p&gt;圖中可見，整個文件系統中共有5個文件路徑可以訪問到同一個文件的內容，分別是
&lt;code class="code"&gt;
sn1/​file1, sn1/​file2, sn2/​file1, sn2/​file2, fs/​file1&lt;/code&gt;
 ，
在 extent_tree 中， sn1 和 sn2 可能共享了一個 B樹 葉子節點，這個葉子節點的引用計數爲 2
，然後每個文件的內容都指向同一個 extent ，這個 extent 的引用計數爲 3 。&lt;/p&gt;
&lt;p&gt;刪除子卷時，通過引用計數就能準確地釋放掉子卷所引用的區塊。具體算法挺符合直覺的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;從子卷的 FS_TREE 往下遍歷&lt;ul&gt;
&lt;li&gt;遇到引用計數 &amp;gt;1 的區塊，減小該塊的計數即可，不需要再遞歸下去&lt;/li&gt;
&lt;li&gt;遇到引用計數 =1 的區塊，就是子卷獨佔的區塊，需要釋放該塊並遞歸往下繼續掃描&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大體思路挺像上面介紹的 &lt;a class="reference external" href="🐢烏龜算法：概念上ZFS如何刪快照"&gt;ZFS 快照刪除的🐢烏龜算法&lt;/a&gt;
，只不過根據引用計數而非 birth txg 判斷是否獨佔數據塊。性能上說， btrfs
的B樹本身內容就比較緊湊，FS_TREE 一個結構就容納了文件 inode 和引用的區塊信息，
EXTENT_TREE 按地址排序也比較緊湊，所以刪除算法的隨機讀寫不像 ZFS 的🐢烏龜算法那麼嚴重，
實際實現代碼裏面也可能通過 btrfs generation 做一些類似基於 birth txg 優化的快速代碼路徑。
即便如此，掃描 FS_TREE 仍然可能需要耗時良久，這個遞歸的每一步操作都會記錄在 ROOT_TREE
中專門的結構，也就是說刪除一個子卷的操作可以執行很長時間並跨越多個 pool commit 。
&lt;code class="code"&gt;
btrfs subvolume delete&lt;/code&gt;
 命令默認也只是記錄下這個刪除操作，然後就返回一句類似：
&lt;code class="code"&gt;
Delete subvolume (no-commit): /​subvolume/​path&lt;/code&gt;
 的輸出，不會等刪除操作執行結束。
相比之下 ZFS 那邊刪除一個快照或文件系統必須在一個 txg 內執行完，沒有中間過程的記錄，
所以如果耗時很久會影響整個 pool 的寫入，於是 ZFS 那邊必須對這些操作優化到能在一個 txg
內執行完的程度(摧毀克隆方面
&lt;a class="reference external" href="https://www.delphix.com/blog/delphix-engineering/performance-zfs-destroy"&gt;ZFS 還有 async_destroy 優化&lt;/a&gt;
可能有些幫助)。&lt;/p&gt;
&lt;p&gt;只需要引用計數就足夠完成快照的創建、刪除之類的功能，也能支持 reflink 了（仔細回想，
reflink 其實就是 reference counted link 嘛），普通讀寫下也只需要引用計數。
但是只有引用計數不足以知道區塊的歸屬，不能用引用計數統計每個子卷分別佔用多少空間，
獨佔多少區塊而又共享多少區塊。上面的例子就可以看出，所有文件都指向同一個區塊，該區塊的引用計數爲
3 ，而文件系統中一共有 5 個路徑能訪問到該文件。可見從區塊根據引用計數反推子卷歸屬信息不是那麼一目瞭然的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="back-reference"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id60"&gt;反向引用（back reference）&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;單純從區塊的引用計數難以看出整個文件系統所有子卷中有多少副本。
也就是說單有引用計數的一個數字還不夠，需要記錄具體反向的從區塊往引用源頭指的引用，這種結構在
btrfs 中叫做「反向引用（back reference，簡稱 backref）」。所以在上圖中每一個指向 EXTENT_TREE
的單向箭頭，在 btrfs 中都有記錄一條反向引用，通過反向引用記錄能反過來從被指針指向的位置找回到記錄指針的地方。&lt;/p&gt;
&lt;p&gt;反向引用（backref）是 btrfs 中非常關鍵的機制，在 btrfs kernel wiki 專門有一篇頁面
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/Resolving_Extent_Backrefs"&gt;Resolving Extent Backrefs&lt;/a&gt;
解釋它的原理和實現方式。&lt;/p&gt;
&lt;p&gt;對上面的引用計數的例子畫出反向引用的指針大概是這樣：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: btrfs_reflink_backref Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="546pt" viewbox="0.00 0.00 890.00 546.46" width="890pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 542.4604)"&gt;
&lt;title&gt;btrfs_reflink_backref&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-542.4604 886,-542.4604 886,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="0,-299 0,-391 110,-391 110,-299 0,-299" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-375.8"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="0,-368 110,-368 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-352.8"&gt;sn1&lt;/text&gt;
&lt;polyline fill="none" points="0,-345 110,-345 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-329.8"&gt;sn2&lt;/text&gt;
&lt;polyline fill="none" points="0,-322 110,-322 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-306.8"&gt;fs&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1 --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;sn1&lt;/title&gt;
&lt;polygon fill="none" points="182,-343 182,-389 297,-389 297,-343 182,-343" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-373.8"&gt;FS_TREE sn1&lt;/text&gt;
&lt;polyline fill="none" points="182,-366 297,-366 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-350.8"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn1 --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;root:sn1-&amp;gt;sn1:label&lt;/title&gt;
&lt;path d="M110,-357C139.6875,-357 147.165,-373.6575 171.9941,-377.3013" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="171.7804,-380.7948 182,-378 172.2681,-373.8118 171.7804,-380.7948" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2 --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;sn2&lt;/title&gt;
&lt;polygon fill="none" points="182,-278 182,-324 297,-324 297,-278 182,-278" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-308.8"&gt;FS_TREE sn2&lt;/text&gt;
&lt;polyline fill="none" points="182,-301 297,-301 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-285.8"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn2 --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;root:sn2-&amp;gt;sn2:label&lt;/title&gt;
&lt;path d="M110,-333C139.5791,-333 147.2379,-317.1357 172.0219,-313.6654" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="172.2551,-317.1578 182,-313 171.7892,-310.1733 172.2551,-317.1578" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;fs&lt;/title&gt;
&lt;polygon fill="none" points="188.5,-213 188.5,-259 290.5,-259 290.5,-213 188.5,-213" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-243.8"&gt;FS_TREE fs&lt;/text&gt;
&lt;polyline fill="none" points="188.5,-236 290.5,-236 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-220.8"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;fs --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;root:fs-&amp;gt;fs:label&lt;/title&gt;
&lt;path d="M110,-310C150.6377,-310 145.4268,-258.1984 178.1842,-249.295" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="179.0138,-252.7184 188.5,-248 178.1419,-245.7729 179.0138,-252.7184" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;extent&lt;/title&gt;
&lt;polygon fill="none" points="599,-.5 599,-529.5 882,-529.5 882,-.5 599,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-514.3"&gt;EXTENT_TREE extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="599,-506.5 882,-506.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-491.3"&gt;root_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-483.5 882,-483.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-468.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-460.5 882,-460.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-445.3"&gt;sn1 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-437.5 882,-437.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-422.3"&gt;backref ROOT_TREE sn1&lt;/text&gt;
&lt;polyline fill="none" points="599,-414.5 882,-414.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-399.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-391.5 882,-391.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-376.3"&gt;sn2 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-368.5 882,-368.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-353.3"&gt;backref ROOT_TREE sn2&lt;/text&gt;
&lt;polyline fill="none" points="599,-345.5 882,-345.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-330.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-322.5 882,-322.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-307.3"&gt;sn1 sn2 leaf_node: ref 2&lt;/text&gt;
&lt;polyline fill="none" points="599,-299.5 882,-299.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-284.3"&gt;backref sn1 FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-276.5 882,-276.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-261.3"&gt;backref sn2 FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-253.5 882,-253.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-238.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-230.5 882,-230.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-215.3"&gt;fs fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-207.5 882,-207.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-192.3"&gt;backref ROOT_TREE fs&lt;/text&gt;
&lt;polyline fill="none" points="599,-184.5 882,-184.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-169.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-161.5 882,-161.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-146.3"&gt;fs leaf_node : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-138.5 882,-138.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-123.3"&gt;backref fs FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-115.5 882,-115.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-100.3"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-92.5 882,-92.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-77.3"&gt;file1 : ref 3&lt;/text&gt;
&lt;polyline fill="none" points="599,-69.5 882,-69.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-54.3"&gt;backref sn1 FS_TREE leaf_node file1&lt;/text&gt;
&lt;polyline fill="none" points="599,-46.5 882,-46.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-31.3"&gt;backref sn1 FS_TREE leaf_node file2&lt;/text&gt;
&lt;polyline fill="none" points="599,-23.5 882,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-8.3"&gt;backref fs FS_TREE leaf_node file1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;snleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-92.5 369,-161.5 527,-161.5 527,-92.5 369,-92.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-146.3"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-138.5 527,-138.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-123.3"&gt;file1&lt;/text&gt;
&lt;polyline fill="none" points="369,-115.5 527,-115.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-100.3"&gt;file2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;sn1:leaf-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M297,-354C389.3923,-354 281.9198,-165.6262 358.6977,-150.9095" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.3466,-154.3659 369,-150 358.7309,-147.3931 359.3466,-154.3659" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;extent --&gt;
&lt;!-- sn2&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;sn2:leaf-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M297,-289C362.7688,-289 306.3617,-164.7874 358.7675,-151.2017" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.4765,-154.6425 369,-150 358.66,-147.6903 359.4765,-154.6425" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;fsleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-27 369,-73 527,-73 527,-27 369,-27" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-57.8"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-50 527,-50 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-34.8"&gt;file1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;fsleaf --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;fs:leaf-&amp;gt;fsleaf:label&lt;/title&gt;
&lt;path d="M290.5,-224C366.7574,-224 296.2794,-76.8315 358.7804,-63.0345" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.4034,-66.4894 369,-62 358.6983,-59.525 359.4034,-66.4894" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;extent:br1-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-426C561.4977,-426 563.1005,-459.8426 527,-470 379.398,-511.5302 320.1998,-536.4223 182,-470 139.2574,-449.4568 157.8497,-389.8142 120.2,-381.0742" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="120.3116,-377.5667 110,-380 119.5784,-384.5282 120.3116,-377.5667" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;extent:br2-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-357C554.3693,-357 568.1678,-409.7629 527,-427 470.5865,-450.6205 230.539,-447.6953 182,-432 147.9627,-420.9939 148.904,-387.2293 120.0001,-380.9952" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="120.2975,-377.5076 110,-380 119.6042,-384.4732 120.2975,-377.5076" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;extent:br5-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-196C437.2729,-196 451.6981,-351.8392 297,-399 248.1103,-413.9044 232.6864,-405.5752 182,-399 152.8975,-395.2247 144.817,-383.2055 120.2855,-380.5309" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="120.1671,-377.0202 110,-380 119.8063,-384.0109 120.1671,-377.0202" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;sn1 --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;extent:br3-&amp;gt;sn1:label&lt;/title&gt;
&lt;path d="M599,-288C532.2547,-288 382.0082,-369.7603 307.4346,-377.4253" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="306.7924,-373.9553 297,-378 307.1774,-380.9447 306.7924,-373.9553" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;sn2 --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;extent:br4-&amp;gt;sn2:label&lt;/title&gt;
&lt;path d="M599,-265C466.5438,-265 434.5081,-310.5934 307.1513,-312.9087" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="306.9681,-309.4101 297,-313 307.0311,-316.4099 306.9681,-309.4101" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;fs --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;extent:br6-&amp;gt;fs:label&lt;/title&gt;
&lt;path d="M599,-127C561.4977,-127 561.4368,-156.1499 527,-171 460.1724,-199.8178 437.6774,-189.9207 369,-214 336.6245,-225.3513 329.7175,-243.9007 300.743,-247.4153" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="300.2843,-243.9357 290.5,-248 300.6832,-250.9244 300.2843,-243.9357" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;extent:br7-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M599,-58C550.9315,-58 574.6566,-136.8505 537.245,-148.5549" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.4131,-145.1375 527,-150 537.3909,-152.0689 536.4131,-145.1375" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;extent:br8-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M599,-35C542.4668,-35 581.652,-136.0742 537.0836,-148.7085" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.4743,-145.2579 527,-150 537.3637,-152.2011 536.4743,-145.2579" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;fsleaf --&gt;
&lt;g class="edge" id="edge15"&gt;
&lt;title&gt;extent:br9-&amp;gt;fsleaf:label&lt;/title&gt;
&lt;path d="M599,-12C563.8453,-12 565.2313,-52.7112 537.2135,-60.6626" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.4609,-57.2312 527,-62 537.3698,-64.1719 536.4609,-57.2312" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;EXTENT_TREE 中每個 extent 記錄都同時記錄了引用到這個區塊的反向引用列表。反向引用有兩種記錄方式：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;普通反向引用（Normal back references）。記錄這個指針來源所在是哪顆B樹、 B樹中的對象 id 和對象偏移。&lt;ul&gt;
&lt;li&gt;對文件區塊而言，就是記錄文件所在子卷、inode、和文件內容的偏移。&lt;/li&gt;
&lt;li&gt;對子卷的樹節點區塊而言，就是記錄該區塊的上級樹節點在哪個B樹的哪個位置開始。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享反向引用（Shared back references）。記錄這個指針來源區塊的邏輯地址。&lt;ul&gt;
&lt;li&gt;無論對文件區塊而言，還是對子卷的樹節點區塊而言，都是直接記錄了保存這個區塊指針的上層樹節點的邏輯地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有兩種記錄方式是因爲它們各有性能上的優缺點：&lt;/p&gt;
&lt;table border="0" class="docutils table field-list" frame="void" rules="none"&gt;
&lt;col class="field-name"/&gt;
&lt;col class="field-body"/&gt;
&lt;tbody valign="top"&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;普通反向引用:&lt;/th&gt;&lt;td class="field-body"&gt;因爲通過對象編號記錄，所以當樹節點 CoW 改變了地址時不需要調整地址，
從而在普通的讀寫和快照之類的操作下有更好的性能，
但是在解析反向引用時需要額外一次樹查找。
同時因爲這個額外查找，普通反向引用也叫間接反向引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="field"&gt;&lt;th class="field-name"&gt;共享反向引用:&lt;/th&gt;&lt;td class="field-body"&gt;因爲直接記錄了邏輯地址，所以當這個地址的節點被 CoW 的時候也需要調整這裏記錄的地址。
在普通的讀寫和快照操作下，調整地址會增加寫入從而影響性能，但是在解析反向引用時更快。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通常通過普通寫入、快照、 reflink 等方式創建出來的引用是普通反向引用，
由於普通反向引用記錄了包含它的B樹，從而可以說綁在了某棵樹比如某個子卷上，
當這個普通反向引用指向的對象不再存在，而這個反向引用還在通過別的途徑共享時，
這個普通反向引用會轉換共享反向引用；共享反向引用在存在期間不會變回普通反向引用。&lt;/p&gt;
&lt;p&gt;比如上圖反向引用的例子中，我們先假設所有畫出的反向引用都是普通反向引用，於是圖中標爲 file1
引用數爲 3 的那個區塊有 3 條反向引用記錄，其中前兩條都指向 sn1 裏面的文件，分別是 sn1/file1
和 sn1/file2 ，然後 sn1 和 sn2 共享了 FS_TREE 的葉子節點。&lt;/p&gt;
&lt;p&gt;假設這時我們刪除 sn1/file2，執行了代碼 &lt;code class="code"&gt;
rm sn1/​file2&lt;/code&gt;
 之後：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: btrfs_reflink_shared_backref Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="614pt" viewbox="0.00 0.00 890.00 613.50" width="890pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 609.5)"&gt;
&lt;title&gt;btrfs_reflink_shared_backref&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-609.5 886,-609.5 886,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;!-- root --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;root&lt;/title&gt;
&lt;polygon fill="none" points="0,-375.5 0,-467.5 110,-467.5 110,-375.5 0,-375.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-452.3"&gt;ROOT_TREE&lt;/text&gt;
&lt;polyline fill="none" points="0,-444.5 110,-444.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-429.3"&gt;sn1&lt;/text&gt;
&lt;polyline fill="none" points="0,-421.5 110,-421.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-406.3"&gt;sn2&lt;/text&gt;
&lt;polyline fill="none" points="0,-398.5 110,-398.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="55" y="-383.3"&gt;fs&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1 --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;sn1&lt;/title&gt;
&lt;polygon fill="none" points="182,-419.5 182,-465.5 297,-465.5 297,-419.5 182,-419.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-450.3"&gt;FS_TREE sn1&lt;/text&gt;
&lt;polyline fill="none" points="182,-442.5 297,-442.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-427.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn1 --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;root:sn1-&amp;gt;sn1:label&lt;/title&gt;
&lt;path d="M110,-433.5C139.6875,-433.5 147.165,-450.1575 171.9941,-453.8013" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="171.7804,-457.2948 182,-454.5 172.2681,-450.3118 171.7804,-457.2948" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2 --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;sn2&lt;/title&gt;
&lt;polygon fill="none" points="182,-354.5 182,-400.5 297,-400.5 297,-354.5 182,-354.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-385.3"&gt;FS_TREE sn2&lt;/text&gt;
&lt;polyline fill="none" points="182,-377.5 297,-377.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-362.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;sn2 --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;root:sn2-&amp;gt;sn2:label&lt;/title&gt;
&lt;path d="M110,-409.5C139.5791,-409.5 147.2379,-393.6357 172.0219,-390.1654" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="172.2551,-393.6578 182,-389.5 171.7892,-386.6733 172.2551,-393.6578" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;fs&lt;/title&gt;
&lt;polygon fill="none" points="188.5,-250.5 188.5,-296.5 290.5,-296.5 290.5,-250.5 188.5,-250.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-281.3"&gt;FS_TREE fs&lt;/text&gt;
&lt;polyline fill="none" points="188.5,-273.5 290.5,-273.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="239.5" y="-258.3"&gt;leaf_node&lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;fs --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;root:fs-&amp;gt;fs:label&lt;/title&gt;
&lt;path d="M110,-386.5C163.0775,-386.5 135.9169,-298.4687 178.3378,-286.777" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="179.0145,-290.2196 188.5,-285.5 178.1416,-283.2742 179.0145,-290.2196" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent --&gt;
&lt;g class="node" id="node8"&gt;
&lt;title&gt;extent&lt;/title&gt;
&lt;polygon fill="none" points="599,-30 599,-605 882,-605 882,-30 599,-30" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-589.8"&gt;EXTENT_TREE extent_tree&lt;/text&gt;
&lt;polyline fill="none" points="599,-582 882,-582 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-566.8"&gt;root_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-559 882,-559 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-543.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-536 882,-536 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-520.8"&gt;sn1 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-513 882,-513 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-497.8"&gt;backref ROOT_TREE sn1&lt;/text&gt;
&lt;polyline fill="none" points="599,-490 882,-490 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-474.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-467 882,-467 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-451.8"&gt;sn2 fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-444 882,-444 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-428.8"&gt;backref ROOT_TREE sn2&lt;/text&gt;
&lt;polyline fill="none" points="599,-421 882,-421 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-405.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-398 882,-398 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-382.8"&gt;sn1 sn2 leaf_node: ref 2&lt;/text&gt;
&lt;polyline fill="none" points="599,-375 882,-375 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-359.8"&gt;backref sn1 FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-352 882,-352 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-336.8"&gt;backref sn2 FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-329 882,-329 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-313.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-306 882,-306 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-290.8"&gt;fs fs_tree : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-283 882,-283 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-267.8"&gt;backref ROOT_TREE fs&lt;/text&gt;
&lt;polyline fill="none" points="599,-260 882,-260 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-244.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-237 882,-237 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-221.8"&gt;fs leaf_node : ref 1&lt;/text&gt;
&lt;polyline fill="none" points="599,-214 882,-214 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-198.8"&gt;backref fs FS_TREE node&lt;/text&gt;
&lt;polyline fill="none" points="599,-191 882,-191 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-175.8"&gt; &lt;/text&gt;
&lt;polyline fill="none" points="599,-168 882,-168 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-152.8"&gt;file1 : ref 4&lt;/text&gt;
&lt;polyline fill="none" points="599,-145 882,-145 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-129.8"&gt;backref FS_TREE leaf_node file1&lt;/text&gt;
&lt;polyline fill="none" points="599,-122 882,-122 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-106.8"&gt;backref FS_TREE leaf_node file2&lt;/text&gt;
&lt;polyline fill="none" points="599,-99 882,-99 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-83.8"&gt;backref fs FS_TREE leaf_node file1&lt;/text&gt;
&lt;polyline fill="none" points="599,-76 882,-76 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-60.8"&gt;backref sn1 FS_TREE leaf_node file1&lt;/text&gt;
&lt;polyline fill="none" points="599,-53 882,-53 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="740.5" y="-37.8"&gt; &lt;/text&gt;
&lt;/g&gt;
&lt;!-- root&amp;#45;&amp;gt;extent --&gt;
&lt;!-- sn1leaf --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;sn1leaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-.5 369,-46.5 527,-46.5 527,-.5 369,-.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-31.3"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-23.5 527,-23.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-8.3"&gt;file1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;sn1leaf --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;sn1:leaf-&amp;gt;sn1leaf:label&lt;/title&gt;
&lt;path d="M297,-430.5C471.7886,-430.5 202.0422,-51.535 358.5979,-35.9916" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.1764,-39.4682 369,-35.5 358.8459,-32.476 359.1764,-39.4682" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn1&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;snleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-131 369,-200 527,-200 527,-131 369,-131" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-184.8"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-177 527,-177 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-161.8"&gt;file1&lt;/text&gt;
&lt;polyline fill="none" points="369,-154 527,-154 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-138.8"&gt;file2&lt;/text&gt;
&lt;/g&gt;
&lt;!-- sn2&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;sn2:leaf-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M297,-365.5C378.2769,-365.5 292.1456,-203.3841 359.0359,-189.4523" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.3784,-192.9356 369,-188.5 358.7123,-185.9674 359.3784,-192.9356" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- sn2&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;fsleaf&lt;/title&gt;
&lt;polygon fill="none" points="369,-65.5 369,-111.5 527,-111.5 527,-65.5 369,-65.5" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-96.3"&gt;FS_TREE leaf_node&lt;/text&gt;
&lt;polyline fill="none" points="369,-88.5 527,-88.5 " stroke="#000000"&gt;&lt;/polyline&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="448" y="-73.3"&gt;file1&lt;/text&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;fsleaf --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;fs:leaf-&amp;gt;fsleaf:label&lt;/title&gt;
&lt;path d="M290.5,-261.5C366.3764,-261.5 296.6069,-115.24 358.8289,-101.5281" fill="none" stroke="#000000" stroke-width="2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="359.4027,-104.988 369,-100.5 358.6987,-98.0235 359.4027,-104.988" stroke="#000000" stroke-width="2"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- fs&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- snleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- fsleaf&amp;#45;&amp;gt;extent --&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;extent:br1-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-501.5C464.7417,-501.5 431.2493,-506.9443 297,-508.5 245.8923,-509.0922 230.6319,-524.2253 182,-508.5 147.9627,-497.4939 148.904,-463.7293 120.0001,-457.4952" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="120.2975,-454.0076 110,-456.5 119.6042,-460.9732 120.2975,-454.0076" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;extent:br2-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-432.5C412.6839,-432.5 366.7679,-499.4688 182,-475.5 152.8975,-471.7247 144.817,-459.7055 120.2855,-457.0309" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="120.1671,-453.5202 110,-456.5 119.8063,-460.5109 120.1671,-453.5202" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;root --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;extent:br5-&amp;gt;root:label&lt;/title&gt;
&lt;path d="M599,-271.5C551.9428,-271.5 221.2192,-319.4954 182,-345.5 136.0546,-375.9645 164.6578,-446.8667 119.9606,-455.6104" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="119.649,-452.1242 110,-456.5 120.2717,-459.0965 119.649,-452.1242" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;sn1 --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;extent:br3-&amp;gt;sn1:label&lt;/title&gt;
&lt;path d="M599,-363.5C547.0832,-363.5 416.9848,-384.6803 369,-404.5 336.5079,-417.9206 335.7513,-447.8324 307.2897,-453.5466" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="306.6344,-450.0922 297,-454.5 307.2803,-457.0624 306.6344,-450.0922" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;sn2 --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;extent:br4-&amp;gt;sn2:label&lt;/title&gt;
&lt;path d="M599,-340.5C496.1267,-340.5 469.5943,-344.9663 369,-366.5 339.744,-372.7627 332.1354,-386.1139 307.089,-388.9595" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="306.7984,-385.47 297,-389.5 307.1729,-392.4599 306.7984,-385.47" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;fs --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;extent:br6-&amp;gt;fs:label&lt;/title&gt;
&lt;path d="M599,-202.5C546.6951,-202.5 418.875,-236.743 369,-252.5 336.4361,-262.7879 329.5387,-281.3788 300.696,-284.9117" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="300.2817,-281.4297 290.5,-285.5 300.685,-288.418 300.2817,-281.4297" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;sn1leaf --&gt;
&lt;g class="edge" id="edge16"&gt;
&lt;title&gt;extent:br10-&amp;gt;sn1leaf:label&lt;/title&gt;
&lt;path d="M599,-64.5C568.2751,-64.5 562.532,-41.4968 537.2718,-36.4649" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="537.2835,-32.9507 527,-35.5 536.6288,-39.92 537.2835,-32.9507" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;extent:br7-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M599,-133.5C562.5069,-133.5 566.0966,-178.6709 537.119,-187.1404" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.4449,-183.6995 527,-188.5 537.377,-190.6371 536.4449,-183.6995" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;snleaf --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;extent:br8-&amp;gt;snleaf:label&lt;/title&gt;
&lt;path d="M599,-110.5C555.6919,-110.5 570.9782,-176.228 537.2833,-187.0115" fill="none" stroke="#000000" stroke-dasharray="5,2"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.3954,-183.6035 527,-188.5 537.3983,-190.5313 536.3954,-183.6035" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- extent&amp;#45;&amp;gt;fsleaf --&gt;
&lt;g class="edge" id="edge15"&gt;
&lt;title&gt;extent:br9-&amp;gt;fsleaf:label&lt;/title&gt;
&lt;path d="M599,-87.5C570.1662,-87.5 561.4234,-97.7215 537.1414,-100.0373" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="536.8301,-96.5478 527,-100.5 537.1492,-103.5405 536.8301,-96.5478" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;那麼 sn1 會 CoW 那個和 sn2 共享的葉子節點，有了新的屬於 sn1 的葉子，從而斷開了原本 file1
中對這個共享葉子節點的兩個普通反向引用，轉化成共享反向引用（圖中用虛線箭頭描述），
並且插入了一個新的普通反向引用指向新的 sn1 的葉子節點。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backref-walking"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id61"&gt;遍歷反向引用(backref walking)&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;有了反向引用記錄之後，可以給定一個邏輯地址，從 EXTENT_TREE 中找到地址的區塊記錄，
然後從區塊記錄中的反向引用記錄一步步往回遍歷，直到遇到 ROOT_TREE
，最終確定這個邏輯地址的區塊在整個文件系統中有多少路徑能訪問它。
這個遍歷反向引用的操作，在 btrfs 文檔和代碼中被稱作 backref walking 。&lt;/p&gt;
&lt;p&gt;比如還是上面的反向引用圖例中 sn1 和 sn2 完全共享葉子節點的那個例子，通過 backref walking
，我們能從 file1 所記錄的 3 個反向引用，推出全部 5 個可能的訪問路徑。&lt;/p&gt;
&lt;p&gt;backref walking 作爲很多功能的基礎設施，從 btrfs 相當早期（3.3內核）就有，很多 btrfs
的功能實際依賴 backref walking 的正確性。列舉一些需要 backref walking 來實現的功能：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;qgroup&lt;/p&gt;
&lt;p&gt;btrfs 的子卷沒有記錄子卷的磁盤佔用開銷，靠引用計數來刪除子卷，
所以也不需要詳細統計子卷的空間佔用情況。不過對一些用戶的使用場景，可能需要統計子卷空間佔用。由於
可能存在的共享元數據和數據，子卷佔用不能靠累計加減法的方式算出來，所以 btrfs 有了
qgroup 和 quota 功能，用來統計子卷或者別的管理粒度下的佔用空間情況。爲了實現 qgroup
，需要 backref walking 來計算區塊共享的情況。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;send&lt;/p&gt;
&lt;p&gt;btrfs send 在計算子卷間的差異時，也通過 backref walking 尋找能靠 reflink
共享的區塊，從而避免傳輸數據。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;balance/scrub&lt;/p&gt;
&lt;p&gt;balance 和 scrub 都會調整區塊的地址，通過 backref walking
能找到所有引用到這個地址的位置並正確修改地址。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;check&lt;/p&gt;
&lt;p&gt;當需要打印診斷信息的時候，除了提供出錯的數據所在具體地址之外，通過 backref walking
也能提供受影響的文件路徑之類的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
btrfs 的 reflink-aware defrag&lt;/div&gt;
&lt;div class="panel-body"&gt;
這裏想提一下 btrfs 一直計劃中，但是還沒有成功實現的 reflink-aware defrag
。文件碎片一直是 CoW 文件系統的大問題，對 btrfs 和對 ZFS 都是同樣。ZFS 完全不支持碎片整理，
而 btrfs 目前只提供了文件級別的碎片整理，這會切斷現有的 reflink 。計劃中的
reflink-aware defrag 也是基於 backref walking ，根據區塊引用的碎片程度，整理碎片而某種程度上保持
reflink 。btrfs 曾經實現了這個，但是因爲 bug 太多不久就取消了相關功能，目前這個工作處於停滯階段。&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;可見 backref walking 的能力對 btrfs 的許多功能都非常重要（不像 ZPL 的
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSPathLookupTrick"&gt;dnode 中記錄的 parent dnode 那樣只用於診斷信息&lt;/a&gt;
）。不過 backref walking
根據區塊共享的情況的不同，也可能導致挺大的運行期開銷，包括算法時間上的和內存佔用方面的開銷。
比如某個子卷中有 100 個文件通過 reflink 共享了同一個區塊，然後對這個子卷做了 100 個快照，
那麼對這一個共享區塊的 backref walking 結果可能解析出 10000 個路徑。可見隨着使用 reflink
和快照， backref walking 的開銷可能爆炸式增長。最近 btrfs 郵件列表也有一些用戶彙報，在大量子卷
和通過 reflink 做過 dedup 的 btrfs 文件系統上 send 快照時，可能導致內核分配大量內存甚至
panic 的情形，在 5.5 內核中 btrfs send 試圖控制 send 時 clone reference
的數量上限來緩解這種邊角問題。&lt;/p&gt;
&lt;p&gt;值得再強調的是，在沒有開啓 qgroup 的前提下，正常創建刪除快照或 reflink
，正常寫入和覆蓋區塊之類的文件系統操作，只需要引用計數就足夠，雖然可能需要調整反向引用記錄（
尤其是共享反向引用的地址），但是不需要動用 backref walking 這樣的重型武器。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zfs-vs-btrfs-dedup"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id62"&gt;4   ZFS vs btrfs 的 dedup 功能現狀&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面討論 ZFS 的快照和克隆如何跟蹤數據塊時，故意避開了 ZFS 的 dedup 功能，因爲要講 dedup
可能需要先理解引用計數在文件系統中的作用，而 btrfs 正好用了引用計數。
於是我們再回來 ZFS 這邊，看看 ZFS 的 dedup 是具體如何運作的。&lt;/p&gt;
&lt;p&gt;稍微瞭解過 btrfs 和 ZFS 兩者的人，或許有不少 btrfs 用戶都眼饞 ZFS 有 in-band dedup
的能力，可以在寫入數據塊的同時就去掉重複數據，而 btrfs 只能「退而求其次」地選擇第三方 dedup
方案，用外部工具掃描已經寫入的數據，將其中重複的部分改爲 reflink 。又或許有不少 btrfs
用戶以爲 zfs 的 dedup 就是在內存和磁盤中維護一個類似
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom filter&lt;/a&gt;
的結構，然後根據結果對數據塊增加 reflink ，從而 zfs 內部大概一定有類似 reflink
的設施，進一步質疑爲什麼 btrfs 還遲遲沒有實現這樣一個 Bloom filter 。
或許還有從 btrfs 轉移到 ZFS 的用戶有疑惑，
&lt;a class="reference external" href="https://github.com/zfsonlinux/zfs/issues/405"&gt;爲什麼 ZFS 還沒有暴露出 reflink 的用戶空間接口&lt;/a&gt;
，或者既然 ZFS 已經有了 dedup ，
&lt;a class="reference external" href="https://github.com/zfsonlinux/zfs/issues/2554"&gt;能不能臨時開關 dedup 來提供類似 reflink 式的共享數據塊&lt;/a&gt;
而避免 ZFS 長期開 dedup 導致的巨大性能開銷。&lt;/p&gt;
&lt;p&gt;看過上面 &lt;a class="reference internal" href="#id24"&gt;ZFS 中關於快照和克隆的空間跟蹤算法&lt;/a&gt; 之後我們會發現，其實 ZFS 中並沒有
能對應 btrfs reflink 的功能，而是根據數據塊指針中的 birth txg
來跟蹤快照和克隆的共享數據塊的。這引來更多疑惑：&lt;/p&gt;
&lt;div class="section" id="zfs-dedup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id63"&gt;4.1   ZFS 是如何實現 dedup 的？&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Dedup Performance by Matt Ahrens&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/PYxFDBgxFS8"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ZFS 是在 Sun/OpenSolaris 壽命相當晚期的 2009 年獲得的 dedup 功能，就在 Oracle 收購 Sun
，OpenSolaris 分裂出 Illumos 從而 ZFS 分裂出 Oracle ZFS 和 OpenZFS 的時間點之前。因此
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSDedupBadDocumentation"&gt;關於 ZFS dedup 如何實現的文檔相對匱乏&lt;/a&gt;
，大部分介紹 ZFS 的文檔或者教程會講到 ZFS dedup 的用法，但是對 dedup
的實現細節、性能影響、乃至使用場景之類的話題就很少提了（甚至很多教程講了一堆用法之後說類似，
「我評估之後覺得我不需要開 dedup ，你可以自己評估一下」這樣的建議）。&lt;/p&gt;
&lt;p&gt;OpenZFS Summit 2017 上 Matt 有個演講，主要內容關於今後如何改進 dedup
性能的計劃，其中講到的計劃還沒有被具體實現，不過可以窺探一下 dedup 現在在 ZFS 中是如何工作的。
Chris 的博客也有兩篇文章《
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSDedupStorage"&gt;What I can see about how ZFS deduplication seems to work on disk&lt;/a&gt;
》和《
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSDedupStorageII"&gt;An important addition to how ZFS deduplication works on the disk&lt;/a&gt;
》介紹了他對此的認識，在這裏我也嘗試來總結一下 ZFS dedup 特性如何工作。&lt;/p&gt;
&lt;p&gt;ZFS dedup 是存儲池級別（pool-wide）開關的特性，所以大概在 MOS 之類的地方有存儲一個特殊的數據結構，
叫 DeDup Table 簡稱 DDT 。DDT 目前是存儲設備上的一個 hash table ，因爲是存儲池級別的元數據，
所以在 ZFS 中存儲了三份完全一樣的 DDT ，DDT 的內容是大概如下結構：&lt;/p&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="24%"/&gt;
&lt;col width="54%"/&gt;
&lt;col width="22%"/&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Checksum&lt;/th&gt;
&lt;th class="head"&gt;DVA(Data Virtual Address)&lt;/th&gt;
&lt;th class="head"&gt;Refcount&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;0x12345678&lt;/td&gt;
&lt;td&gt;vdev=1 addr=0x45671234&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x5678efab&lt;/td&gt;
&lt;td&gt;vdev=2 addr=0x37165adb&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0x98765432&lt;/td&gt;
&lt;td&gt;vdev=1 addr=0xac71be12&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;0xabcd1234&lt;/td&gt;
&lt;td&gt;vdev=0 addr=0xc1a2231d&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;... ...&lt;/td&gt;
&lt;td&gt;... ...&lt;/td&gt;
&lt;td&gt;... ...&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;DDT 中對每個數據塊存有3個東西：數據塊的 checksum 、DVA （就是
&lt;a class="reference internal" href="#id18"&gt;ZFS 的塊指針&lt;/a&gt; 中的 DVA）和引用計數。在存儲池開啓 dedup
特性之後，每次新寫入一個數據塊，都會先計算出數據塊的 checksum ，然後查找 DDT
，存在的話增加 DDT 條目的引用計數，不存在的話插入 DDT 條目。每次釋放一個數據塊，同樣需要查找
DDT 調整引用計數。&lt;/p&gt;
&lt;p&gt;除了 DDT 之外，文件系統中記錄的塊指針中也有個特殊標誌位記錄這個塊是否經過了 DDT
。讀取數據不需要經過 DDT ，但是子卷、克隆或者文件系統正常刪除數據塊的時候，
需要根據塊指針中的標誌位判斷是否需要檢查和調整 DDT 。&lt;/p&gt;
&lt;p&gt;從而關於 dedup 的實現可以得知以下一些特點：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;開啓 dedup 之後，每個寫入操作放大成 3+1 個隨機位置的寫入操作，每個刪除操作變成 1 個寫入操作。沒有
dedup 時刪除塊並不需要立刻寫入，只需要記錄在內存中並在 MOS 提交的時候調整磁盤佔用情況即可。&lt;/li&gt;
&lt;li&gt;只有開啓 dedup 期間寫入的數據塊纔會參與 dedup 。對已經有數據的存儲池，後來開啓的 dedup
不會影響已經寫好的數據，從而即使後來新的寫入與之前的寫入有重複也得不到 dedup 效果。
DDT 中沒有記錄的數據塊不會參與 dedup 。換句話說 DDT 中那些引用計數爲 1
的記錄也是必須存在的，否則這些數據塊沒有機會參與 dedup 。&lt;/li&gt;
&lt;li&gt;關閉 dedup 之後，只要 DDT 中還存有數據，那麼對這些數據的刪除操作仍然有性能影響。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;從直覺上可以這樣理解：在 ZFS 中每個數據塊都有其「歸屬」，沒有 dedup
的時候，數據塊歸屬於某個數據集（文件系統、快照、克隆），
該數據集需要負責釋放該數據塊或者把從屬信息轉移到別的數據集（快照）上。
而在開啓 dedup 期間，產生的寫入的數據塊實際歸屬於 DDT
而不是任何一個數據集，數據集需要查詢和調整 DDT 中記錄的引用計數來決定是否能釋放數據塊。&lt;/p&gt;
&lt;p&gt;乍看起來 DDT 貌似挺像 btrfs 的 EXTENT_TREE ，但是本質上 EXTENT_TREE 是根據區塊地址排序的，
而 DDT 因爲是個 hashtable 所以是根據 checksum 排序的。並且 EXTENT_TREE
中記錄的區塊可以是任意大小，而 DDT 中記錄的數據塊是固定大小的，所以碎片不嚴重的情況下 DDT 要比
EXTENT_TREE 多記錄很多數據塊。這些區別都非常影響操作 DDT 時的性能。&lt;/p&gt;
&lt;p&gt;DDT 本身是個 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#dmu"&gt;DMU&lt;/a&gt; 對象，所以對 DDT 的讀寫也是經過 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#dmu"&gt;DMU&lt;/a&gt; 的 CoW 讀寫，從而也經過 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#arc"&gt;ARC&lt;/a&gt;
的緩存。想要有比較合理的 dedup 性能，需要整個 DDT 都儘量保持在內存 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#arc"&gt;ARC&lt;/a&gt; 或者 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#l2arc"&gt;L2ARC&lt;/a&gt; 緩存中，
於是 dedup 特性也有了非常佔用內存的特點。每個 DDT 表項需要大概 192 字節來描述一個（
默認 128KiB 大小的）數據塊，由此可以估算一下平均每 2TiB 的數據需要 3GiB 的內存來支持 dedup 的功能。&lt;/p&gt;
&lt;p&gt;Matt 的視頻中後面講到優化 ZFS dedup 的一些思路，大體上未來 ZFS 可以做這些優化：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;DDT 在內存中仍然是 hashtable ，在存儲介質上則換成類似 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#zil"&gt;ZIL&lt;/a&gt; 的日誌結構，讓 DDT
儘量保持在內存中，並且繞過 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#dmu"&gt;DMU&lt;/a&gt; 減少寫入放大。&lt;/li&gt;
&lt;li&gt;給 DDT 表項瘦身，從192字節縮減到接近64字節。&lt;/li&gt;
&lt;li&gt;當遇到內存壓力時，從 DDT 中隨機剔除掉引用計數爲 1 的表項。被剔除的表項沒有了未來參與 dedup
的可能性，但是能減輕內存壓力。剔除引用計數爲 1 的表項仍然可以維持數據塊的歸屬信息（
處理上當作是沒有 dedup 的形式），但是引用計數更高的表項沒法剔除。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這些優化策略目的是想讓 dedup 的性能損失能讓更多使用場景接受。不過因爲缺乏開發者意願，
目前這些策略還只是計劃，沒有實現在 ZFS 的代碼中。&lt;/p&gt;
&lt;p&gt;因爲以上特點， ZFS 目前 dedup 特性的適用場景極爲有限，只有在 IO 帶寬、內存大小都非常充裕，
並且可以預見到很多重複的數據的時候適合。聽說過的 ZFS dedup
的成功案例是，比如提供虛擬機服務的服務商，在宿主文件系統上用 ZFS 的 zvol
寄宿虛擬機的磁盤鏡像，客戶在虛擬機內使用其它文件系統。大部分客戶可能用類似版本的操作系統，
從而宿主機整體來看有很多 dedup 的潛質。不過這種應用場景下，服務商很可能偏向選擇 CephFS
這樣的分佈式文件系統提供虛擬機鏡像存儲，而不是 ZFS 這樣侷限在單系統上的本地文件系統。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="btrfs-dedup"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id64"&gt;4.2   btrfs 的 dedup&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;btrfs 目前沒有內建的 dedup 支持，但是因爲有 reflink 所以可以通過第三方工具在事後掃描文件塊來實現
dedup 。這一點乍看像是某種將就之策，實際上瞭解了 ZFS dedup 的實現之後可以看出這個狀況其實更靈活。&lt;/p&gt;
&lt;p&gt;在 btrfs 中實現 in-band dedup 本身不算很複雜，增加一個內存中的 bloom filter 然後按情況插入
reflink 的正常思路就夠了。在
&lt;a class="reference external" href="https://btrfs.wiki.kernel.org/index.php/User_notes_on_dedupe"&gt;btrfs kernel wiki 中有篇筆記&lt;/a&gt;
提到已經有了實驗性的 in-band dedup 內核支持的實現。這個實現已經越來越成熟，雖然還有諸多使用限制，
不過實現正確性上問題不大，遲遲沒有辦法合併進主線內核的原因更多是性能上的問題。&lt;/p&gt;
&lt;p&gt;如果 btrfs 有了 in-band dedup 這樣系統性的 dedup 方案，那麼不可避免地會增加文件系統中使用
reflink 的數量。這將會暴露出 backref walking 這樣的基礎設施中許多潛在的邊角情況下的性能瓶頸。
前面解釋過 backref walking 操作是個挺大開銷的操作，並且開銷隨着快照和 reflink
的使用而爆炸式增長。直到最近的 btrfs 更新仍然在試圖優化和改善現有 backref walking
的性能問題，可以預測 btrfs 的內建 dedup 支持將需要等待這方面更加成熟。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id33"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id65"&gt;5   結論和展望&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;不知不覺圍繞 btrfs 和 zfs 的快照功能寫了一大篇，前前後後寫了一個半月，
文中提及的很多細節我自己也沒有自信，如果有錯誤還請指出。&lt;/p&gt;
&lt;p&gt;稍微列舉一些我覺得比較重要的結論，算是 TL;DR 的 takeaway notes 吧：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ZFS 的快照非常輕量。完全可以像 NILFS2 的連續快照那樣，每小時一個快照，每天24小時，每年
365天不間斷地創建快照，實際似乎也有公司是這樣用的。如此頻繁的快照不同於 NILFS2
等文件系統提供的連續快照，但是也沒有那些日誌結構文件系統實現連續快照所需承擔的巨大 GC 開銷。
並且 ZFS 可以沒有額外開銷地算出快照等數據集的空間佔用之類的信息。&lt;/li&gt;
&lt;li&gt;btrfs 的快照相對也很輕量，比 LVM 和 dm-thin 的快照輕便很多，但是不如 ZFS 的快照輕，因爲
btrfs 有維護反向引用的開銷。 btrfs 要得知子卷的空間佔用情況需要開啓 qgroup
特性，這會對一些需要 backref walking 的操作有一些額外性能損失。&lt;/li&gt;
&lt;li&gt;btrfs 對快照和 reflink 沒有限制，日常桌面系統下使用也不太會遇到性能問題。
不過系統性地（自動化地）大量使用快照和 reflink ，在一些操作下可能會有性能問題，值得注意。&lt;/li&gt;
&lt;li&gt;因爲沒有 reflink ， ZFS 的數據集劃分需要一些前期計劃。 ZFS 中共享元數據的方式只有快照，
所以要儘量多細分文件系統，方便以後能利用到快照特性，劃分的粒度大致按照可能要回滾快照的粒度來。
btrfs 有 reflink ，於是這裏有很多自由度，即便前期計劃不夠詳細也可以通過 reflink
相對快速調整子卷結構。&lt;/li&gt;
&lt;li&gt;dedup 在 zfs 和 btrfs 都是個喜憂參半的特性，開啓前要仔細評估可能的性能損失。ZFS dedup
的成功案例是，比如虛擬機服務的服務商，在宿主文件系統上用 ZFS
寄宿虛擬機的磁盤鏡像，客戶在虛擬機可能用類似版本的操作系統，從而宿主機整體來看有很多 dedup
的潛質。一般桌面場景下 dedup 的收益不明顯，反而有巨大內存和IO帶寬開銷。&lt;/li&gt;
&lt;li&gt;相比 btrfs ，ZFS 更嚴格地遵守 CoW 文件系統「僅寫一次」的特點，甚至就算遇到了數據塊損壞，
修復數據塊的時候也只能在原位寫入。 btrfs 因爲有反向引用所以在這方面靈活很多。&lt;/li&gt;
&lt;li&gt;ZFS 不支持對單個文件關閉 CoW ，所有文件（以及所有 zvol）都經過 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#dmu"&gt;DMU&lt;/a&gt; 層有 CoW
語義，這對一些應用場景有性能影響。btrfs 可以對單個文件關閉 CoW ，但是關閉 CoW
同時也丟失了寫文件的事務性語義。&lt;/li&gt;
&lt;li&gt;ZFS 不支持碎片整理，靠 ARC 加大緩存來解決碎片帶來的性能問題。 btrfs 有 defrag
，但是目前的實現會切斷 reflink 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後關於 ZFS 沒有 reflink 也沒有反向引用的情況，想引用幾段話。&lt;/p&gt;
&lt;p&gt;FreeBSD 的發起人之一，FreeBSD 的 FFS 維護者，
&lt;a class="reference external" href="https://youtu.be/IQp_FglfzUQ?t=2619"&gt;Kirk McKusick 曾經在 OpenZFS developer summit 2015&lt;/a&gt;
這麼說過：&lt;/p&gt;
&lt;blockquote&gt;
I decided I'd add a wish list since I have a whole bunch of people here
that could actually possibly consider doing this. Both competitors of ZFS,
which are basically WAFL and BTRFS, kind of maintained back pointers.
And back pointers allow a lot of things like disk migration,
you can go through and tune up file layout, if you're working with
direct-mapped flash it allows you to do that effectively.
This has been a long -- and I understand big debate with the ZFS people and
I'm not going to try and talk about that -- but there's a very nice paper
that I've cited here, "Tracking Back References in a Write Anywhere File System",
that is it integrates keeping track of the back pointers in a way that would
work very well with ZFS. And so the cost is low, the cost of actually using
it is a little higher, but it's not unreasonable. So there's the reference
to that paper and if any of you are contemplating that you should read the
paper because if nothing else it's a great paper.&lt;/blockquote&gt;
&lt;p&gt;Kirk McKusick 呼籲 ZFS 開發者們考慮在 ZFS 中實現類似 backref
的基礎設施，從而可能在未來獲得更多有用的特性。&lt;/p&gt;
&lt;p&gt;和 ZFS 實現 backref 相關的一點是目前 ZFS 的塊指針的組織結構。對此
ZFS 的 &lt;a class="reference external" href="//farseerfc.me/zfs-layered-architecture-design.html#zpl"&gt;ZPL&lt;/a&gt; 層原作者之一的
&lt;a class="reference external" href="https://youtu.be/xMH5rCL8S2k?t=1037"&gt;Mark Shellenbaum 在 OpenZFS developer summit 2016&lt;/a&gt;
也曾說過這樣的話：&lt;/p&gt;
&lt;blockquote&gt;
(Q: Are there any things that we that we have regretted we did?)
A: I guess not so much on the ZPL, but with the way block pointers maybe weren't
fully virtualized, you know that things like that.&lt;/blockquote&gt;
&lt;p&gt;以及 ZFS 的最初的作者 &lt;a class="reference external" href="https://youtu.be/yNKZQBsTX08?t=2"&gt;Jeff 在 OpenZFS developer summit 2015&lt;/a&gt;
也曾說過：&lt;/p&gt;
&lt;blockquote&gt;
... and then certainly one thing i'd always wish we had done but there really
were always implementation difficulties was true virtual block addressing.
Because it would made dedup simpler, or would have made you know
compression of data, defragging, all that kind of stuff simpler.
That would have been really nice to have. But we never did the way that was
sort of tracable in terms of both the cost and the transactional semantics.&lt;/blockquote&gt;
&lt;p&gt;ZFS 這些開發者元老們都希望 ZFS 能有某種類似 backref 的機制，或者讓塊指針記錄的地址更抽象的機制。&lt;/p&gt;
&lt;p&gt;關於這一點，ZFS 最重要的作者 Matt 如何看的呢？ Matt 近期似乎沒有發表過看法，但是熟悉 ZFS
的人可能聽到過 Matt 一直在計劃的另一項 ZFS 特性中看出些端倪，叫 BP rewrite
，或者 BP virtualization 。從 Matt 還在 Sun 的時候開始，就試圖在 ZFS 中實現
BP rewrite 特性，提供某種系統性的基礎設施，能夠快速地找到並改寫大量數據塊指針。
在網上搜索很多 ZFS 功能的實現細節，最終都會帶到關於 BP rewrite 的討論（甚至可以說論戰）中。
Matt 最近給 OpenZFS 實現的兩項功能，
&lt;a class="reference external" href="https://www.youtube.com/watch?v=Njt82e_3qVo"&gt;toplevel vdev removal 和 raidz expansion&lt;/a&gt;
如果有 BP rewrite 將會容易很多，而他們目前是在沒有 BP rewrite 的前提下，通過一連串額外抽象實現的。&lt;/p&gt;
&lt;p&gt;從 BP rewrite 這個兔子洞中，還能引出更多 btrfs 和 ZFS 關於設備管理的差異，這個有待今後再談。&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="tech"></category><category term="FS筆記"></category><category term="FS notes"></category><category term="btrfs"></category><category term="zfs"></category><category term="cow"></category><category term="snapshot"></category><category term="clone"></category><category term="subvolume"></category><category term="dedup"></category><category term="reflink"></category><category term="SPA"></category><category term="DMU"></category><category term="DSL"></category><category term="ZPL"></category></entry><entry><title>ZFS 分層架構設計</title><link href="//farseerfc.me/zfs-layered-architecture-design.html" rel="alternate"></link><published>2020-02-04T16:59:00+09:00</published><updated>2020-02-04T16:59:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2020-02-04:/zfs-layered-architecture-design.html</id><summary type="html">
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2020年2月9日更新過&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;ZFS 在設計之初源自於 Sun 內部多次重寫 UFS 的嘗試，背負了重構 Solaris
諸多內核子系統的重任，從而不同於 Linux 的文件系統只負責文件系統的功能而把其餘功能（比如內存髒頁管理，
IO調度）交給內核更底層的子系統， ZFS 的整體設計更層次化並更獨立，很多部分可能和 Linux/FreeBSD
內核已有的子系統有功能重疊。&lt;/p&gt;
&lt;p&gt;似乎很多關於 ZFS 的視頻演講和幻燈片有講到子系統架構，但是找了半天也沒找到網上關於這個的說明文檔。
於是寫下這篇筆記試圖從 ZFS 的早期開發歷程開始，記錄一下 ZFS 分層架構中各個子系統之間的分工。
也有幾段 OpenZFS Summit 視頻佐以記錄那段歷史。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;早期架構&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;早期 ZFS 在開發時大體可以分爲上下三層，分別是 ZPL， DMU 和 SPA ，這三層分別由三組人負責。&lt;/p&gt;
&lt;p&gt;最初在 Sun 內部帶領 ZFS …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2020年2月9日更新過&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;ZFS 在設計之初源自於 Sun 內部多次重寫 UFS 的嘗試，背負了重構 Solaris
諸多內核子系統的重任，從而不同於 Linux 的文件系統只負責文件系統的功能而把其餘功能（比如內存髒頁管理，
IO調度）交給內核更底層的子系統， ZFS 的整體設計更層次化並更獨立，很多部分可能和 Linux/FreeBSD
內核已有的子系統有功能重疊。&lt;/p&gt;
&lt;p&gt;似乎很多關於 ZFS 的視頻演講和幻燈片有講到子系統架構，但是找了半天也沒找到網上關於這個的說明文檔。
於是寫下這篇筆記試圖從 ZFS 的早期開發歷程開始，記錄一下 ZFS 分層架構中各個子系統之間的分工。
也有幾段 OpenZFS Summit 視頻佐以記錄那段歷史。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;早期架構&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;早期 ZFS 在開發時大體可以分爲上下三層，分別是 ZPL， DMU 和 SPA ，這三層分別由三組人負責。&lt;/p&gt;
&lt;p&gt;最初在 Sun 內部帶領 ZFS 開發的是 &lt;a class="reference external" href="https://blogs.oracle.com/bonwick/"&gt;Jeff Bonwick&lt;/a&gt;
，他首先有了對 ZFS 整體架構的構思，然後遊說 Sun 高層，親自組建起了 ZFS
開發團隊，招募了當時剛從大學畢業的 &lt;a class="reference external" href="http://open-zfs.org/wiki/User:Mahrens"&gt;Matt Ahrens&lt;/a&gt;
。作爲和 Sun 高層談妥的條件， Jeff 也必須負責 Solaris 整體的 Storage &amp;amp; Filesystem Team
，於是他又從 Solaris 的 Storage Team 抽調了 UFS 部分的負責人 Mark Shellenbaum 和
Mark Maybee 來開發 ZFS 。而如今昔日昇陽已然日落， Jeff
成立了獨立公司繼續開拓服務器存儲領域， Matt 是 OpenZFS 項目的負責人，兩位 Mark 則留在了
Sun/Oracle 成爲了 Oracle ZFS 分支的維護者。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
The Birth of ZFS by Jeff Bonwick&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/dcV2PaMTAJ4"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Story Time (Q&amp;amp;A) with Matt and Jeff&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/yNKZQBsTX08"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
ZFS First Mount by Mark Shellenbaum&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/xMH5rCL8S2k"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
ZFS past &amp;amp; future by Mark Maybee&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/c1ek1tFjhH8"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;在開發早期，作爲分工， Jeff 負責 ZFS 設計中最底層的 SPA ，提供多個存儲設備組成的存儲池抽象；
Matt 負責 ZFS 設計中最至關重要的 DMU 引擎，在塊設備基礎上提供具有事務語義的對象存儲；
而兩位 Mark 負責 ZFS 設計中直接面向用戶的 ZPL ，在 DMU 基礎上提供完整 POSIX 文件系統語義。
ZFS 設計中這最初的分工也體現在了 ZFS 現在子系統分層的架構上，繼續影響（增強或者限制） ZFS
今後發展的方向。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;子系統整體架構&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先 ZFS 整體架構如下圖，其中圓圈是 ZFS 給內核層的外部接口，方框是 ZFS 內部子系統（
我給方框的子系統加上了超鏈接）：&lt;/p&gt;
&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;

&lt;!-- Generated by graphviz version 2.40.1 (20161225.0304)
 --&gt;
&lt;!-- Title: ZFS_Layer_Architecture Pages: 1 --&gt;
&lt;svg class="svg-responsive" height="626pt" viewbox="0.00 0.00 806.50 626.00" width="807pt" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
&lt;g class="graph" id="graph0" transform="scale(1 1) rotate(0) translate(4 622)"&gt;
&lt;title&gt;ZFS_Layer_Architecture&lt;/title&gt;
&lt;polygon fill="#ffffff" points="-4,4 -4,-622 802.5,-622 802.5,4 -4,4" stroke="transparent"&gt;&lt;/polygon&gt;
&lt;g class="cluster" id="clust4"&gt;
&lt;title&gt;clusterTOL&lt;/title&gt;
&lt;g id="a_clust4"&gt;&lt;a xlink:href="#tol" xlink:title="TOL"&gt;
&lt;polygon fill="none" points="493.5,-355 493.5,-574 583.5,-574 583.5,-355 493.5,-355" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="538.5" y="-558.8"&gt;TOL&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;g class="cluster" id="clust9"&gt;
&lt;title&gt;clusterSPA&lt;/title&gt;
&lt;g id="a_clust9"&gt;&lt;a xlink:href="#spa" xlink:title="SPA"&gt;
&lt;polygon fill="none" points="415.5,-64 415.5,-283 649.5,-283 649.5,-64 415.5,-64" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="532.5" y="-267.8"&gt;SPA&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- Filesystem API --&gt;
&lt;g class="node" id="node1"&gt;
&lt;title&gt;Filesystem API&lt;/title&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="62.5" y="-596.3"&gt;Filesystem API&lt;/text&gt;
&lt;/g&gt;
&lt;!-- VFS --&gt;
&lt;g class="node" id="node5"&gt;
&lt;title&gt;VFS&lt;/title&gt;
&lt;ellipse cx="62.5" cy="-525" fill="none" rx="30.5947" ry="18" stroke="#000000"&gt;&lt;/ellipse&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="62.5" y="-521.3"&gt;VFS&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Filesystem API&amp;#45;&amp;gt;VFS --&gt;
&lt;g class="edge" id="edge1"&gt;
&lt;title&gt;Filesystem API-&amp;gt;VFS&lt;/title&gt;
&lt;path d="M62.5,-581.8446C62.5,-573.3401 62.5,-563.0076 62.5,-553.4964" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="66.0001,-553.2481 62.5,-543.2482 59.0001,-553.2482 66.0001,-553.2481" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- Block device API --&gt;
&lt;g class="node" id="node2"&gt;
&lt;title&gt;Block device API&lt;/title&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="437.5" y="-596.3"&gt;Block device API&lt;/text&gt;
&lt;/g&gt;
&lt;!-- /dev/zvol/... --&gt;
&lt;g class="node" id="node6"&gt;
&lt;title&gt;/dev/zvol/...&lt;/title&gt;
&lt;ellipse cx="421.5" cy="-525" fill="none" rx="63.8893" ry="18" stroke="#000000"&gt;&lt;/ellipse&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="421.5" y="-521.3"&gt;/dev/zvol/...&lt;/text&gt;
&lt;/g&gt;
&lt;!-- Block device API&amp;#45;&amp;gt;/dev/zvol/... --&gt;
&lt;g class="edge" id="edge2"&gt;
&lt;title&gt;Block device API-&amp;gt;/dev/zvol/...&lt;/title&gt;
&lt;path d="M433.6268,-581.8446C431.7795,-573.1849 429.5277,-562.6301 427.4684,-552.9768" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="430.8469,-552.0379 425.3375,-542.9882 424.001,-553.4984 430.8469,-552.0379" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZFS Management API (libzfs) --&gt;
&lt;g class="node" id="node3"&gt;
&lt;title&gt;ZFS Management API (libzfs)&lt;/title&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="684.5" y="-596.3"&gt;ZFS Management API (libzfs)&lt;/text&gt;
&lt;/g&gt;
&lt;!-- /dev/zfs ioctl --&gt;
&lt;g class="node" id="node7"&gt;
&lt;title&gt;/dev/zfs ioctl&lt;/title&gt;
&lt;ellipse cx="684.5" cy="-525" fill="none" rx="69.5877" ry="18" stroke="#000000"&gt;&lt;/ellipse&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="684.5" y="-521.3"&gt;/dev/zfs ioctl&lt;/text&gt;
&lt;/g&gt;
&lt;!-- ZFS Management API (libzfs)&amp;#45;&amp;gt;/dev/zfs ioctl --&gt;
&lt;g class="edge" id="edge3"&gt;
&lt;title&gt;ZFS Management API (libzfs)-&amp;gt;/dev/zfs ioctl&lt;/title&gt;
&lt;path d="M684.5,-581.8446C684.5,-573.3401 684.5,-563.0076 684.5,-553.4964" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="688.0001,-553.2481 684.5,-543.2482 681.0001,-553.2482 688.0001,-553.2481" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- NFS/Samba API (libshare) --&gt;
&lt;g class="node" id="node4"&gt;
&lt;title&gt;NFS/Samba API (libshare)&lt;/title&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="246.5" y="-596.3"&gt;NFS/Samba API (libshare)&lt;/text&gt;
&lt;/g&gt;
&lt;!-- NFS/CIFS vop_rwlock --&gt;
&lt;g class="node" id="node8"&gt;
&lt;title&gt;NFS/CIFS vop_rwlock&lt;/title&gt;
&lt;ellipse cx="225.5" cy="-525" fill="none" rx="114.2798" ry="18" stroke="#000000"&gt;&lt;/ellipse&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="225.5" y="-521.3"&gt;NFS/CIFS vop_rwlock&lt;/text&gt;
&lt;/g&gt;
&lt;!-- NFS/Samba API (libshare)&amp;#45;&amp;gt;NFS/CIFS vop_rwlock --&gt;
&lt;g class="edge" id="edge4"&gt;
&lt;title&gt;NFS/Samba API (libshare)-&amp;gt;NFS/CIFS vop_rwlock&lt;/title&gt;
&lt;path d="M241.4165,-581.8446C238.966,-573.0928 235.9735,-562.4053 233.2473,-552.669" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="236.6034,-551.6741 230.5367,-542.9882 229.8627,-553.5616 236.6034,-551.6741" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- VFS&amp;#45;&amp;gt;NFS/CIFS vop_rwlock --&gt;
&lt;g class="edge" id="edge5"&gt;
&lt;title&gt;VFS-&amp;gt;NFS/CIFS vop_rwlock&lt;/title&gt;
&lt;path d="M93.0625,-525C95.6653,-525 98.2682,-525 100.871,-525" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="100.9106,-528.5001 110.9105,-525 100.9105,-521.5001 100.9106,-528.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZPL --&gt;
&lt;g class="node" id="node9"&gt;
&lt;title&gt;ZPL&lt;/title&gt;
&lt;g id="a_node9"&gt;&lt;a xlink:href="#zpl" xlink:title="ZPL"&gt;
&lt;polygon fill="none" points="367.5,-471 313.5,-471 313.5,-435 367.5,-435 367.5,-471" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="340.5" y="-449.3"&gt;ZPL&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- VFS&amp;#45;&amp;gt;ZPL --&gt;
&lt;g class="edge" id="edge6"&gt;
&lt;title&gt;VFS-&amp;gt;ZPL&lt;/title&gt;
&lt;path d="M86.3025,-513.3546C91.5594,-511.0472 97.1562,-508.7886 102.5,-507 171.7912,-483.808 255.7337,-467.3568 303.1418,-459.0894" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="303.9854,-462.4959 313.2493,-457.3547 302.8013,-455.5968 303.9854,-462.4959" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZVOL --&gt;
&lt;g class="node" id="node10"&gt;
&lt;title&gt;ZVOL&lt;/title&gt;
&lt;g id="a_node10"&gt;&lt;a xlink:href="#zvol" xlink:title="ZVOL"&gt;
&lt;polygon fill="none" points="483,-471 424,-471 424,-435 483,-435 483,-471" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="453.5" y="-449.3"&gt;ZVOL&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- /dev/zvol/...&amp;#45;&amp;gt;ZVOL --&gt;
&lt;g class="edge" id="edge7"&gt;
&lt;title&gt;/dev/zvol/...-&amp;gt;ZVOL&lt;/title&gt;
&lt;path d="M429.575,-506.8314C433.1102,-498.8771 437.336,-489.369 441.2456,-480.5723" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="444.4532,-481.9729 445.3163,-471.4133 438.0565,-479.1299 444.4532,-481.9729" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- DSL --&gt;
&lt;g class="node" id="node11"&gt;
&lt;title&gt;DSL&lt;/title&gt;
&lt;g id="a_node11"&gt;&lt;a xlink:href="#dsl" xlink:title="DSL"&gt;
&lt;polygon fill="none" points="557.5,-543 503.5,-543 503.5,-507 557.5,-507 557.5,-543" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="530.5" y="-521.3"&gt;DSL&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- /dev/zfs ioctl&amp;#45;&amp;gt;DSL --&gt;
&lt;g class="edge" id="edge10"&gt;
&lt;title&gt;/dev/zfs ioctl-&amp;gt;DSL&lt;/title&gt;
&lt;path d="M614.5895,-525C598.9983,-525 583.4071,-525 567.8159,-525" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="567.5703,-521.5001 557.5703,-525 567.5703,-528.5001 567.5703,-521.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- VDEV --&gt;
&lt;g class="node" id="node20"&gt;
&lt;title&gt;VDEV&lt;/title&gt;
&lt;g id="a_node20"&gt;&lt;a xlink:href="#vdev" xlink:title="VDEV"&gt;
&lt;polygon fill="none" points="546,-108 487,-108 487,-72 546,-72 546,-108" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="516.5" y="-86.3"&gt;VDEV&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- /dev/zfs ioctl&amp;#45;&amp;gt;VDEV --&gt;
&lt;g class="edge" id="edge29"&gt;
&lt;title&gt;/dev/zfs ioctl-&amp;gt;VDEV&lt;/title&gt;
&lt;path d="M689.2656,-506.9623C696.0025,-479.8344 707.5,-426.8236 707.5,-381 707.5,-381 707.5,-381 707.5,-234 707.5,-186.6526 686.8759,-174.3079 650.5,-144 623.0063,-121.0926 584.5356,-106.9458 555.8638,-98.9099" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="556.7296,-95.5186 546.165,-96.3181 554.9223,-102.2812 556.7296,-95.5186" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- DMU --&gt;
&lt;g class="node" id="node13"&gt;
&lt;title&gt;DMU&lt;/title&gt;
&lt;g id="a_node13"&gt;&lt;a xlink:href="#dmu" xlink:title="DMU"&gt;
&lt;polygon fill="none" points="555.5,-399 501.5,-399 501.5,-363 555.5,-363 555.5,-399" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="528.5" y="-377.3"&gt;DMU&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- NFS/CIFS vop_rwlock&amp;#45;&amp;gt;DMU --&gt;
&lt;g class="edge" id="edge15"&gt;
&lt;title&gt;NFS/CIFS vop_rwlock-&amp;gt;DMU&lt;/title&gt;
&lt;path d="M285.6968,-509.563C314.41,-500.7092 348.5163,-487.9433 376.5,-471 396.6786,-458.7825 395.9728,-448.2337 415.5,-435 439.4387,-418.7766 469.0038,-404.835 491.8877,-395.1832" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="493.3442,-398.3685 501.2501,-391.3152 490.6713,-391.8989 493.3442,-398.3685" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZAP --&gt;
&lt;g class="node" id="node12"&gt;
&lt;title&gt;ZAP&lt;/title&gt;
&lt;g id="a_node12"&gt;&lt;a xlink:href="#zap" xlink:title="ZAP"&gt;
&lt;polygon fill="none" points="555.5,-471 501.5,-471 501.5,-435 555.5,-435 555.5,-471" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="528.5" y="-449.3"&gt;ZAP&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- ZPL&amp;#45;&amp;gt;ZAP --&gt;
&lt;g class="edge" id="edge8"&gt;
&lt;title&gt;ZPL-&amp;gt;ZAP&lt;/title&gt;
&lt;path d="M367.5472,-469.1304C396.6265,-484.3281 444.0019,-502.8552 483.5,-489 490.6397,-486.4955 497.4881,-482.3291 503.5943,-477.7013" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="505.9521,-480.293 511.4185,-471.2173 501.4855,-474.9032 505.9521,-480.293" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZPL&amp;#45;&amp;gt;DMU --&gt;
&lt;g class="edge" id="edge12"&gt;
&lt;title&gt;ZPL-&amp;gt;DMU&lt;/title&gt;
&lt;path d="M367.7478,-440.7581C372.3191,-438.7848 377.0292,-436.8006 381.5,-435 418.7731,-419.9886 462.0037,-404.312 491.8902,-393.7414" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="493.2174,-396.9848 501.4861,-390.3607 490.8913,-390.3825 493.2174,-396.9848" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZIL --&gt;
&lt;g class="node" id="node15"&gt;
&lt;title&gt;ZIL&lt;/title&gt;
&lt;g id="a_node15"&gt;&lt;a xlink:href="#zil" xlink:title="ZIL"&gt;
&lt;polygon fill="none" points="480.5,-327 426.5,-327 426.5,-291 480.5,-291 480.5,-327" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="453.5" y="-305.3"&gt;ZIL&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- ZPL&amp;#45;&amp;gt;ZIL --&gt;
&lt;g class="edge" id="edge16"&gt;
&lt;title&gt;ZPL-&amp;gt;ZIL&lt;/title&gt;
&lt;path d="M354.8115,-434.7623C374.5947,-409.5518 410.4107,-363.9103 433.0226,-335.0952" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="435.8847,-337.1173 439.3047,-327.0896 430.3778,-332.7959 435.8847,-337.1173" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZVOL&amp;#45;&amp;gt;DMU --&gt;
&lt;g class="edge" id="edge13"&gt;
&lt;title&gt;ZVOL-&amp;gt;DMU&lt;/title&gt;
&lt;path d="M472.4257,-434.8314C481.4857,-426.1337 492.4809,-415.5783 502.3265,-406.1265" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="504.7904,-408.613 509.5804,-399.1628 499.9426,-403.5633 504.7904,-408.613" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- DSL&amp;#45;&amp;gt;ZAP --&gt;
&lt;g class="edge" id="edge9"&gt;
&lt;title&gt;DSL-&amp;gt;ZAP&lt;/title&gt;
&lt;path d="M529.9953,-506.8314C529.7814,-499.131 529.5271,-489.9743 529.2894,-481.4166" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="532.7879,-481.3122 529.0115,-471.4133 525.7906,-481.5066 532.7879,-481.3122" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- DSL&amp;#45;&amp;gt;DMU --&gt;
&lt;g class="edge" id="edge14"&gt;
&lt;title&gt;DSL-&amp;gt;DMU&lt;/title&gt;
&lt;path d="M545.614,-506.7768C552.8549,-496.8586 560.7524,-483.9858 564.5,-471 568.9365,-455.6274 569.1365,-450.3135 564.5,-435 561.5436,-425.2355 556.1748,-415.6229 550.47,-407.2762" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="553.2129,-405.0973 544.4905,-399.0831 547.5586,-409.2239 553.2129,-405.0973" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZAP&amp;#45;&amp;gt;DMU --&gt;
&lt;g class="edge" id="edge11"&gt;
&lt;title&gt;ZAP-&amp;gt;DMU&lt;/title&gt;
&lt;path d="M528.5,-434.8314C528.5,-427.131 528.5,-417.9743 528.5,-409.4166" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="532.0001,-409.4132 528.5,-399.4133 525.0001,-409.4133 532.0001,-409.4132" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ARC --&gt;
&lt;g class="node" id="node14"&gt;
&lt;title&gt;ARC&lt;/title&gt;
&lt;g id="a_node14"&gt;&lt;a xlink:href="#arc" xlink:title="ARC"&gt;
&lt;polygon fill="none" points="555.5,-327 501.5,-327 501.5,-291 555.5,-291 555.5,-327" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="528.5" y="-305.3"&gt;ARC&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- DMU&amp;#45;&amp;gt;ARC --&gt;
&lt;g class="edge" id="edge17"&gt;
&lt;title&gt;DMU-&amp;gt;ARC&lt;/title&gt;
&lt;path d="M528.5,-362.8314C528.5,-355.131 528.5,-345.9743 528.5,-337.4166" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="532.0001,-337.4132 528.5,-327.4133 525.0001,-337.4133 532.0001,-337.4132" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- MetaSlab --&gt;
&lt;g class="node" id="node19"&gt;
&lt;title&gt;MetaSlab&lt;/title&gt;
&lt;g id="a_node19"&gt;&lt;a xlink:href="#metaslab" xlink:title="MetaSlab"&gt;
&lt;polygon fill="none" points="641,-180 556,-180 556,-144 641,-144 641,-180" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="598.5" y="-158.3"&gt;MetaSlab&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- DMU&amp;#45;&amp;gt;MetaSlab --&gt;
&lt;g class="edge" id="edge23"&gt;
&lt;title&gt;DMU-&amp;gt;MetaSlab&lt;/title&gt;
&lt;path d="M555.6383,-368.3974C585.2203,-352.9755 630.9457,-323.7894 650.5,-283 663.3726,-256.1483 661.6355,-243.6173 650.5,-216 646.1775,-205.2796 638.5956,-195.4983 630.5361,-187.2948" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="632.7442,-184.5652 623.0801,-180.2228 627.927,-189.644 632.7442,-184.5652" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZIO --&gt;
&lt;g class="node" id="node16"&gt;
&lt;title&gt;ZIO&lt;/title&gt;
&lt;g id="a_node16"&gt;&lt;a xlink:href="#zio" xlink:title="ZIO"&gt;
&lt;polygon fill="none" points="555.5,-252 501.5,-252 501.5,-216 555.5,-216 555.5,-252" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="528.5" y="-230.3"&gt;ZIO&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- ARC&amp;#45;&amp;gt;ZIO --&gt;
&lt;g class="edge" id="edge20"&gt;
&lt;title&gt;ARC-&amp;gt;ZIO&lt;/title&gt;
&lt;path d="M528.5,-290.8446C528.5,-282.3401 528.5,-272.0076 528.5,-262.4964" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="532.0001,-262.2481 528.5,-252.2482 525.0001,-262.2482 532.0001,-262.2481" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- L2ARC --&gt;
&lt;g class="node" id="node17"&gt;
&lt;title&gt;L2ARC&lt;/title&gt;
&lt;g id="a_node17"&gt;&lt;a xlink:href="#l2arc" xlink:title="L2ARC"&gt;
&lt;polygon fill="none" points="641.5,-252 573.5,-252 573.5,-216 641.5,-216 641.5,-252" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="607.5" y="-230.3"&gt;L2ARC&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- ARC&amp;#45;&amp;gt;L2ARC --&gt;
&lt;g class="edge" id="edge21"&gt;
&lt;title&gt;ARC-&amp;gt;L2ARC&lt;/title&gt;
&lt;path d="M554.9972,-290.9209C558.2877,-288.3716 561.5341,-285.6973 564.5,-283 572.1249,-276.0657 579.7661,-267.8645 586.4472,-260.1753" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="589.4807,-262.0092 593.2739,-252.1166 584.1396,-257.4845 589.4807,-262.0092" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZIL&amp;#45;&amp;gt;ZIO --&gt;
&lt;g class="edge" id="edge19"&gt;
&lt;title&gt;ZIL-&amp;gt;ZIO&lt;/title&gt;
&lt;path d="M480.869,-292.5464C484.9519,-289.5928 488.9697,-286.3728 492.5,-283 499.3026,-276.501 505.7319,-268.5881 511.2235,-261.0336" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="514.3671,-262.6436 517.2054,-252.436 508.6211,-258.6456 514.3671,-262.6436" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- SLOG --&gt;
&lt;g class="node" id="node18"&gt;
&lt;title&gt;SLOG&lt;/title&gt;
&lt;g id="a_node18"&gt;&lt;a xlink:href="#slog" xlink:title="SLOG"&gt;
&lt;polygon fill="none" points="483,-252 424,-252 424,-216 483,-216 483,-252" stroke="#0000ff"&gt;&lt;/polygon&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="453.5" y="-230.3"&gt;SLOG&lt;/text&gt;
&lt;/a&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;!-- ZIL&amp;#45;&amp;gt;SLOG --&gt;
&lt;g class="edge" id="edge18"&gt;
&lt;title&gt;ZIL-&amp;gt;SLOG&lt;/title&gt;
&lt;path d="M453.5,-290.8446C453.5,-282.3401 453.5,-272.0076 453.5,-262.4964" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="457.0001,-262.2481 453.5,-252.2482 450.0001,-262.2482 457.0001,-262.2481" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZIO&amp;#45;&amp;gt;MetaSlab --&gt;
&lt;g class="edge" id="edge24"&gt;
&lt;title&gt;ZIO-&amp;gt;MetaSlab&lt;/title&gt;
&lt;path d="M546.164,-215.8314C554.4732,-207.2848 564.5264,-196.9443 573.5918,-187.6198" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="576.1369,-190.023 580.5982,-180.4133 571.1179,-185.1435 576.1369,-190.023" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- ZIO&amp;#45;&amp;gt;VDEV --&gt;
&lt;g class="edge" id="edge28"&gt;
&lt;title&gt;ZIO-&amp;gt;VDEV&lt;/title&gt;
&lt;path d="M526.9802,-215.7623C524.9334,-191.201 521.2706,-147.2474 518.8628,-118.3541" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="522.3259,-117.7644 518.0075,-108.0896 515.3501,-118.3458 522.3259,-117.7644" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- L2ARC&amp;#45;&amp;gt;ZIO --&gt;
&lt;g class="edge" id="edge22"&gt;
&lt;title&gt;L2ARC-&amp;gt;ZIO&lt;/title&gt;
&lt;path d="M573.4775,-234C570.8786,-234 568.2797,-234 565.6807,-234" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="565.6563,-230.5001 555.6563,-234 565.6562,-237.5001 565.6563,-230.5001" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- L2ARC&amp;#45;&amp;gt;VDEV --&gt;
&lt;g class="edge" id="edge26"&gt;
&lt;title&gt;L2ARC-&amp;gt;VDEV&lt;/title&gt;
&lt;path d="M581.9503,-215.8625C570.0905,-206.3385 556.6295,-193.7883 547.5,-180 535.0104,-161.137 527.0138,-136.7121 522.2764,-118.0676" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="525.6279,-117.032 519.9132,-108.1105 518.8171,-118.6485 525.6279,-117.032" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- SLOG&amp;#45;&amp;gt;VDEV --&gt;
&lt;g class="edge" id="edge25"&gt;
&lt;title&gt;SLOG-&amp;gt;VDEV&lt;/title&gt;
&lt;path d="M461.479,-215.7623C472.3192,-190.9846 491.7938,-146.4714 504.4277,-117.5939" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="507.7841,-118.6541 508.5858,-108.0896 501.371,-115.8483 507.7841,-118.6541" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- MetaSlab&amp;#45;&amp;gt;VDEV --&gt;
&lt;g class="edge" id="edge27"&gt;
&lt;title&gt;MetaSlab-&amp;gt;VDEV&lt;/title&gt;
&lt;path d="M577.8079,-143.8314C567.8052,-135.0485 555.645,-124.3712 544.8001,-114.8489" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="547.0092,-112.1308 537.1854,-108.1628 542.3906,-117.3909 547.0092,-112.1308" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;!-- physical storage devices --&gt;
&lt;g class="node" id="node21"&gt;
&lt;title&gt;physical storage devices&lt;/title&gt;
&lt;path d="M613,-32.7273C613,-34.5331 569.7472,-36 516.5,-36 463.2528,-36 420,-34.5331 420,-32.7273 420,-32.7273 420,-3.2727 420,-3.2727 420,-1.4669 463.2528,0 516.5,0 569.7472,0 613,-1.4669 613,-3.2727 613,-3.2727 613,-32.7273 613,-32.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;path d="M613,-32.7273C613,-30.9214 569.7472,-29.4545 516.5,-29.4545 463.2528,-29.4545 420,-30.9214 420,-32.7273" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;text fill="#000000" font-family="Times,serif" font-size="14.00" text-anchor="middle" x="516.5" y="-14.3"&gt;physical storage devices&lt;/text&gt;
&lt;/g&gt;
&lt;!-- VDEV&amp;#45;&amp;gt;physical storage devices --&gt;
&lt;g class="edge" id="edge30"&gt;
&lt;title&gt;VDEV-&amp;gt;physical storage devices&lt;/title&gt;
&lt;path d="M516.5,-71.8314C516.5,-64.131 516.5,-54.9743 516.5,-46.4166" fill="none" stroke="#000000"&gt;&lt;/path&gt;
&lt;polygon fill="#000000" points="520.0001,-46.4132 516.5,-36.4133 513.0001,-46.4133 520.0001,-46.4132" stroke="#000000"&gt;&lt;/polygon&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;p&gt;接下來從底層往上介紹一下各個子系統的全稱和職能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spa"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;SPA&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Storage Pool Allocator&lt;/p&gt;
&lt;p&gt;從內核提供的多個塊設備中抽象出存儲池的子系統。 SPA 進一步分爲 ZIO 和 VDEV 兩大部分和其餘一些小的子系統。&lt;/p&gt;
&lt;p&gt;SPA 對 DMU 提供的接口不同於傳統的塊設備接口，完全利用了 CoW 文件系統對寫入位置不敏感的特點。
傳統的塊設備接口通常是寫入時指定一個寫入地址，把緩衝區寫到磁盤指定的位置上，而 DMU 可以讓 SPA
做兩種操作：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;code class="code"&gt;
write&lt;/code&gt;
 ， DMU 交給 SPA 一個數據塊的內存指針， SPA
負責找設備寫入這個數據塊，然後返回給 DMU 一個 block pointer 。&lt;/li&gt;
&lt;li&gt;&lt;code class="code"&gt;
read&lt;/code&gt;
 ，DMU 交給 SPA 一個 block pointer ，SPA 讀取設備並返回給 DMU
完整的數據塊。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是說，在 DMU 讓 SPA 寫數據塊時， DMU 還不知道 SPA 會寫入的地方，這完全由 SPA 判斷，
這一點通常被稱爲 Write Anywhere ，在別的 CoW 文件系統比如 Btrfs 和 WAFL 中也有這個特點。
反過來 SPA 想要對一個數據塊操作時，也完全不清楚這個數據塊用於什麼目的，屬於什麼文件或者文件系統結構。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vdev"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;VDEV&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Virtual DEVice&lt;/p&gt;
&lt;p&gt;VDEV 在 ZFS 中的作用相當於 Linux 內核的 Device Mapper 層或者 FreeBSD GEOM 層，提供
Stripe/Mirror/RAIDZ 之類的多設備存儲池管理和抽象。 ZFS 中的 vdev
形成一個樹狀結構，在樹的底層是從內核提供的物理設備，
其上是虛擬的塊設備。每個虛擬塊設備對上對下都是塊設備接口，除了底層的物理設備之外，位於中間層的
vdev 需要負責地址映射、容量轉換等計算過程。&lt;/p&gt;
&lt;p&gt;除了用於存儲數據的 Stripe/Mirror/RAIDZ 之類的 VDEV ，還有一些特殊用途的 VDEV
，包括提供二級緩存的 L2ARC 設備，以及提供 ZIL 高速日誌的 SLOG 設備。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zio"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;ZIO&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
ZIO Pipeline by George Wilson&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/qkA5HhfzsvM"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;ZFS I/O&lt;/p&gt;
&lt;p&gt;作用相當於內核的 IO scheduler 和 pagecache write back 機制。
OpenZFS Summit 有个演讲整理了 ZIO 流水线的工作原理。
ZIO 內部使用流水線和事件驅動機制，避免讓上層的 ZFS 線程阻塞等待在 IO 操作上。
ZIO 把一個上層的寫請求轉換成多個寫操作，負責把這些寫操作合併到
transaction group 提交事務組。 ZIO 也負責將讀寫請求按同步還是異步分成不同的讀寫優先級並實施優先級調度，
在 &lt;a class="reference external" href="https://github.com/zfsonlinux/zfs/wiki/ZIO-Scheduler"&gt;OpenZFS 項目 wiki 頁有一篇描述 ZIO 調度&lt;/a&gt;
的細節。&lt;/p&gt;
&lt;p&gt;除了調度之外， ZIO 層還負責在讀寫流水線中拆解和拼裝數據塊。上層 DMU 交給 SPA 的數據塊有固定大小，
目前默認是 128KiB ，pool 整體的參數可以調整塊大小在 4KiB 到 8MiB 之間。ZIO
拿到整塊大小的數據塊之後，在流水線中可以對數據塊做諸如以下操作：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用壓縮算法，壓縮/解壓數據塊。&lt;/li&gt;
&lt;li&gt;查詢 dedup table ，對數據塊去重。&lt;/li&gt;
&lt;li&gt;加密/解密數據塊。&lt;/li&gt;
&lt;li&gt;計算數據塊的校驗和。&lt;/li&gt;
&lt;li&gt;如果底層分配器不能分配完整的 128KiB （或 zpool 設置的大小），那麼嘗試分配多個小塊，然後用多個
512B 的指針間接塊連起多個小塊的，拼裝成一個虛擬的大塊，這個機制叫
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSGangBlocks"&gt;gang block&lt;/a&gt;
。通常 ZFS 中用到 gang block 時，整個存儲池處於極度空間不足的情況，由 gang block
造成嚴重性能下降，而 gang block 的意義在於在空間接近要滿的時候也能 CoW
寫入一些元數據，釋放亟需的存儲空間。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可見經過 ZIO 流水線之後，數據塊不再是統一大小，這使得 ZFS 用在 4K 對齊的磁盤或者 SSD
上有了一些新的挑戰。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="metaslab"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;MetaSlab&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
MetaSlab Allocation Performance by Paul Dagnelie&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/LZpaTGNvalE"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;MetaSlab 是 ZFS 的塊分配器。 VDEV 把存儲設備抽象成存儲池之後， MetaSlab
負責實際從存儲設備上分配數據塊，跟蹤記錄可用空間和已用空間。&lt;/p&gt;
&lt;p&gt;叫 MetaSlab 這個名字是因爲 Jeff 最初同時也給 Solaris 內核寫過
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Slab_allocation"&gt;slab 分配器&lt;/a&gt;
，一開始設計 SPA 的時候 Jeff 想在 SPA 中也利用 Solaris 的 slab
分配器對磁盤空間使用類似的分配算法。後來 MetaSlab 逐漸不再使用 slab 算法，只有名字留了下來。&lt;/p&gt;
&lt;p&gt;MetaSlab 的結構很接近於 FreeBSD UFS 的 cylinder group ，或者 ext2/3/4 的 block group
，或者 xfs 的 allocation group ，目的都是讓存儲分配策略「局域化」，
或者說讓近期分配的數據塊的物理地址比較接近。在存儲設備上創建 zpool
的時候，首先會儘量在存儲設備上分配 200 個左右的 MetaSlab ，隨後給 zpool
增加設備的話使用接近的 MetaSlab 大小。每個 MetaSlab 是連續的一整塊空間，在 MetaSlab
內對數據塊空間做分配和釋放。磁盤中存儲的 MetaSlab 的分配情況是按需載入內存的，系統
import zpool 時不需要載入所有 MetaSlab 到內存，而只需加載一小部分。當前載入內存的 MetaSlab
剩餘空間告急時，會載入別的 MetaSlab 嘗試分配，而從某個 MetaSlab 釋放空間不需要載入 MetaSlab
。&lt;/p&gt;
&lt;p&gt;OpenZFS Summit 也有一個對 MetaSlab 分配器性能的介紹，可以看到很多分配器內的細節。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;ARC&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
ELI5: ZFS Caching Explain Like I'm 5: How the ZFS Adaptive Replacement Cache works&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/1Wo3i2gkAIk"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Adaptive Replacement Cache&lt;/p&gt;
&lt;p&gt;ARC 的作用相當於 Linux/Solaris/FreeBSD 中傳統的 page/buffer cache 。
和傳統 pagecache 使用 LRU (Least Recently Used) 之類的算法剔除緩存頁不同， ARC
算法試圖在 LRU 和 LFU(Least Frequently Used) 之間尋找平衡，從而複製大文件之類的線性大量
IO 操作不至於讓緩存失效率猛增。最近 FOSDEM 2019 有一個介紹 ZFS ARC 工作原理的視頻。&lt;/p&gt;
&lt;p&gt;不過 ZFS 採用它自有的 ARC 一個顯著缺點在於，不能和內核已有的 pagecache 機制相互配合，尤其在
系統內存壓力很大的情況下，內核與 ZFS 無關的其餘部分可能難以通知 ARC 釋放內存。所以 ARC
是 ZFS 消耗內存的大戶之一（另一個是可選的 dedup table），也是
&lt;a class="reference external" href="http://open-zfs.org/wiki/Performance_tuning#Adaptive_Replacement_Cache"&gt;ZFS 性能調優&lt;/a&gt;
的重中之重。&lt;/p&gt;
&lt;p&gt;當然， ZFS 採用 ARC 不依賴於內核已有的 pagecache 機制除了 LFU 平衡的好處之外，也有別的有利的一面。
系統中多次讀取因 snapshot 或者 dedup 而共享的數據塊的話，在 ZFS 的 ARC 機制下，同樣的
block pointer 只會被緩存一次；而傳統的 pagecache 因爲基於 inode 判斷是否有共享，
所以即使這些文件有共享頁面（比如 btrfs/xfs 的 reflink 形成的），也會多次讀入內存。 Linux
的 btrfs 和 xfs 在 VFS 層面有共用的 reflink 機制之後，正在努力着手改善這種局面，而 ZFS
因爲 ARC 所以從最初就避免了這種浪費。&lt;/p&gt;
&lt;p&gt;和很多傳言所說的不同， ARC 的內存壓力問題不僅在 Linux 內核會有，在 FreeBSD 和
Solaris/Illumos 上也是同樣，這個在
&lt;a class="reference external" href="https://youtu.be/xMH5rCL8S2k?t=997"&gt;ZFS First Mount by Mark Shellenbaum 的問答環節 16:37 左右有提到&lt;/a&gt;
。其中 Mark Shellenbaum 提到 Matt 覺得讓 ARC 併入現有 pagecache
子系統的工作量太大，難以實現。&lt;/p&gt;
&lt;p&gt;因爲 ARC 工作在 ZIO 上層，所以 ARC 中緩存的數據是經過 ZIO
從存儲設備中讀取出來之後解壓、解密等處理之後的，原始的數據。最近 ZFS 的版本有支持一種新特性叫
&lt;a class="reference external" href="https://www.illumos.org/issues/6950"&gt;Compressed ARC&lt;/a&gt;
，打破 ARC 和 VDEV 中間 ZIO 的壁壘，把壓縮的數據直接緩存在 ARC
中。這麼做是因爲壓縮解壓很快的情況下，壓縮的 ARC 能節省不少內存，讓更多數據保留在 ARC
中從而提升緩存利用率，並且在有 L2ARC 的情況下也能增加 L2ARC 能存儲的緩存。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="l2arc"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;L2ARC&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Level 2 Adaptive Replacement Cache&lt;/p&gt;
&lt;p&gt;這是用 ARC 算法實現的二級緩存，保存於高速存儲設備上。常見用法是給 ZFS pool 配置一塊 SSD
作爲 L2ARC 高速緩存，減輕內存 ARC 的負擔並增加緩存命中率。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slog"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;SLOG&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Separate intent LOG&lt;/p&gt;
&lt;p&gt;SLOG 是額外的日誌記錄設備。 SLOG 之於 ZIL 有點像 L2ARC 之餘 ARC ， L2ARC 是把內存中的
ARC 放入額外的高速存儲設備，而 SLOG 是把原本和別的數據塊存儲在一起的 ZIL
放到額外的高速存儲設備。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tol"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;TOL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Transactional Object Layer&lt;/p&gt;
&lt;p&gt;這一部分子系統在數據塊的基礎上提供一個事務性的對象語義層，這裏事務性是指，
對對象的修改處於明確的狀態，不會因爲突然斷電之類的原因導致狀態不一致。TOL
中最主要的部分是 DMU 層。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dmu"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;DMU&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Data Management Unit&lt;/p&gt;
&lt;p&gt;在塊的基礎上提供「對象（object）」的抽象。每個「對象」可以是一個文件，或者是別的 ZFS 內部需要記錄的東西。&lt;/p&gt;
&lt;p&gt;DMU 這個名字最初是 Jeff 想類比於操作系統中內存管理的 MMU(Memory Management Unit)，
Jeff 希望 ZFS 中增加和刪除文件就像內存分配一樣簡單，增加和移除塊設備就像增加內存一樣簡單，
由 DMU 負責從存儲池中分配和釋放數據塊，對上提供事務性語義，管理員不需要管理文件存儲在什麼存儲設備上。
這裏事務性語義指對文件的修改要麼完全成功，要麼完全失敗，不會處於中間狀態，這靠 DMU 的 CoW
語義實現。&lt;/p&gt;
&lt;p&gt;DMU 實現了對象級別的 CoW 語義，從而任何經過了 DMU 做讀寫的子系統都具有了 CoW 的特徵，
這不僅包括文件、文件夾這些 ZPL 層需要的東西，也包括文件系統內部用的 spacemap 之類的設施。
相反，不經過 DMU 的子系統則可能沒法保證事務語義。這裏一個特例是 ZIL ，一定程度上繞過了 DMU
直接寫日誌。說一定程度是因爲 ZIL 仍然靠 DMU 來擴展長度，當一個塊寫滿日誌之後需要等 DMU
分配一個新塊，在分配好的塊內寫日誌則不需要經過 DMU 。所有經過 DMU 子系統的對象都有 CoW
語義，也意味着 ZFS 中不能對某些文件可選地關閉 CoW ，不能提供數據庫應用的 direct IO 之類的接口。&lt;/p&gt;
&lt;p&gt;「對象（object）」抽象是 DMU 最重要的抽象，一個對象的大小可變，佔用一個或者多個數據塊（
默認一個數據塊 128KiB ）。上面提到 SPA 的時候也講了 DMU 和 SPA 之間不同於普通塊設備抽象的接口，這使得 DMU
按整塊的大小分配空間。當對象使用多個數據塊存儲時， DMU 提供間接塊（indirect block）來引用這些數據塊。
間接塊很像傳統 Unix 文件系統（Solaris UFS 或者 Linux ext2）中的一級二級三級間接塊，
一個間接塊存儲很多塊指針（block pointer），多個間接塊形成樹狀結構，最終一個塊指針可以引用到一個對象。
更現代的文件系統比如 ext4/xfs/btrfs/ntfs 提供了 extent 抽象，可以指向一個連續範圍的存儲塊，
而 ZFS 不使用類似 extent 的抽象。DMU 採用間接塊而不是 extent
，使得 ZFS 的空間分配更趨向碎片化，爲了避免碎片化造成的性能影響，需要儘量延遲寫入使得一次寫入能在磁盤上
儘量連續，這裏 ARC 提供的緩存和 ZIO 提供的流水線對延遲寫入避免碎片有至關重要的幫助。&lt;/p&gt;
&lt;p&gt;有了「對象（object）」的抽象之後， DMU 進一步實現了「對象集（objectset）」的抽象，
一個對象集中保存一系列按順序編號的 dnode （ ZFS 中類似 inode 的數據結構），每個 dnode 有足夠空間
指向一個對象的最多三個塊指針，如果對象需要更多數據塊可以使用間接塊，如果對象很小也可以直接壓縮進
dnode 。隨後 DSL 又進一步用對象集來實現數據集（dataset）抽象，提供比如文件系統（filesystem
）、快照（snapshot）、克隆（clone）之類的抽象。一個對象集中的對象可以通過 dnode 編號相互引用，
就像普通文件系統的硬鏈接引用 inode 編號那樣。&lt;/p&gt;
&lt;p&gt;上面也提到因爲 SPA 和 DMU 分離， SPA 完全不知道數據塊用於什麼目的；這一點其實對 DMU 也是類似，
DMU 雖然能從某個對象找到它所佔用的數據塊，但是 DMU 完全不知道這個對象在文件系統或者存儲池中是
用來存儲什麼的。當 DMU 讀取數據遇到壞塊（block pointer 中的校驗和與 block pointer
指向的數據塊內容不一致）時，它知道這個數據塊在哪兒（具體哪個設備上的哪個地址），
但是不知道這個數據塊是否和別的對象共享，不知道搬動這個數據塊的影響，也沒法從對象反推出文件系統路徑，
（除了明顯開銷很高地掃一遍整個存儲池）。所以 DMU 在遇到讀取錯誤（普通的讀操作或者 scrub/resilver
操作中）時，只能選擇在同樣的地址，原地寫入數據塊的備份（如果能找到或者推算出備份的話）。&lt;/p&gt;
&lt;p&gt;或許有人會疑惑，既然從 SPA 無法根據數據地址反推出對象，在 DMU 也無法根據對象反推出文件，那麼
zfs 在遇到數據損壞時是如何在診斷信息中給出損壞的文件路徑的呢？這其實基於 ZPL 的一個黑魔法：
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSPathLookupTrick"&gt;在 dnode 記錄父級 dnode 的編號&lt;/a&gt;
。因爲是個黑魔法，這個記錄不總是對的，所以只能用於診斷信息，不能基於這個實現別的文件系統功能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zap"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;ZAP&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZFS Attribute Processor&lt;/p&gt;
&lt;p&gt;在 DMU 提供的「對象」抽象基礎上提供緊湊的 name/value 映射存儲，
從而文件夾內容列表、文件擴展屬性之類的都是基於 ZAP 來存。 ZAP 在內部分爲兩種存儲表達：
microZAP 和 fatZAP 。&lt;/p&gt;
&lt;p&gt;一個 microZAP 佔用一整塊數據塊，能存 name 長度小於 50 字符並且 value 是 uint64_t 的表項，
每個表項 64 字節。 &lt;del&gt;fatZAP 則是個樹狀結構，能存更多更複雜的東西。&lt;/del&gt;&lt;ins&gt;fatZAP 是個 on disk 的散利表，指針表中是 64bit 對 name 的 hash ，指向單鏈表的子節點列表，子節點中的 value 可以是任意類型的數據（不光是 uint64_t ）。&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;可見 microZAP 非常適合表述一個普通大小的文件夾裏面包含到很多普通文件 inode （ZFS 是 dnode）的引用。
&lt;del&gt;&lt;/del&gt;&lt;ins&gt;fatZAP 則不光可以用於任意大小的文件夾，還可以表達 ZFS 的配置屬性之類的東西，非常靈活。&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;a class="reference external" href="https://youtu.be/xMH5rCL8S2k?t=526"&gt;ZFS First Mount by Mark Shellenbaum 的8:48左右&lt;/a&gt;
提到，最初 ZPL 中關於文件的所有屬性（包括訪問時間、權限、大小之類所有文件都有的）都是基於
ZAP 來存，也就是說每個文件都有個 ZAP ，其中有叫做 size 呀 owner
之類的鍵值對，就像是個 JSON 對象那樣，這讓 ZPL 一開始很容易設計原型並且擴展。然後文件夾內容列表有另一種數據結構
ZDS（ZFS Directory Service），後來常見的文件屬性在 ZPL 有了專用的緊湊數據結構，而 ZDS 則漸漸融入了 ZAP 。
&lt;del&gt;&lt;/del&gt;&lt;ins&gt;這些變化詳見下面 ZPL 。&lt;/ins&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dsl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;DSL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Dataset and Snapshot Layer&lt;/p&gt;
&lt;p&gt;數據集和快照層，負責創建和管理快照、克隆等數據集類型，跟蹤它們的寫入大小，最終刪除它們。
由於 DMU 層面已經負責了對象的寫時複製語義和對象集的概念，所以 DSL 層面不需要直接接觸寫文件之類來自 ZPL
的請求，無論有沒有快照對 DMU 層面一樣採用寫時複製的方式修改文件數據。
不過在刪除快照和克隆之類的時候，則需要 DSL 參與計算沒有和別的數據集共享的數據塊並且刪除它們。&lt;/p&gt;
&lt;p&gt;DSL 管理數據集時，也負責管理數據集上附加的屬性。ZFS 每個數據集有個屬性列表，這些用 ZAP 存儲，
DSL 則需要根據數據集的上下級關係，計算出繼承的屬性，最終指導 ZIO 層面的讀寫行爲。&lt;/p&gt;
&lt;p&gt;除了管理數據集， DSL 層面也提供了 zfs 中 send/receive 的能力。 ZFS 在 send 時從 DSL
層找到快照引用到的所有數據塊，把它們直接發往管道，在 receive 端則直接接收數據塊並重組數據塊指針。
因爲 DSL 提供的 send/receive 工作在 DMU 之上，所以在 DSL 看到的數據塊是 DMU
的數據塊，下層 SPA 完成的數據壓縮、加密、去重等工作，對 DMU 層完全透明。所以在最初的
send/receive 實現中，假如數據塊已經壓縮，需要在 send 端經過 SPA 解壓，再 receive
端則重新壓縮。最近 ZFS 的 send/receive 逐漸打破 DMU 與 SPA
的壁壘，支持了直接發送已壓縮或加密的數據塊的能力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zil"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;ZIL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZFS Intent Log&lt;/p&gt;
&lt;p&gt;記錄兩次完整事務語義提交之間的日誌，用來加速實現 fsync 之類的文件事務語義。&lt;/p&gt;
&lt;p&gt;原本 CoW 的文件系統不需要日誌結構來保證文件系統結構的一致性，在 DMU
保證了對象級別事務語義的前提下，每次完整的 transaction group commit
都保證了文件系統一致性，掛載時也直接找到最後一個 transaction group 從它開始掛載即可。
不過在 ZFS 中，做一次完整的 transaction group commit 是個比較耗時的操作，
在寫入文件的數據塊之後，還需要更新整個 object set ，然後更新 meta-object set
，最後更新 uberblock ，爲了滿足事務語義這些操作沒法並行完成，所以整個 pool
提交一次需要等待好幾次磁盤寫操作返回，短則一兩秒，長則幾分鐘，
如果事務中有要刪除快照等非常耗時的操作可能還要等更久，在此期間提交的事務沒法保證一致。&lt;/p&gt;
&lt;p&gt;對上層應用程序而言，通常使用 fsync 或者 fdatasync 之類的系統調用，確保文件內容本身的事務一致性。
如果要讓每次 fsync/fdatasync 等待整個 transaction group commit
完成，那會嚴重拖慢很多應用程序，而如果它們不等待直接返回，則在突發斷電時沒有保證一致性。
從而 ZFS 有了 ZIL ，記錄兩次 transaction group 的 commit 之間發生的 fsync
，突然斷電後下次 import zpool 時首先找到最近一次 transaction group ，在它基礎上重放
ZIL 中記錄的寫請求和 fsync 請求，從而滿足 fsync API 要求的事務語義。&lt;/p&gt;
&lt;p&gt;顯然對 ZIL 的寫操作需要繞過 DMU 直接寫入數據塊，所以 ZIL 本身是以日誌系統的方式組織的，每次寫
ZIL 都是在已經分配的 ZIL 塊的末尾添加數據，分配新的 ZIL 塊仍然需要經過 DMU
的空間分配。&lt;/p&gt;
&lt;p&gt;傳統日誌型文件系統中對 data 開啓日誌支持會造成每次文件系統寫入操作需要寫兩次到設備上，
一次寫入日誌，再一次覆蓋文件系統內容；在
ZIL 實現中則不需要重複寫兩次， DMU 讓 SPA 寫入數據之後 ZIL 可以直接記錄新數據塊的
block pointer ，所以使用 ZIL 不會導致傳統日誌型文件系統中雙倍寫入放大的問題。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zvol"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id18"&gt;ZVOL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZFS VOLume&lt;/p&gt;
&lt;p&gt;有點像 loopback block device ，暴露一個塊設備的接口，其上可以創建別的
FS 。對 ZFS 而言實現 ZVOL 的意義在於它是比文件更簡單的接口，所以在實現完整 ZPL
之前，一開始就先實現了 ZVOL ，而且
&lt;a class="reference external" href="https://youtu.be/xMH5rCL8S2k?t=298"&gt;早期 Solaris 沒有 thin provisioning storage pool 的時候可以用 ZVOL 模擬很大的塊設備，當時 Solaris 的 UFS 團隊用它來測試 UFS 對 TB 級存儲的支持情況&lt;/a&gt;
。&lt;/p&gt;
&lt;p&gt;因爲 ZVOL 基於 DMU 上層，所以 DMU 所有的文件系統功能，比如 snapshot / dedup / compression
都可以用在 ZVOL 上，從而讓 ZVOL 上層的傳統文件系統也具有類似的功能。並且 ZVOL 也具有了 ARC
緩存的能力，和 dedup 結合之下，非常適合於在一個宿主機 ZFS
上提供對虛擬機文件系統鏡像的存儲，可以節省不少存儲空間和內存佔用開銷。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zpl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id19"&gt;ZPL&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ZFS Posix Layer&lt;/p&gt;
&lt;p&gt;提供符合 POSIX 文件系統語義的抽象，也就是包括文件、目錄、軟鏈接、套接字這些抽象以及
inode 訪問時間、權限那些抽象，ZPL 是 ZFS 中對一個普通 FS 而言用戶直接接觸的部分。
ZPL 可以說是 ZFS 最複雜的子系統，也是 ZFS 作爲一個文件系統而言最關鍵的部分。&lt;/p&gt;
&lt;p&gt;ZPL 的實現中直接使用了 ZAP 和 DMU 提供的抽象，比如每個 ZPL 文件用一個 DMU 對象表達，每個
ZPL 目錄用一個 ZAP 對象表達，然後 DMU 對象集對應到 ZPL 下的一個文件系統。
也就是說 ZPL 負責把操作系統 VFS 抽象層的那些文件系統操作接口，翻譯映射到基於 DMU 和 ZAP
的抽象上。傳統 Unix 中的管道、套接字、軟鏈接之類的沒有什麼數據內容的東西則在 ZPL 直接用 dnode
實現出來。 ZPL 也需要進一步實現文件權限、所有者、訪問日期、擴展屬性之類雜七雜八的文件系統功能。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2020年2月9日添加&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;繼續上述 ZAP 格式變化的討論，在 ZPL 拋棄早期用 ZAP 的設計之後， ZPL 中 znode （ZPL 擴展的 dnode）
保存文件屬性的機制成爲了一個小的子系統，叫
&lt;a class="reference external" href="https://github.com/illumos/illumos-gate/blob/master/usr/src/uts/common/fs/zfs/sa.c"&gt;ZFS System Attributes&lt;/a&gt;
。 SA 的設計照顧了舊版 ZPL znode 格式兼容問題，有新舊兩代格式。舊版 znode
格式是固定偏移位置存取屬性的 SA ，因此透過預先註冊好的描述舊版 znode 格式的固定映射表，
SA 依然能用同樣的代碼路徑存取舊版的 znode 。而後來
&lt;a class="reference external" href="https://utcc.utoronto.ca/~cks/space/blog/solaris/ZFSSystemAttributes"&gt;靈活的新設計下的 SA 更有意思&lt;/a&gt;
，ZFS 認識到，大部分 znode 的屬性都可以用有限的幾種屬性集來表达，
比如普通文件有一組類似的屬性（權限、所有者之類的）， zvol 有另一組（明顯 zvol 不需要很多 ZPL
文件的屬性），整個 ZFS dataset 可以「註冊」幾種屬性佈局，然後讓每個 znode 引用其中一種佈局，
這樣 znode 保存的屬性仍然是可以任意變化的，又不需要在每個 znode 中都記錄所有屬性的名字。
SA 的出現提升了 ZPL 的可擴展性。 ZPL 爲了應付不同的操作系統之間文件系統 API 的差異，可以使用
SA 在 znode 之中加入針對不同操作系統和應用場景的屬性。例如，在支持 NFSv4 ACL 的操作系統上，ZFS
既可以用現有方式把 DACL ACEs 放在獨立於文件對象的單獨對象中，也可以把 DACL ACEs 放在 SA 內。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://youtu.be/xMH5rCL8S2k?t=456"&gt;在 ZFS First Mount by Mark Shellenbaum&lt;/a&gt;
中介紹了很多在最初實現 ZPL 過程中的坎坷， ZPL 的困難之處在於需要兼容現有應用程序對傳統文件系統
API 的使用方式，所以他們需要大量兼容性測試。視頻中講到非常有意思的一件事是， ZFS
在設計時不想重複 Solaris UFS 設計中的很多缺陷，於是實現 VFS API 時有諸多取捨和再設計。
其中他們遇到了 &lt;code class="code"&gt;
VOP_RWLOCK&lt;/code&gt;
 ，這個是 UFS 提供的文件級別讀寫鎖。對一些應用尤其是
NFS 而言，文件讀寫鎖能保證應用層的一致性，而對另一些應用比如數據庫而言，
文件鎖的粒度太大造成了性能問題。在設計 ZPL 的時候他們不想在 ZFS 中提供 &lt;code class="code"&gt;
VOP_RWLOCK&lt;/code&gt;

，這讓 NFS 開發者們很難辦（要記得 NFS 也是 Solaris 對 Unix 世界貢獻的一大發明）。
最終 ZFS 把 DMU 的內部細節也暴露給了 NFS ，讓 NFS 基於 DMU 的對象創建時間（ TXG id
）而不是文件鎖來保證 NFS 的一致性。結果是現在 ZFS 中也有照顧 NFS 的代碼，後來也加入了
Samba/CIFS 的支持，從而在 ZFS 上設置 NFS export 時是通過 ZFS 的機制而非系統原生的 NFS
export 機制。&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="FS筆記"></category><category term="FS notes"></category><category term="zfs"></category><category term="layered"></category><category term="architecture"></category><category term="SPA"></category><category term="DMU"></category><category term="ZPL"></category><category term="ZIO"></category><category term="VDEV"></category><category term="ARC"></category><category term="ZAP"></category><category term="DSL"></category><category term="ZIL"></category><category term="ZVOL"></category></entry><entry><title>用 usbip 轉發 raspberry pi 的 USB 鍵盤鼠標給 Arch Linux 的 PC</title><link href="//farseerfc.me/usbip-forward-raspberrypi.html" rel="alternate"></link><published>2019-02-07T02:14:00+09:00</published><updated>2019-02-07T02:14:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2019-02-07:/usbip-forward-raspberrypi.html</id><summary type="html">&lt;p&gt;惠狐 &lt;a class="reference external" href="/links.html#megumifox"&gt;megumifox&lt;/a&gt; 寫了篇 &lt;a class="reference external" href="https://blog.megumifox.com/public/2019/02/06/%E7%94%A8pulseaudio%E5%B0%86%E7%94%B5%E8%84%91%E7%9A%84%E5%A3%B0%E9%9F%B3%E7%94%A8%E6%89%8B%E6%9C%BA%E6%94%BE%E5%87%BA%E6%9D%A5/"&gt;用PulseAudio將電腦的聲音用手機放出來&lt;/a&gt;
，文末提到想知道我怎麼用樹莓派轉發 USB 的，於是寫篇文章記錄一下。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;家裏有個裝了 Arch Linux ARM 的樹莓派3B 閒置着，裝了 Arch Linux ARM 偶爾上電更新一下，
不過因爲性能實在不適合做別的事情於是一直在吃灰。某日 &lt;del&gt;給老婆安利幻想萬華鏡&lt;/del&gt;&lt;ins&gt;和老婆看片&lt;/ins&gt;
的時候， &lt;del&gt;老婆不吃安利於是遷怒鍵盤鼠標&lt;/del&gt;&lt;ins&gt;鍵盤鼠標被長長的 USB 線扯着感覺很難受&lt;/ins&gt;
，於是偶發奇想，能不能利用一下樹莓派的多達 4 個 USB 2.0 端口接鼠標鍵盤呢，
這樣鼠標鍵盤就可以跟着樹莓派來回走，不用拖着長長的 USB 線了。&lt;/p&gt;
&lt;p&gt;上網搜了一下， Linux 環境有個 usbip 工具正好能做到這個。原理也很直觀， usbip 能把 USB …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;惠狐 &lt;a class="reference external" href="/links.html#megumifox"&gt;megumifox&lt;/a&gt; 寫了篇 &lt;a class="reference external" href="https://blog.megumifox.com/public/2019/02/06/%E7%94%A8pulseaudio%E5%B0%86%E7%94%B5%E8%84%91%E7%9A%84%E5%A3%B0%E9%9F%B3%E7%94%A8%E6%89%8B%E6%9C%BA%E6%94%BE%E5%87%BA%E6%9D%A5/"&gt;用PulseAudio將電腦的聲音用手機放出來&lt;/a&gt;
，文末提到想知道我怎麼用樹莓派轉發 USB 的，於是寫篇文章記錄一下。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;家裏有個裝了 Arch Linux ARM 的樹莓派3B 閒置着，裝了 Arch Linux ARM 偶爾上電更新一下，
不過因爲性能實在不適合做別的事情於是一直在吃灰。某日 &lt;del&gt;給老婆安利幻想萬華鏡&lt;/del&gt;&lt;ins&gt;和老婆看片&lt;/ins&gt;
的時候， &lt;del&gt;老婆不吃安利於是遷怒鍵盤鼠標&lt;/del&gt;&lt;ins&gt;鍵盤鼠標被長長的 USB 線扯着感覺很難受&lt;/ins&gt;
，於是偶發奇想，能不能利用一下樹莓派的多達 4 個 USB 2.0 端口接鼠標鍵盤呢，
這樣鼠標鍵盤就可以跟着樹莓派來回走，不用拖着長長的 USB 線了。&lt;/p&gt;
&lt;p&gt;上網搜了一下， Linux 環境有個 usbip 工具正好能做到這個。原理也很直觀， usbip 能把 USB
端口上的數據封裝成 IP 協議通過網絡轉發出去，從而兩個網絡間相互聯通的電腦就可以遠程轉發 USB 了。
設置好的話，就像是一臺 PC 多了幾個位於樹莓派上的 USB 端口，插上樹莓派的 USB 設備統統作爲 PC
的設備。&lt;/p&gt;
&lt;p&gt;這篇文章假設有一個裝了 Arch Linux 的 PC ，和一個裝了 Arch Linux ARM 的樹莓派，
並且兩者間能通過網絡互相訪問到。別的發行版上大概也可以這麼做，只是我沒有試過。 usbip
工具似乎普遍被發行版打包了，除此之外需要的也只是 Linux 內核提供好的功能而已。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arch-linux-arm"&gt;
&lt;h2&gt;設置 Arch Linux ARM 的樹莓派端&lt;/h2&gt;
&lt;p&gt;假設樹莓派上面網絡已經設置妥當，開機插電就能自動聯網。接下來安裝 usbip 工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo pacman -Syu usbip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後需要記錄一下樹莓派的 IP 地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ip addr&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;3: wlan0: ......&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;inet 192.168.0.117/24 brd 192.168.0.255 scope global noprefixroute wlan0&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;......&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來給 udev 添加一個規則，當插入 usb 設備的時候，執行我的腳本 usbipall.sh
把 usb 設備通過 usbip 共享出去：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat /etc/udev/rules.d/usbipall.rules&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;ACTION=="add", SUBSYSTEM=="usb", RUN+="/usr/bin/bash /usr/local/bin/usbipall.sh"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個 rules 文件 &lt;a class="reference external" href="https://github.com/farseerfc/dotfiles/blob/master/usbiprpi/usbipall.rules"&gt;可以在我的 dotfiles 裏面找到&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;然後規則調用的 usbipall.sh 我這麼寫的， &lt;a class="reference external" href="https://github.com/farseerfc/dotfiles/blob/master/usbiprpi/usbipall.sh"&gt;文件同樣在我的 dotfiles 裏面&lt;/a&gt; ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;allusb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;usbip list -p -l&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; usb in &lt;span class="nv"&gt;$allusb&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nv"&gt;busid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$usb&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;"s|#.*||g;s|busid=||g"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1-1.1"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;# ignoring usb ethernet&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date -Iseconds&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;: Exporting &lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    usbip &lt;span class="nb"&gt;bind&lt;/span&gt; --busid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt;&amp;gt;/var/log/usbipall.log &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這個腳本做了這樣幾件事。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;調用 &lt;code class="code"&gt;
usbip list --local&lt;/code&gt;
 列出本地所有 usb 設備。&lt;/li&gt;
&lt;li&gt;針對每個設備&lt;ol class="arabic"&gt;
&lt;li&gt;取出它的 busid&lt;/li&gt;
&lt;li&gt;判斷是不是樹莓派的 USB 以太網卡，不是的話繼續&lt;/li&gt;
&lt;li&gt;通過 &lt;code class="code"&gt;
usbip bind --busid=&lt;/code&gt;
 命令把這個 usb 設備導出到網上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;最後把所有輸出記錄到 /var/log/usbipall.log 日誌裏面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;樹莓派這邊設置就完成了。從此之後插入的 usb 設備就會統統導出出去。&lt;/p&gt;
&lt;p&gt;這裏需要注意一下，啓用了 udev 規則之後，就沒法插鍵盤鼠標到樹莓派上控制它了……我都是從另一端 ssh
上樹莓派操作的。如果有什麼地方設置錯誤，可能需要把樹莓派的 SD 卡拔下來插到電腦上，刪除掉 rules
文件……&lt;/p&gt;
&lt;p&gt;仔細檢查設置正確了之後，重新載入 udev 規則，或者重啓樹莓派：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; systemctl restart systemd-udevd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這樣樹莓派這邊就設置好了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="arch-linux-pc"&gt;
&lt;h2&gt;設置 Arch Linux 的 PC 端&lt;/h2&gt;
&lt;p&gt;同樣假設 PC 這邊也已經聯網。接下來同樣安裝 usbip 工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo pacman -Syu usbip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後我寫了個小腳本去鏈接樹莓派端， &lt;a class="reference external" href="https://github.com/farseerfc/dotfiles/blob/master/usbiprpi/usbiprpi3.sh"&gt;這個文件 usbiprpi3.sh 也在我的 dotfiles&lt;/a&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;rpi3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"192.168.0.117"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;modprobe vhci-hcd&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;allusb&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;usbip list -p -r &lt;span class="nv"&gt;$rpi3&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; cut -d&lt;span class="s2"&gt;":"&lt;/span&gt; -f1 -s &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s|^[ \t]*||;/^$/d'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;for&lt;/span&gt; busid in &lt;span class="nv"&gt;$allusb&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1-1.1"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="c1"&gt;# ignoring usb ethernet&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;fi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Attaching &lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    usbip attach --remote&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$rpi3&lt;/span&gt; --busid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$busid&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;done&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中腳本第一行填入上面記錄下來的樹莓派的 IP 地址，接下來腳本做了這麼幾件事：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用 modprobe 確認加載 vhci-hcd 通用虛擬鍵鼠驅動&lt;/li&gt;
&lt;li&gt;用 &lt;code class="code"&gt;
usbip list --remote=&lt;/code&gt;
 列出遠程設備上已經導出了的 USB 設備，取出他們的 busid&lt;/li&gt;
&lt;li&gt;對每個設備用 &lt;code class="code"&gt;
usbip attach&lt;/code&gt;
 接上該設備&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然後就已經準備妥當，接下來是見證奇蹟的時刻：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sleep &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; sudo ./usbiprpi3.sh&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Attaching 1-1.4.3&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Attaching 1-1.4.1&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因爲只有一套鍵盤鼠標，所以先 sleep 個 10 秒，在此期間快速把鍵鼠拔下來插到樹莓派的 USB 口上去。
如果對自己手速沒自信也可以把時間設長一點。然後用 root 權限執行 usbiprpi3.sh 。&lt;/p&gt;
&lt;p&gt;一切正常的話，先能觀測插上樹莓派的鍵盤鼠標被樹莓派初始化了一下，比如鍵盤燈會亮，
然後這些設備會被導出出去，從而鍵盤燈滅掉，然後 10 秒等待結束後他們被遠程接到了 PC 端，
又會被初始化一下，同時 PC 端這邊會有上述 Attaching 的輸出。然後鍵盤鼠標就能像平常一樣用啦。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;使用體驗&lt;/h2&gt;
&lt;p&gt;因爲就是通過 IP 轉發 USB 嘛，所以就和普通地接 USB 的體驗差不多，當然前提是網絡環境足夠穩定。
在我家間隔 5 米到無線路由器的環境下，基本感覺不到網絡延遲的影響。
通過這種方式聊天上網應該和直接接 USB 設備完全一樣。本文就是在通過樹莓派轉發的前提下用鍵盤打字寫的。&lt;/p&gt;
&lt;p&gt;不過如果網絡負載本身就很大的話，可能會一些延遲，比如我開着 OBS 直播打東方的時候，原本就手殘
的我感覺更加手殘了……&lt;/p&gt;
&lt;p&gt;試過拿着樹莓派在房間到處走，走到無線信號覆蓋不到的地方， usbip 會斷掉，PC 上的現象就像是 USB
設備被拔下來了……所以如果無線網絡不穩的話，可能需要對上面腳本做個循環？不過那樣可能會用起來很彆扭吧。&lt;/p&gt;
&lt;p&gt;以及，上述操作 usbip 是走 TCP 3240 端口，數據包大概完全沒有加密，所以考慮安全性的話，
最好還是在內網環境使用。不過轉念一想，萬一有別人接上了我導出出去的 USB ，也就是截獲我的鍵盤，
PC 這邊沒法 attach 設備了，應該馬上會發現吧。我敲打 sudo 之類命令的時候 shell 裏面沒有回顯，
就不會再繼續敲密碼了。而且似乎對攻擊者也沒有什麼好處？要是他 usb attach 到了我的設備上，
我就能控制他的鍵盤了耶~&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="linux"></category><category term="archlinux"></category><category term="raspberrypi"></category><category term="usbip"></category><category term="usb"></category><category term="forward"></category></entry><entry><title>【譯】使用 GNU stow 管理你的點文件</title><link href="//farseerfc.me/using-gnu-stow-to-manage-your-dotfiles.html" rel="alternate"></link><published>2018-12-08T03:35:00+09:00</published><updated>2018-12-08T03:35:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2018-12-08:/using-gnu-stow-to-manage-your-dotfiles.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;譯註&lt;/h2&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;這篇是翻譯自 &lt;a class="reference external" href="http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html"&gt;Brandon Invergo 的博客的英文文章 Using GNU Stow to manage your dotfiles&lt;/a&gt; 。
Brandon Invergo 的博客採用 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-sa/3.0/deed.en_US"&gt;CC-BY-SA 3.0&lt;/a&gt;
授權，因此本文也同樣採用 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-sa/3.0/deed.en_US"&gt;CC-BY-SA 3.0&lt;/a&gt;
，不同於其它我寫的文章是 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;CC-BY-NC-SA 4.0&lt;/a&gt;
授權。&lt;/p&gt;
&lt;p&gt;我自己已經使用此文中介紹的方案管理 &lt;a class="reference external" href="https://git.io/fcdots"&gt;我自己的 dotfiles&lt;/a&gt;
快 3 年了。最早想採用這樣的管理方案是爲了方便在多臺 Arch Linux 系統之間同步配置，
後來逐漸主力系統也更新換代了一次，又同步到了自己的 vps 上去，目前管理多個 Arch Linux
上都多少都有這套配置。甚至裝好 Arch Linux 添加好用戶最初做的事情就是安裝 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;譯註&lt;/h2&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;這篇是翻譯自 &lt;a class="reference external" href="http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html"&gt;Brandon Invergo 的博客的英文文章 Using GNU Stow to manage your dotfiles&lt;/a&gt; 。
Brandon Invergo 的博客採用 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-sa/3.0/deed.en_US"&gt;CC-BY-SA 3.0&lt;/a&gt;
授權，因此本文也同樣採用 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-sa/3.0/deed.en_US"&gt;CC-BY-SA 3.0&lt;/a&gt;
，不同於其它我寫的文章是 &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;CC-BY-NC-SA 4.0&lt;/a&gt;
授權。&lt;/p&gt;
&lt;p&gt;我自己已經使用此文中介紹的方案管理 &lt;a class="reference external" href="https://git.io/fcdots"&gt;我自己的 dotfiles&lt;/a&gt;
快 3 年了。最早想採用這樣的管理方案是爲了方便在多臺 Arch Linux 系統之間同步配置，
後來逐漸主力系統也更新換代了一次，又同步到了自己的 vps 上去，目前管理多個 Arch Linux
上都多少都有這套配置。甚至裝好 Arch Linux 添加好用戶最初做的事情就是安裝 stow git
然後 clone 了我自己的 dotfiles repo 下來，然後按需取想要的配置，快捷方便有效。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;廢話不多說，下面是原文和翻譯。與之前的翻譯一樣，正文部分給出原文引用以便對照參考。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;使用 GNU stow 管理你的點文件&lt;/h2&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="50%"/&gt;
&lt;col width="50%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;我昨天偶然間發現一些我覺得值得分享的經驗，就是那種「爲毛我沒有早點知道這個？」那一類的。
我將在這篇文章中介紹如何使用 GNU Stow 管理你的 GNU/Linux 系統中位於用戶家目錄裏的各種配置文件
（通常又叫「點文件(dotfiles)」比如 .bashrc）。&lt;/td&gt;
&lt;td&gt;I accidentally stumbled upon something yesterday that I felt like sharing,
which fell squarely into the "why the hell didn't I know about this before?"
category. In this post, I'll describe how to manage the various
configuration files in your GNU/Linux home directory
(aka "dotfiles" like .bashrc) using GNU Stow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;這件事的困難之處在於，如果能用版本管理系統(VCS, Version Control System)比如
Git, Mercurial(hg), Bazaar(bzr)
管理點文件的話會非常方便，但是這些點文件大部分都位於家目錄的頂級目錄下，
在這個位置不太適合初始化一個版本管理倉庫。這些年下來我試過很多程序，設計目的在於解決這個問題，
幫你把這些配置文件安置在某個下級目錄中，然後安裝或者鏈接這些文件到它們應該在的位置。
嘗試下來這些程序沒有一個真正能打動我。它們要麼有很多依賴（比如 Ruby 和一大坨庫），
要麼需要我記住如何用它，考慮到同步配置這種不算經常使用的場合，要記住用法真的挺難。&lt;/td&gt;
&lt;td&gt;The difficulty is that it would be helpful to manage one's configuration
files with a version control system like Git, Mercurial or Bazaar, but
many/most dotfiles reside at the top-level of your home directory,
where it wouldn't be a good idea to initialize a VCS repository.
Over time I've come across various programs which aim to manage this
for you by keeping all the files in a subdirectory and then installing or
linking them into their appropriate places. None of those programs ever
really appealed to me. They would require a ton of dependencies
(like Ruby and a ton of libraries for it) or they would require me to
remember how to use them, which is difficult when really for such a task
you rarely use the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;最近我在用 GNU Stow 來管理我從源代碼在本地編譯安裝到 &lt;code class="code"&gt;
/​usr/​local/​&lt;/code&gt;
 中的一些程序。
基本上說，在這種常見用法下，是你把這些本地編譯的包配置安裝到
&lt;code class="code"&gt;
/​usr/​local/​stow/​${PKGNAME}-{PKGVERSION}&lt;/code&gt;
 這樣的位置，然後在
&lt;code class="code"&gt;
/​usr/​local/​stow/​&lt;/code&gt;
 目錄中執行 &lt;code class="code"&gt;
# stow ${PKGNAME}-${PKGVERSION}&lt;/code&gt;

，然後它就會爲程序所有的文件創建符號鏈接放在 &lt;code class="code"&gt;
/​usr/​local&lt;/code&gt;

中合適的地方。然後當你想用 Stow 卸載這個程序的時候，就不必再考慮會留下什麼垃圾文件，
或者找不到安裝時用的 Makefile 了。這種安裝方式下也可以非常容易地切換一個程序的不同版本
（比如我想嘗試不同配置選項下的 &lt;a class="reference external" href="https://dwm.suckless.org/"&gt;dwm&lt;/a&gt; 或者
&lt;a class="reference external" href="https://st.suckless.org/"&gt;st&lt;/a&gt; 的時候）。&lt;/td&gt;
&lt;td&gt;Lately I've been using GNU Stow to manage programs I install from source to
/usr/local/. Basically, in this typical usage, you install locally built
packages to /usr/local/stow/${PKGNAME}-{PKGVERSION} and then
from /usr/local/stow/ you run # stow ${PKGNAME}-${PKGVERSION} and the
program generates symbolic links to all the programs' files into the
appropriate places under /usr/local/. Then, when you uninstall a program
via Stow, you don't have to worry about any stray files that you or a
provide Makefile may have missed. It also makes handling alternate versions
of a program quite easy (i.e. when I'm experimenting with different
configurations of dwm or st).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;前段時間在我掃郵件列表的時候，看到某個帖子中某人在說使用 Stow 管理安裝他的點文件。
當時我沒特別在意這個帖子，但是大概我大腦潛意識把它歸檔保存爲今後閱讀了。
昨天我想起來試試這種用法，試過後我不得不說，這比那些專門設計用來做這任務的點文件管理器要方便太多了，
雖然表面上看起來這種用法沒那麼顯而易見。&lt;/td&gt;
&lt;td&gt;Some time ago I happened across a mailing list posting where someone
described using Stow to manage the installation of their dotfiles.
I didn't pay much attention to it but my brain must have filed it away
for later. Yesterday I decided to give it a try and I have to say that
it is so much more convenient than those other dedicated dotfile-management
programs, even if it wasn't an immediately obvious option.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;方法很簡單。我建了個 &lt;code class="code"&gt;
${HOME}/​dotfiles&lt;/code&gt;
 文件夾，然後在裏面爲我想管理的每個程序配置都
創建一個子文件夾。然後我把這些程序的配置從原本的家目錄移動到這每一個對應的子文件夾中，
並保持它們在家目錄中的文件夾結構。比如，如果某個文件原本應該位於家目錄的頂層文件夾裏，
那它現在應該放在這個程序名子目錄的頂層文件夾。如果某個配置文件通常應該位於默認的
&lt;code class="code"&gt;
${XDG_CONFIG_HOME}/​${PKGNAME}&lt;/code&gt;
 位置 (&lt;code class="code"&gt;
${HOME}/​.config/​${PKGNAME}&lt;/code&gt;
)，
那麼現在它應該放在 &lt;code class="code"&gt;
${HOME}/​dotfiles/​${PKGNAME}/​.config/​${PKGNAME}&lt;/code&gt;

，如此類推。然後在那個 dotfiles 文件夾裏面，直接運行 &lt;code class="code"&gt;
$ stow $PKGNAME&lt;/code&gt;
 命令，
Stow 就會爲你自動創建這些配置文件的符號鏈接到合適的位置。接下來就很容易爲這個 dotfiles
目錄初始化版本管理倉庫，從而記錄你對這些配置文件做的修改（並且這也可以極度簡化在不同電腦之間
共享配置，這也是我想要這麼做的主要原因）。&lt;/td&gt;
&lt;td&gt;The procedure is simple. I created the ${HOME}/dotfiles directory and then
inside it I made subdirectories for all the programs whose cofigurations
I wanted to manage. Inside each of those directories, I moved in all the
appropriate files, maintaining the directory structure of my home directory.
So, if a file normally resides at the top level of your home directory,
it would go into the top level of the program's subdirectory.
If a file normally goes in the default ${XDG_CONFIG_HOME}/${PKGNAME}
location (${HOME}/.config/${PKGNAME}), then it would instead go in
${HOME}/dotfiles/${PKGNAME}/.config/${PKGNAME} and so on.
Finally, from the dotfiles directory, you just run $ stow $PKGNAME and
Stow will symlink all the package's configuration files to the appropriate
locations. It's then easy to make the dotfiles a VCS repository so you can
keep track of changes you make (plus it makes it so much easier to share
configurations between different computers, which was my main reason to
do it).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;舉個例子，比如說你想管理 Bash, VIM, Uzbl 這三個程序的配置文件。Bash 會在家目錄的頂層文件夾
放幾個文件； VIM 通常會有在頂層文件夾的 .vimrc 文件和 .vim 目錄；然後 Uzbl 的配置位於
&lt;code class="code"&gt;
${XDG_CONFIG_HOME}/​uzbl&lt;/code&gt;
 以及 &lt;code class="code"&gt;
${XDG_DATA_HOME}/​uzbl&lt;/code&gt;

。於是在遷移配置前，你的家目錄的文件夾結構應該看起來像這樣：&lt;/td&gt;
&lt;td&gt;For example, let's say you want to manage the configuration for Bash,
VIM and Uzbl. Bash has a couple files in the top-level directory;
VIM typically has your .vimrc file on the top-level and a .vim directory;
and Uzbl has files in ${XDG_CONFIG_HOME}/uzbl and ${XDG_DATA_HOME}/uzbl.
So, your home directory looks like this:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;home/&lt;/span&gt;
&lt;span class="code-line"&gt;    brandon/&lt;/span&gt;
&lt;span class="code-line"&gt;        .config/&lt;/span&gt;
&lt;span class="code-line"&gt;            uzbl/&lt;/span&gt;
&lt;span class="code-line"&gt;                [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;        .local/&lt;/span&gt;
&lt;span class="code-line"&gt;            share/&lt;/span&gt;
&lt;span class="code-line"&gt;                uzbl/&lt;/span&gt;
&lt;span class="code-line"&gt;                    [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;        .vim/&lt;/span&gt;
&lt;span class="code-line"&gt;            [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;        .bashrc&lt;/span&gt;
&lt;span class="code-line"&gt;        .bash_profile&lt;/span&gt;
&lt;span class="code-line"&gt;        .bash_logout&lt;/span&gt;
&lt;span class="code-line"&gt;        .vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="50%"/&gt;
&lt;col width="50%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;然後遷移配置的方式是，應該建一個 dotfiles 子目錄，然後像這樣移動所有配置文件：&lt;/td&gt;
&lt;td&gt;You would then create a dotfiles subdirectory and move all the files there:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;home/&lt;/span&gt;
&lt;span class="code-line"&gt;    /brandon/&lt;/span&gt;
&lt;span class="code-line"&gt;        .config/&lt;/span&gt;
&lt;span class="code-line"&gt;        .local/&lt;/span&gt;
&lt;span class="code-line"&gt;            .share/&lt;/span&gt;
&lt;span class="code-line"&gt;        dotfiles/&lt;/span&gt;
&lt;span class="code-line"&gt;            bash/&lt;/span&gt;
&lt;span class="code-line"&gt;                .bashrc&lt;/span&gt;
&lt;span class="code-line"&gt;                .bash_profile&lt;/span&gt;
&lt;span class="code-line"&gt;                .bash_logout&lt;/span&gt;
&lt;span class="code-line"&gt;            uzbl/&lt;/span&gt;
&lt;span class="code-line"&gt;                .config/&lt;/span&gt;
&lt;span class="code-line"&gt;                    uzbl/&lt;/span&gt;
&lt;span class="code-line"&gt;                        [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;                .local/&lt;/span&gt;
&lt;span class="code-line"&gt;                    share/&lt;/span&gt;
&lt;span class="code-line"&gt;                        uzbl/&lt;/span&gt;
&lt;span class="code-line"&gt;                            [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;            vim/&lt;/span&gt;
&lt;span class="code-line"&gt;                .vim/&lt;/span&gt;
&lt;span class="code-line"&gt;                    [...some files]&lt;/span&gt;
&lt;span class="code-line"&gt;                .vimrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="50%"/&gt;
&lt;col width="50%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;然後執行以下命令：&lt;/td&gt;
&lt;td&gt;Then, perform the following commands:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/dotfiles&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; stow bash&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; stow uzbl&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; stow vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="50%"/&gt;
&lt;col width="50%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;然後，瞬間，所有你的配置文件（的符號鏈接）就安安穩穩地放入了它們該在的地方，無論原本這些目錄結構
有多麼錯綜複雜，這樣安排之後的 dotfiles 文件夾內的目錄結構立刻整理得有條有理，
並且可以很容易地轉換成版本控制倉庫。非常有用的一點是，如果你有多臺電腦，可能這些電腦並沒有
安裝完全一樣的軟件集，那麼你可以手選一些你需要的軟件配置來安裝。在你的 dotfiles 文件夾中總是
可以找到所有的配置文件，但是如果你不需要某個程序的某份配置，那你就不對它執行 stow
命令，它就不會擾亂你的家目錄。&lt;/td&gt;
&lt;td&gt;And, voila, all your config files (well, symbolic links to them) are all
in the correct place, however disorganized that might be, while the actual
files are all neatly organized in your dotfiles directory, which is easily
turned into a VCS repo. One handy thing is that if you use multiple
computers, which may not have the same software installed on them,
you can pick and choose which configurations to install when you need them.
All of your dotfiles are always available in your dotfiles directory,
but if you don't need the configuration for one program, you simply don't
Stow it and thus it does not clutter your home directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;嗯，以上就是整個用法介紹。希望能有別人覺得這個用法有用！我知道對我來說這個非常有幫助。&lt;/td&gt;
&lt;td&gt;Well, that's all there is to it. Hopefully someone else out there finds
this useful! I know I've found it to be a huge help.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="linux"></category><category term="dotfiles"></category><category term="stow"></category></entry><entry><title>啓用 GitHub Issue 作爲博客留言系統</title><link href="//farseerfc.me/github-issues-as-comments.html" rel="alternate"></link><published>2016-08-07T16:28:00+09:00</published><updated>2016-08-07T16:28:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2016-08-07:/github-issues-as-comments.html</id><summary type="html">&lt;p&gt;從今天起本博客將啓用 GitHub Issue 作爲留言系統。
原本使用的 Disqus 將繼續保留一段時間，目前沒有關閉的計劃。&lt;/p&gt;
&lt;p&gt;換用 GitHub Issue 是計劃了好久的事情了，最初重做這個主題的時候就有考慮過。
這個想法的契機是看到了這篇
&lt;a class="reference external" href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html"&gt;GitHub hosted comments for GitHub hosted blogs&lt;/a&gt;
，然後立馬覺得這個想法很符合寄宿在 GitHub Pages 上的博客。
一個限制是要求評論者必須有 GitHub
賬戶，考慮到我的博客的受衆這個要求估計不算太過分。
使用 GitHub Issue 的好處麼，比如自帶的 GFMD
富文本格式，郵件通知，還有訂閱和取消訂閱通知，郵件回復，
這些方面都不比第三方留言系統遜色。&lt;/p&gt;
&lt;p&gt;換用 GitHub Issue 另一方面原因是最近聽說 Disqus
被部分牆了，想必以後牆也會越來越高。之前曾經試過在這個博客換上多說，
然而效果我並不喜歡，多說喜歡侵入頁面加很多奇怪的東西 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;從今天起本博客將啓用 GitHub Issue 作爲留言系統。
原本使用的 Disqus 將繼續保留一段時間，目前沒有關閉的計劃。&lt;/p&gt;
&lt;p&gt;換用 GitHub Issue 是計劃了好久的事情了，最初重做這個主題的時候就有考慮過。
這個想法的契機是看到了這篇
&lt;a class="reference external" href="http://ivanzuzak.info/2011/02/18/github-hosted-comments-for-github-hosted-blogs.html"&gt;GitHub hosted comments for GitHub hosted blogs&lt;/a&gt;
，然後立馬覺得這個想法很符合寄宿在 GitHub Pages 上的博客。
一個限制是要求評論者必須有 GitHub
賬戶，考慮到我的博客的受衆這個要求估計不算太過分。
使用 GitHub Issue 的好處麼，比如自帶的 GFMD
富文本格式，郵件通知，還有訂閱和取消訂閱通知，郵件回復，
這些方面都不比第三方留言系統遜色。&lt;/p&gt;
&lt;p&gt;換用 GitHub Issue 另一方面原因是最近聽說 Disqus
被部分牆了，想必以後牆也會越來越高。之前曾經試過在這個博客換上多說，
然而效果我並不喜歡，多說喜歡侵入頁面加很多奇怪的東西，比如用戶的頭像通常是
http 的……也試過結合新浪微博的評論，而新浪微博越來越封閉，API 也越來越不靠譜。&lt;/p&gt;
&lt;p&gt;使用 GitHub Issue 作爲評論的方式比較簡單，上面那篇博客裏面提到了，代碼量不比
加載 Disqus 多多少，而且沒有了 iframe 的困擾，唯一麻煩的地方就是要稍微設計一下佈局方式讓它融入
現有的頁面佈局。
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/blob/2ea6c9f3227275fe86ddaa75d8fc6496b3b03d8c/templates/includes/comments.html#L32"&gt;我參考上面的實現在這裏&lt;/a&gt; 。
這個加載代碼使用兩個變量加載 Issue Comments ，一個是在 pelicanconf.py 裏的
&lt;code class="code"&gt;
GITHUB_REPO&lt;/code&gt;
 ，可以指向任何 Repo ，我指向 farseerfc/farseerfc.github.io
的這個 GitHub Page repo ，另一個變量是每篇文章裏需要加上 &lt;code class="code"&gt;
issueid&lt;/code&gt;

的元數據，關連文章到每個 Issue 上。&lt;/p&gt;
&lt;p&gt;還有一個稍微麻煩的事情是現在每寫一篇文章之後都要新建一個 issue 了。
手動操作有點累人，於是我 &lt;a class="reference external" href="https://github.com/farseerfc/farseerfc/blob/master/createissue.py"&gt;寫了個腳本&lt;/a&gt;
自動搜索 pelican 的 content 文件夾裏面文章的 slug 並且對沒有 issueid 關連的
文章創建 issue 。&lt;/p&gt;
&lt;p&gt;好啦新的留言系統的外觀樣式還在測試中，希望大家多留言幫我測試一下！&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2016年8月7日19:30更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;新增了對 GitHub Issue comments 裏面
&lt;a class="reference external" href="https://developer.github.com/v3/issues/comments/#reactions-summary"&gt;reactions&lt;/a&gt;
的支持，套用 font-awesome 的圖標（似乎沒 GitHub 上的圖標好看）。這個還屬於 GitHub API
的實驗性功能，要加入 &lt;code class="code"&gt;
Accept: application/​vnd.github.squirrel-girl-preview&lt;/code&gt;

HTTP 頭纔能拿到。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2016年8月7日23:16更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;感謝 @iovxw 的測試讓我發現 github 的高亮回復和郵件回復是需要特殊處理的。
高亮回復用上了 &lt;a class="reference external" href="https://github.com/sindresorhus/github-markdown-css"&gt;這裏的 CSS&lt;/a&gt;
郵件引言的展開事件直接用 jQuery 做了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".email-hidden-toggle &amp;gt; a"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"click"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;".email-hidden-reply"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;還得注意郵件的回復需要 CSS 裏面 &lt;code class="code"&gt;
white-space: pre-wrap&lt;/code&gt;
 。&lt;/p&gt;
</content><category term="tech"></category><category term="pelican"></category><category term="github"></category><category term="pages"></category><category term="issues"></category></entry><entry><title>PacVis: 可視化 pacman 本地數據庫</title><link href="//farseerfc.me/pacvis.html" rel="alternate"></link><published>2016-07-31T03:52:00+09:00</published><updated>2016-07-31T03:52:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2016-07-31:/pacvis.html</id><summary type="html">
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
PacVis&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Demo of PacVis" class="img-responsive" src="//farseerfc.me/images/pacvis-first.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pacvis"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;我爲什麼要做 PacVis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我喜歡 Arch Linux ，大概是因爲唯有 Arch Linux 能給我對整個系統「瞭如指掌」的感覺。
在 Arch Linux 裏我能清楚地知道我安裝的每一個包，能知道系統裏任何一個文件是來自哪個包，
以及我爲什麼要裝它。或許對 Debian/Fedora/openSUSE 足夠熟悉了之後也能做到這兩點，
不過他們的細緻打包的結果通常是包的數量比 Arch 要多個 3 到 10 倍，並且打包的細節也比 Arch
Linux 簡單的 PKGBUILD 要複雜一個數量級。&lt;/p&gt;
&lt;p&gt;每一個裝過 Arch Linux 的人大概都知道，裝了 Arch Linux 之後得到的系統非常樸素，按照
ArchWiki 上的流程一路走下來的話，最關鍵的一條命令就是 &lt;code class="code"&gt;
pacstrap /​mnt …&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
PacVis&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Demo of PacVis" class="img-responsive" src="//farseerfc.me/images/pacvis-first.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pacvis"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;我爲什麼要做 PacVis&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我喜歡 Arch Linux ，大概是因爲唯有 Arch Linux 能給我對整個系統「瞭如指掌」的感覺。
在 Arch Linux 裏我能清楚地知道我安裝的每一個包，能知道系統裏任何一個文件是來自哪個包，
以及我爲什麼要裝它。或許對 Debian/Fedora/openSUSE 足夠熟悉了之後也能做到這兩點，
不過他們的細緻打包的結果通常是包的數量比 Arch 要多個 3 到 10 倍，並且打包的細節也比 Arch
Linux 簡單的 PKGBUILD 要複雜一個數量級。&lt;/p&gt;
&lt;p&gt;每一個裝過 Arch Linux 的人大概都知道，裝了 Arch Linux 之後得到的系統非常樸素，按照
ArchWiki 上的流程一路走下來的話，最關鍵的一條命令就是 &lt;code class="code"&gt;
pacstrap /​mnt base&lt;/code&gt;
 ，
它在 &lt;code class="code"&gt;
/​mnt&lt;/code&gt;
 裏作爲根調用 &lt;code class="code"&gt;
pacman -S base&lt;/code&gt;
 裝上了整個 base 組，
然後就沒有然後了。這個系統一開始空無一物，你需要的任何東西都是後來一點點用
&lt;code class="code"&gt;
pacman&lt;/code&gt;
 手動裝出來的，沒有累贅，按你所需。&lt;/p&gt;
&lt;p&gt;然而時間長了，系統中難免會有一些包，是你裝過用過然後忘記了，
然後這些包就堆在系統的角落裏，就像家裏陳年的老傢俱，佔着地，落着灰。雖然
&lt;code class="code"&gt;
pacman -Qtd&lt;/code&gt;
 能方便地幫你找出所有
&lt;strong&gt;曾經作爲依賴被裝進來，而現在不被任何包依賴&lt;/strong&gt; 的包，但是對於那些你手動指定的包，
它就無能爲力了。&lt;/p&gt;
&lt;p&gt;於是我就一直在找一個工具能幫我梳理系統中包的關係，方便我：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;找出那些曾經用過而現在不需要的包&lt;/li&gt;
&lt;li&gt;找出那些體積大而且佔地方的包&lt;/li&gt;
&lt;li&gt;釐清系統中安裝了的包之間的關係&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="Android System Architecture" class="img-responsive" src="//farseerfc.me/images/Android-System-Architecture.jpg"/&gt;
&lt;p class="caption"&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Android_(operating_system)"&gt;Android 系統架構&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;關於最後一點「釐清包的關係」，我曾經看到過
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Architecture_of_OS_X"&gt;macOS 系統架構圖&lt;/a&gt;
和 Android 的系統架構圖，對其中的層次化架構印象深刻，之後就一直在想，是否能畫出現代
Linux 桌面系統上類似的架構圖呢？又或者 Linux 桌面系統是否會展現完全不同的樣貌？
從維基百科或者別的渠道能找到 Linux 內核、或者 Linux 圖形棧，
或者某個桌面環境的架構，但是沒有找到覆蓋一整個發行版的樣貌的。
於是我便想，能不能從包的依賴關係中自動生成這樣一張圖呢。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;PacVis的老前輩們&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在開始寫 PacVis 之前，我試過一些類似的工具，他們都或多或少能解決一部分我的需要，
又在某些方面有所不足。這些工具成爲了 PacVis 的雛形，啓發了 PacVis
應該做成什麼樣子。&lt;/p&gt;
&lt;div class="section" id="pactree"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id13"&gt;pactree&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;pactree 曾經是一個
&lt;a class="reference external" href="https://bbs.archlinux.org/viewtopic.php?id=51795"&gt;獨立的項目&lt;/a&gt; ，現在則是
&lt;a class="reference external" href="https://www.archlinux.org/pacman/pactree.8.html"&gt;pacman 的一部分&lt;/a&gt; 了。
從手冊頁可以看出， pactree 的輸出是由某個包開始的依賴樹。
加上 &lt;code class="code"&gt;
--graph&lt;/code&gt;
 參數之後 pactree 還能輸出
&lt;a class="reference external" href="http://www.graphviz.org/"&gt;dot&lt;/a&gt; 格式的矢量圖描述，然後可以用 dot 畫出依賴圖：&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
&lt;code class="code"&gt;
pactree pacvis-git -d3 --graph | dot -Tpng &amp;gt;pacvis-pactree.png&lt;/code&gt;
&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="pactree --graph" class="img-responsive" src="//farseerfc.me/images/pacvis-pactree.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pactree pacvis-git -d3&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;pacvis-git&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;├─python-tornado&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│ └─python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─expat&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─bzip2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─gdbm&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─openssl&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─libffi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   └─zlib&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;├─pyalpm&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│ ├─python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│ └─pacman&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─bash&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─glibc&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─libarchive&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─curl&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─gpgme&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   ├─pacman-mirrorlist&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;│   └─archlinux-keyring&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;└─python-setuptools&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;  └─python-packaging&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    ├─python-pyparsing&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;    └─python-six&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt; $&lt;/span&gt; pactree pacvis-git -d3 --graph &lt;span class="p"&gt;|&lt;/span&gt; dot -Tpng &amp;gt;pacvis-pactree.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;從畫出的圖可以看出，因爲有共用的依賴，所以從一個包開始的依賴關係已經不再是一棵
&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/%E6%A8%B9%E7%8B%80%E7%B5%90%E6%A7%8B"&gt;圖論意義上的樹(Tree)&lt;/a&gt;
了。最初嘗試做 PacVis 的早期實現的時候，就是試圖用 bash/python 腳本解析 pactree 和
pacman 的輸出，在 pactree 的基礎上把整個系統中所有安裝的包全都包含到一張圖裏。
當然後來畫出的結果並不那麼理想，首先由於圖非常巨大，導致 dot
的自動佈局要耗費數小時，最後畫出的圖也過於巨大基本上沒法看。&lt;/p&gt;
&lt;p&gt;然而不得不說沒有 pactree 就不會有 PacVis ，甚至 pacman 被分離出 alpm
庫也和 pactree 用 C 重寫的過程有很大關係，而 PacVis 用來查詢 pacman 數據庫的庫
pyalpm 正是 alpm 的 Python 綁定。因爲 pactree 的需要而增加出的 alpm 庫奠定了 PacVis
實現的基石。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pacgraph"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id14"&gt;pacgraph&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
pacgraph 的輸出&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="pacgraph" class="img-responsive" src="//farseerfc.me/images/pacvis-pacgraph.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://kmkeen.com/pacgraph/index.html"&gt;pacgraph&lt;/a&gt; 是一位 Arch Linux 的
Trusted User &lt;a class="reference external" href="http://kmkeen.com/"&gt;keenerd&lt;/a&gt; 寫的程序，和
PacVis 一樣也是用 Python 實現的。
比起 pactree ， pacgraph 明顯更接近我的需求，它默認繪製整個系統的所有安裝包，
並且用聰明的佈局算法解決了 dot 佈局的性能問題。&lt;/p&gt;
&lt;p&gt;pacgraph 的輸出是一個富有藝術感的依賴圖，圖中用不同的字體大小表示出了每個包佔用
的磁盤空間。通過觀察 pacgraph 的輸出，我們可以清楚地把握系統全局的樣貌，
比如一眼看出這是個桌面系統還是個服務器系統，並且可以很容易地發現那些佔用磁盤空間
巨大的包，考慮清理這些包以節約空間。&lt;/p&gt;
&lt;p&gt;更棒的是 pacgraph 還提供了一個交互性的 GUI 叫做 pacgraph-tk ，顯然通過 tk 實現。
用這個 GUI 可以縮放觀察整幅圖的細節，或者選中某個包觀察它和別的包的依賴關係。&lt;/p&gt;
&lt;p&gt;pacgraph 還支持通過參數指定只繪製個別包的依賴關係，就像 pactree 那樣。&lt;/p&gt;
&lt;p&gt;不過 pacgraph 也不是完全滿足我的需要。如我前面說過，我希望繪製出的圖能反應
&lt;strong&gt;這個發行版的架構面貌&lt;/strong&gt; ，而 pacgraph 似乎並不區別「該包依賴的包」和「依賴該包的包」
這兩種截然相反的依賴關係。換句話說 pacgraph 畫出的是一張無向圖，
而我更想要一張有向圖，或者說是 &lt;strong&gt;有層次結構的依賴關係圖&lt;/strong&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;於是就有了 PacVis&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
PacVis 剛打開的樣子&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="PacVis on startup" class="img-responsive" src="//farseerfc.me/images/pacvis-second.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;總結了老前輩們的優勢與不足，我便開始利用空餘時間做我心目中的 PacVis 。
前後斷斷續續寫了兩個月，又分爲兩個階段，第一階段做了基本的功能和雛形，
第二階段套用上 &lt;a class="reference external" href="https://getmdl.io/"&gt;https://getmdl.io/&lt;/a&gt; 的模板，總算有了能拿得出手給別人看的樣子。&lt;/p&gt;
&lt;p&gt;於是乎前兩天在 AUR 上給 pacvis 打了個
&lt;a class="reference external" href="https://aur.archlinux.org/packages/pacvis-git/"&gt;pacvis-git&lt;/a&gt;
包，現在想在本地跑 pacvis 應該很方便了，用任何你熟悉的 aurhelper
就可以安裝，也可以直接從 aur 下載 PKGBUILD 打包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;~$ git clone aur@aur.archlinux.org:pacvis-git.git&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$ cd pacvis-git&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~/pacvis-git$ makepkg -si&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~/pacvis-git$ pacvis&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Start PacVis at http://localhost:8888/&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;按照提示說的，接下來打開瀏覽器訪問 &lt;a class="reference external" href="http://localhost:8888/"&gt;http://localhost:8888/&lt;/a&gt; 就能看到 PacVis
的樣子了。僅僅作爲嘗試也可以直接打開跑在我的服務器上的 demo:
&lt;a class="reference external" href="https://pacvis.farseerfc.me/"&gt;https://pacvis.farseerfc.me/&lt;/a&gt; ，這個作爲最小安裝的服務器載入速度大概比普通的桌面系統快一點。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
在 Windows msys2 跑 PacVis&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="PacVis on Windows msys2" class="img-responsive" src="//farseerfc.me/images/pacvis-msys2.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;另外補充一下，因爲 PacVis 只依賴 pyalpm 和 tornado ，所以在別的基於 pacman
的系統上跑它應該也沒有任何問題，包括
&lt;a class="reference external" href="https://msys2.github.io/"&gt;Windows 上的 msys2&lt;/a&gt; 裏（儘管在 msys2 上編譯
tornado 的包可能要花些功夫）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id16"&gt;PacVis 的圖例和用法&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;操作上 PacVis 仿照地圖程序比如 Google Maps 的用法，可以用滾輪或者觸摸屏的手勢
縮放、拖拽，右上角有個側邊欄，不需要的話可以點叉隱藏掉，右下角有縮放的按鈕和
回到全局視圖的按鈕，用起來應該還算直觀。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PacVis showing pacvis-git" class="img-responsive" src="//farseerfc.me/images/pacvis-pacvis-git.png"/&gt;
&lt;p class="caption"&gt;pacvis-git 包的依賴&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;先解釋圖形本身，整張圖由很多小圓圈的節點，以及節點之間的箭頭組成。
一個圓圈就代表一個軟件包，而一條箭頭代表一個依賴關係。縮放到細節的話，
能看到每個小圓圈的下方標註了這個軟件包的名字，鼠標懸浮在圓圈上也會顯示響應信息。
還可以點開軟件包，在右側的邊欄裏會有更詳細的信息。&lt;/p&gt;
&lt;p&gt;比如圖例中顯示了 pacvis-git 自己的依賴，它依賴 pyalpm, python-tornado 和
python-setuptools ，其中 pyalpm 又依賴 pacman 。圖中用
&lt;span class="label label-primary"&gt;紫色&lt;/span&gt; 表示手動安裝的包，
&lt;span class="label label-warning"&gt;橙色&lt;/span&gt; 表示被作爲依賴安裝的包，
箭頭的顏色也隨着包的顏色改變。&lt;/p&gt;
&lt;p&gt;值得注意的是圖中大多數箭頭都是由下往上指的，這是因爲 PacVis 按照包的依賴關係做
了拓撲排序，並且給每個包賦予了一個拓撲層級。比如 pacvis-git 位於 39
層，那麼它依賴的 pyalpm 就位於 38 層，而 pyalpm 依賴的 pacman 就位於 37
層。根據層級關係排列包是 PacVis 於 pacgraph 之間最大的不同之處。&lt;/p&gt;
&lt;p&gt;除了手動縮放， PacVis 還提供了搜索框，根據包名快速定位你感興趣的包。
以及在右側邊欄中的 Dep 和 Req-By 等頁中，包的依賴關係也是做成了按鈕的形式，
可以由此探索包和包之間的關聯。&lt;/p&gt;
&lt;p&gt;最後稍微解釋一下兩個和實現相關的參數：&lt;/p&gt;
&lt;div class="label label-info"&gt;
Max Level&lt;/div&gt;
&lt;p&gt;這是限制 PacVis 載入的最大拓撲層。系統包非常多的時候 PacVis
的佈局算法會顯得很慢，限制層數有助於加快載入，特別是在調試 PacVis 的時候比較有用。&lt;/p&gt;
&lt;div class="label label-info"&gt;
Max Required-By&lt;/div&gt;
&lt;p&gt;這是限制 PacVis 繪製的最大被依賴關係。稍微把玩一下 PacVis 就會發現系統內絕大多數
的包都直接依賴了 glibc 或者 gcc-libs 等個別的幾個包，而要繪製這些依賴的話會導致
渲染出的圖中有大量長直的依賴線，不便觀察。於是可以通過限制這個值，使得 PacVis
不繪製被依賴太多的包的依賴關係，有助於讓渲染出的圖更易觀察。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id17"&gt;從 PacVis 能瞭解到的一些事實&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
一個 KDE 桌面的 PacVis 結果全圖， &lt;a class="reference external" href="//farseerfc.me/images/pacvis-16384.png"&gt;放大（17M）&lt;/a&gt;&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="A normal KDE desktop in PacVis" class="img-responsive" src="//farseerfc.me/images/pacvis-4096-anno.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;稍微玩一下 PacVis 就能發現不少有趣現象，上述「絕大多數包依賴 glibc 」就是一例。
除此之外還有不少值得玩味的地方。&lt;/p&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id18"&gt;依賴層次&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;系統中安裝的包被明顯地分成了這樣幾個層次：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;glibc 等 C 庫&lt;/li&gt;
&lt;li&gt;Bash/Perl/Python 等腳本語言&lt;/li&gt;
&lt;li&gt;coreutils/gcc/binutils 等核心工具&lt;/li&gt;
&lt;li&gt;pacman / systemd 等較大的系統工具&lt;/li&gt;
&lt;li&gt;gtk{2,3}/qt{4,5} 等 GUI toolkit&lt;/li&gt;
&lt;li&gt;chromium 等 GUI 應用&lt;/li&gt;
&lt;li&gt;Plasma/Gnome 等桌面環境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大體上符合直觀的感受，不過細節上有很多有意思的地方，比如 zsh 因爲 gdbm
間接依賴了 bash，這也說明我們不可能在系統中用 zsh 完全替代掉 bash。
再比如 python （在 Arch Linux 中是 python3）和 python2 和 pypy
幾乎在同一個拓撲層級。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="zsh depends on bash because of gdbm" class="img-responsive" src="//farseerfc.me/images/pacvis-zsh-bash.png" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;zsh 因爲 gdbm 間接依賴了 bash&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;不過偶爾顯示的依賴層級不太符合直觀，比如 qt5-base &amp;lt; qt4 &amp;lt; gtk2 &amp;lt; gtk3 。
qt5 因爲被拆成了數個包所以比 qt4 更低級這可以理解，而 gtk 系比 qt
系更高級這一點是很多人（包括我）沒有預料到的吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id19"&gt;循環依賴&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有些包的依賴關係形成了循環依賴，一個例子是 freetype2 和 harfbuzz，freetype2
是繪製字體的庫，harfbuzz 是解析 OpenType 字形的庫，兩者對對方互相依賴。
另一個例子是 KDE 的 kio 和 kinit，前者提供類似 FUSE 的資源訪問抽象層，
後者初始化 KDE 桌面環境。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="freetype2 harfbuzz" class="img-responsive" src="//farseerfc.me/images/pacvis-freetype2-harfbuzz.png" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;freetype2 和 harfbuzz 之間的循環依賴&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;因爲這些循環依賴的存在，使得 PacVis 在實現時不能直接拓撲排序，我採用環探測
算法找出有向圖中所有的環，並且打破這些環，然後再使用拓撲排序。
因此我在圖中用紅色的箭頭表示這些會導致環的依賴關係。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id20"&gt;有些包沒有依賴關係&lt;/a&gt;&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="PacVis Level 0" class="img-responsive" src="//farseerfc.me/images/pacvis-level0.png" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;man-pages 和 licenses 沒有依賴關係&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;有些包既不被別的包依賴，也不依賴別的包，而是孤立在整張圖中，比如
man-pages 和 licenses 。這些包在圖中位於最頂端，拓撲層級是 0 ，我用
&lt;span class="label label-info"&gt;藍色&lt;/span&gt; 正方形特別繪製它們。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id21"&gt;只看依賴關係的話 Linux 內核完全不重要&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;所有用戶空間的程序都依賴着 glibc ，而 glibc 則從定義良好的 syscall 調用內核。
因此理所當然地，如果只看用戶空間的話， glibc 和別的 GNU 組件是整個 GNU/Linux
發行版的中心，而 Linux 則是位於依賴層次中很深的位置，甚至在我的 demo 服務器上
Linux 位於整個圖中的最底端，因爲它的安裝腳本依賴 mkinitcpio
而後者依賴了系統中的衆多組件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pacman-qtd"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id22"&gt;pacman -Qtd 不能找到帶有循環依賴的孤兒包&lt;/a&gt;&lt;/h3&gt;
&lt;div class="figure"&gt;
&lt;img alt="pacman -Qtd cannot find packages with circle dependency" class="img-responsive" src="//farseerfc.me/images/pacvis-circledeps-Qtd.png" style="width: 45%;"/&gt;
&lt;p class="caption"&gt;msys2 中帶有循環依賴的孤兒包&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;這是我在 msys2 上測試 PacVis 的時候發現的，我看到在渲染的圖中有一片羣島，
沒有連上任何手動安裝的包。這種情況很不正常，因爲我一直在我的所有系統中跑
&lt;code class="code"&gt;
pacman -Qtd&lt;/code&gt;
 找出孤兒包並刪掉他們。放大之後我發現這些包中有一條循環依賴，
這說明 &lt;code class="code"&gt;
pacman -Qtd&lt;/code&gt;
 不能像語言的垃圾回收機制那樣找出有循環依賴的孤兒包。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id23"&gt;PacVis 的未來&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;目前的 PacVis 基本上是我最初開始做的時候設想的樣子，隨着開發逐漸又增加了不少功能。
一些是迫於佈局算法的性能而增加的（比如限制層數）。&lt;/p&gt;
&lt;p&gt;今後準備再加入以下這些特性：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;更合理的 optdeps 處理。目前只是把 optdeps 關係在圖上畫出來了。&lt;/li&gt;
&lt;li&gt;更合理的 &lt;strong&gt;依賴關係抉擇&lt;/strong&gt; 。有時候包的依賴關係並不是直接根據包名，而是
&lt;code class="code"&gt;
provides&lt;/code&gt;
 由一個包提供另一個包的依賴。目前 PacVis 用 alpm
提供的方式抉擇這種依賴，於是這種關係並沒有記錄在圖上。&lt;/li&gt;
&lt;li&gt;目前的層級關係沒有考慮包所在的倉庫 (core/extra/community/...) 或者包所屬的組。
加入這些關係能更清晰地表達依賴層次。&lt;/li&gt;
&lt;li&gt;目前沒有辦法只顯示一部分包的關係。以後準備加入像 pactree/pacgraph 一樣顯示部分包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你希望 PacVis 出現某些有趣的用法和功能，也
&lt;a class="reference external" href="https://github.com/farseerfc/pacvis/issues"&gt;請給我提 issue&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="python"></category><category term="pacvis"></category><category term="pacman"></category><category term="arch"></category><category term="linux"></category><category term="pacgraph"></category></entry><entry><title>X 中的混成器與 Composite 擴展</title><link href="//farseerfc.me/compositor-in-X-and-compositext.html" rel="alternate"></link><published>2015-03-19T17:45:00+09:00</published><updated>2015-03-19T17:45:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-03-19:/compositor-in-X-and-compositext.html</id><summary type="html">
&lt;p&gt;在上篇文章 &lt;a class="reference external" href="//farseerfc.me/brief-history-of-compositors-in-desktop-os.html"&gt;「桌面系統的混成器簡史」&lt;/a&gt;
中我介紹了其它桌面系統中的混成器的發展史和工作原理，
話題回到我們的正題 Linux 系統上，來說說目前 X 中混成器是如何工作的。
這篇文章將比上一篇深入更多技術細節，不想看太多細節的可以直接跳過看 &lt;a class="reference external" href="#id6"&gt;結論&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="x"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;原始的 X 的繪圖模型&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，沒有混成器的時候 X 是這樣畫圖的：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/e06d011e.png"/&gt;
&lt;p&gt;X 的應用程序沒有統一的繪圖 API 。GTK+ 在 3.0 之後統一用 &lt;a class="reference external" href="http://cairographics.org/"&gt;Cairo&lt;/a&gt; 繪圖，
而 Cairo 則是基於 PDF 1.4 的繪圖模型構建的，
GTK 的 2.0 和之前的版本中也有很大一部分的繪圖是用 Cairo 進行，
其餘則通過 xlib 或者 xcb 調用 X 核心協議提供的繪圖原語繪圖 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;在上篇文章 &lt;a class="reference external" href="//farseerfc.me/brief-history-of-compositors-in-desktop-os.html"&gt;「桌面系統的混成器簡史」&lt;/a&gt;
中我介紹了其它桌面系統中的混成器的發展史和工作原理，
話題回到我們的正題 Linux 系統上，來說說目前 X 中混成器是如何工作的。
這篇文章將比上一篇深入更多技術細節，不想看太多細節的可以直接跳過看 &lt;a class="reference external" href="#id6"&gt;結論&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="x"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;原始的 X 的繪圖模型&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，沒有混成器的時候 X 是這樣畫圖的：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/e06d011e.png"/&gt;
&lt;p&gt;X 的應用程序沒有統一的繪圖 API 。GTK+ 在 3.0 之後統一用 &lt;a class="reference external" href="http://cairographics.org/"&gt;Cairo&lt;/a&gt; 繪圖，
而 Cairo 則是基於 PDF 1.4 的繪圖模型構建的，
GTK 的 2.0 和之前的版本中也有很大一部分的繪圖是用 Cairo 進行，
其餘則通過 xlib 或者 xcb 調用 X 核心協議提供的繪圖原語繪圖。
QT 的情況也是類似，基本上用 QPaint 子系統繪製成位圖然後交給 X 的顯示服務器。
顯示服務器拿到這些繪製請求之後，再在屏幕上的相應位置繪製整個屏幕。
當然還有很多老舊的不用 GTK 或者 QT 的程序，他們則直接調用 X 核心協議提供的繪圖原語。&lt;/p&gt;
&lt;p&gt;值得注意一點是 X 上除了沒有統一的繪圖模型，也沒有統一的矢量圖格式。
X 核心協議的繪圖原語提供的是像素單位的繪圖操作，沒有類似 GDI+ 或者 Quartz
提供的 &lt;ruby&gt;&lt;rb&gt;設備無關&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Device Independence&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的「點」的抽象。所以只用 X
的繪圖原語的話，我們可以把 (1,1) 這個像素點塗黑，但是不能把 (0.5, 0.5)
這個點塗黑，這一設計缺陷在
&lt;a class="reference external" href="http://web.mit.edu/~simsong/www/ugh.pdf"&gt;Unix Hater's Handbook&lt;/a&gt;
中已經被吐槽過了。因爲這個缺陷，所以直接用 X 繪圖原語繪製的圖像不能像
矢量圖那樣進行無損縮放。同樣的缺陷導致 X 繪圖原語繪製的字符不能做到
&lt;ruby&gt;&lt;rb&gt;子像素級&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;subpixel-level&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; &lt;ruby&gt;&lt;rb&gt;抗鋸齒&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;anti-aliasing&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
（這解釋了默認配置下的 xterm 和
&lt;a class="reference external" href="http://arch.acgtyrant.com/2015/01/05/I-do-not-recommend-urxvt-again-now/"&gt;urxvt 中的字體渲染爲什麼難看&lt;/a&gt;
）。相比之下 GDI 有對應的 WMF 矢量圖格式， Quartz 有對應的 PDF 矢量圖格式，
而 X 中沒有這樣的格式對應。因爲沒有統一的矢量圖格式，所以無論是 Cairo 、QPaint
還是沒有用這些繪圖庫但是同樣在意字體和曲線渲染效果的程序（比如 Firefox 和
Chromium）都需要首先渲染到內部的 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/X_PixMap"&gt;XPixMap&lt;/a&gt;
位圖格式，做好子像素渲染和矢量縮放，然後再把渲染好的位圖轉交給 X 圖形服務器。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="composite"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;通過 Composite 擴展重定向窗口輸出&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;2004年發佈的 X11R6.8 版本的 Xorg 引入了
&lt;a class="reference external" href="http://freedesktop.org/wiki/Software/CompositeExt/"&gt;Composite 擴展&lt;/a&gt;
。這個擴展背後的動機以及前因後果在一篇文章
&lt;a class="reference external" href="http://keithp.com/~keithp/talks/xarch_ols2004/xarch-ols2004-html/"&gt;The (Re)Architecture of the X Window System&lt;/a&gt;
中有詳細的表述。Composite 擴展允許某個 X 程序做這幾件事情：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;通過 &lt;code class="code"&gt;
RedirectSubwindows&lt;/code&gt;
 調用將一個窗口樹中的所有窗口渲染重定向到
&lt;ruby&gt;&lt;rb&gt;內部存儲&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;off-screen storage&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。重定向的時候可以指定讓 X
自動更新窗口的內容到屏幕上或者由混成器手動更新。&lt;/li&gt;
&lt;li&gt;通過 &lt;code class="code"&gt;
NameWindowPixmap&lt;/code&gt;
 取得某個窗口的內部存儲。&lt;/li&gt;
&lt;li&gt;通過 &lt;code class="code"&gt;
GetOverlayWindow&lt;/code&gt;
 獲得一個特殊的用於繪圖的窗口，
在這個窗口上繪製的圖像將覆蓋在屏幕的最上面。&lt;/li&gt;
&lt;li&gt;通過 &lt;code class="code"&gt;
CreateRegionFromBorderClip&lt;/code&gt;
 取得某個窗口的邊界剪裁區域（不一定是矩形）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有了 Composite 擴展，一個 X 程序就可以調用這些 API 實現混成器。
這裏有篇 &lt;a class="reference external" href="http://www.talisman.org/~erlkonig/misc/x11-composite-tutorial/"&gt;教學解釋如何使用 Composite 擴展&lt;/a&gt; 。開啓了混成的 X 是這樣繪圖的：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/18f7774d.png"/&gt;
&lt;p&gt;整個 X 的混成器模型與 Mac OS X 的混成器模型相比，有如下幾點顯著的區別：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;混成的部分是交由外部的程序完成的，對混成的繪製方式和繪製普通窗口一樣。
出於效率考慮，絕大多數 X 上的混成器額外使用了 XRender 擴展或者
OpenGL/EGL 來加速繪製貼圖。不過即使如此，還是不能避免同樣的位圖（內容不一定完全一致，
比如 X 可以在窗口交給它的位圖上加上邊框然後再返還給混成器） &lt;strong&gt;在不同的三個程序之間來回傳遞&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code class="code"&gt;
RedirectSubwindows&lt;/code&gt;
 調用針對的是一個窗口樹，換句話說是一個窗口
及其全部子窗口，不同於 Mac OS X 中混成器會拿到全部窗口的輸出。
這個特點其實並不算是限制，因爲 X 中每個虛擬桌面都有一個根窗口，只要指定這個根窗口
就可以拿到整個虛擬桌面上的全部可見窗口輸出了。
反而這個設計提供了一定的自由度，比如我們可以用這個調用實現一個截圖程序，
拿到某個特定窗口的輸出，而不用在意別的窗口。&lt;/li&gt;
&lt;li&gt;爲了讓窗口有輸出，窗口必須顯示在當前桌面上，不能處於最小化
狀態或者顯示在別的虛擬桌面，用 X 的術語說就是窗口必須處於 &lt;ruby&gt;&lt;rb&gt;被映射&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;mapped&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
的狀態。因此直接用上述方法 &lt;strong&gt;不能得到沒有顯示的窗口的輸出&lt;/strong&gt; ，比如不能對最小化的窗口
直接實現 Windows 7 中的 Aero Peak 之類的效果。這個限制可以想辦法繞開，
比如在需要窗口輸出的時候臨時把窗口映射到桌面上，拿到輸出之後再隱藏起來，
不過要實現這一點需要混成器和窗口管理器相互配合。&lt;/li&gt;
&lt;li&gt;不像 Mac OS X 的基於 OpenGL Surface 的繪圖模型是 &lt;ruby&gt;&lt;rb&gt;設備無關&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;device independent&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
的，這裏 X 的繪圖模型是 &lt;ruby&gt;&lt;rb&gt;設備相關&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;device dependent&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的。
這既是優點也是缺點。從缺點方面而言，顯示到 X 的位圖輸出因爲設備相關性，
所以嚴格對應顯示器的點陣，並不適合作爲文檔格式打印出來。當然無論是 Cairo
還是 QPaint 都提供了到 PostScript 或者 PDF 後端的輸出，所以實用層面這個並不構成問題。
設備相關這一點的優點在於，繪製到 XPM 位圖的時候，程序和繪圖庫是能拿到輸出設備（顯示器）
的特殊屬性的，從而繪圖庫能考慮不同的色彩、分辨率、 DPI 或者
&lt;ruby&gt;&lt;rb&gt;子像素佈局&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;subpixel layout&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 這些屬性以提供最好的渲染效果。
Mac OS X 10.4 在設計的時候也曾考慮過提供無極縮放的支持，而這種支持到了 Mac OS X
10.5 中就縮水變成了 Retina 的固定 2 倍縮放。這種局面在 X
上沒有發生正是因爲 X 的繪圖模型的這種設備相關性，而 Mac OS X 的混成器採用的
OpenGL Surface 則無視了這些設備相關的屬性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;輸入事件的重定向，這可能做到麼？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通過上述 Composite 擴展提供的 API ，混成器可以把窗口的 &lt;strong&gt;輸出&lt;/strong&gt; 重定向到自己的窗口上。
但是僅僅重定向輸出，整個 X 還不處於可用狀態，因爲 &lt;strong&gt;沒有重定向輸入&lt;/strong&gt; 。
考慮一下用戶試圖用鼠標點擊某個按鈕或者文本框，這時鼠標處於的位置是在 OverlayWindow
上繪製的位置，這個鼠標事件會交給 OverlayWindow ，而用戶期待這個事件被發送給他看到的按鈕上。&lt;/p&gt;
&lt;p&gt;需要重定向的事件主要有鍵盤和鼠標事件兩大類（暫時先不考慮觸摸屏之類的額外輸入）。
由於 Composite 擴展並沒有直接提供這方面的重定向 API ，這使得輸入事件處理起來都比較麻煩，&lt;/p&gt;
&lt;p&gt;假設要重定向鍵盤事件，混成器需要效仿輸入法框架（fcitx, ibus, scim）
那樣處理一部分按鍵事件並把其餘事件轉給具有輸入焦點的程序。
看看現有的輸入法框架和諸多程序間的問題，我們就能知道這裏的坑有多深。
於是 &lt;strong&gt;大部分 X 的混成器都不處理鍵盤事件重定向&lt;/strong&gt;
。再來看重定向鼠標事件，這邊的坑比重定向鍵盤事件的坑更多，
因爲不像重定向窗口輸出那樣只需要考慮 &lt;ruby&gt;&lt;rb&gt;頂層&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;top-level&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 窗口，
重定向鼠標輸入的時候要考慮所有子窗口（它們有獨立的事件隊列），
以及要準確記錄輸入事件事件發生時的鍵盤組合鍵狀態，還要正確實現 ICCCM/EWMH
中描述的轉交窗口焦點的複雜規則，所有這些都已經在 X 中實現過的事情需要重新實現一遍。&lt;/p&gt;
&lt;p&gt;由於坑太多難以實現，所以所有 X 下的混成器的實現方式都是直接忽略這個繁重的任務，
&lt;strong&gt;不重定向輸入事件&lt;/strong&gt; 而把它交給 X 處理。具體的實現方式就是通過
&lt;a class="reference external" href="http://freedesktop.org/wiki/Software/FixesExt/"&gt;XFixes&lt;/a&gt;
擴展提供的 &lt;code class="code"&gt;
SetWindowShapeRegion&lt;/code&gt;
 API 將 OverlayWindow 的 &lt;strong&gt;輸入區域&lt;/strong&gt;
&lt;code class="code"&gt;
ShapeInput&lt;/code&gt;
 設爲空區域，從而忽略對這個 OverlayWindow 的一切鼠標鍵盤事件。
這樣一來對 OverlayWindow 的點擊會透過 OverlayWindow 直接作用到底下的窗口上。&lt;/p&gt;
&lt;p&gt;因爲選擇了不重定向輸入事件， X 下的混成器通常會處於以下兩種狀態：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;選擇狀態下可以縮放窗口的大小，扭曲窗口的形狀，並且可以把窗口繪製在任意想要繪製的位置上
（並不是移動窗口的位置）， &lt;strong&gt;但是不能讓用戶與窗口的內容交互&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;正常狀態下可以讓用戶與窗口的內容交互，但是
&lt;strong&gt;繪製的窗口位置、大小和形狀必須嚴格地和 X 記錄的窗口的位置、大小和形狀保持一致&lt;/strong&gt;
。持續時間短暫的動畫效果可以允許位置和形狀稍有偏差，但是在動畫的過程中如果用戶點擊了
變形縮放過的窗口，那麼鼠標事件將發往錯誤的（ X 記錄中的而非顯示出的）窗口元素上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以發現這兩種狀態就直接對應了 Gnome 3 的普通狀態和縮略圖狀態（點擊 &lt;ruby&gt;&lt;rb&gt;活動&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Activity&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
或者戳畫面左上角之後顯示的狀態），這也解釋了爲什麼儘管 Gnome 3
的窗口有碩大的關閉按鈕，但是在縮略圖狀態下 Gnome 3 仍然需要給窗口加上額外的關閉按鈕：
&lt;strong&gt;因爲處於縮略狀態下的窗口只是一張畫而不能點&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;Composite 擴展的這些限制使得 X 下的混成器目前只能實現 Mac OS X 那樣的 Exposé
效果，而不能實現 &lt;a class="reference external" href="//farseerfc.me/brief-history-of-compositors-in-desktop-os.html#project-looking-glass-3d"&gt;LG3D&lt;/a&gt; 那樣直接在 3D 空間中操縱窗口內容。&lt;/p&gt;
&lt;p&gt;解決重定向問題曾經的一縷曙光是 &lt;ruby&gt;&lt;rb&gt;昇陽公司&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Sun Microsystems&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 在開發 &lt;a class="reference external" href="//farseerfc.me/brief-history-of-compositors-in-desktop-os.html#project-looking-glass-3d"&gt;LG3D&lt;/a&gt; 的過程中同時提議過另一個 X
擴展叫做 Event Interception 或者簡稱 &lt;a class="reference external" href="http://freedesktop.org/wiki/Software/XEvIE/"&gt;XEvIE&lt;/a&gt; ，這個擴展的設計目的就是提供 API
讓某個程序接收並操縱全部的鍵盤和鼠標事件。可惜這個擴展隨着昇陽公司本身的隕落而
處於無人維護的狀態，這一點也在它的官方網頁上說明了：&lt;/p&gt;
&lt;blockquote&gt;
It has been suggested that this extension should not be used
because it is broken and maintainerless.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Composite 擴展的不足&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通過上面的介紹，我們就已經可以看到 Composite 擴展的不足之處了。
總結起來說，主要有兩大不足：&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;繪圖效率低。因爲同樣的位圖從應用程序傳到 Xorg ，再從 Xorg 傳到混成器，
最後從混成器再繪製到屏幕上，繞了一個大彎。這就是爲什麼 Wayland 的開發者在他的slide
&lt;a class="reference external" href="http://people.freedesktop.org/~daniels/lca2013-wayland-x11.pdf"&gt;the real story behind Wayland and X&lt;/a&gt;
裏這麼說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;and what's the X server? really bad IPC&lt;/p&gt;
&lt;p&gt;那麼 X 服務器到底做了什麼呢？ 非常糟糕的進程間通訊&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;沒有重定向輸入事件。如果我們要在 X 的混成器裏做這個事情，
基本上我們要全部重寫一遍 X 已經寫好的窗口事件分發邏輯。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然同樣要重寫，爲什麼不直接重寫一遍 X 呢，扔掉那些歷史負擔，扔掉那些無用的 API
，重新設計可擴展的 API ，做好快速安全的 IPC —— 嗯，重寫 X 就是 Wayland 的目的。&lt;/p&gt;
&lt;p&gt;不過這麼重寫了的 Wayland 還是我們熟悉可愛的 X 麼？它有哪些地方變樣了？
這將是我下一篇文章的內容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;附錄：擴展閱讀&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我自己沒有寫過窗口管理器，沒有寫過混成器，沒有寫過 Wayland
程序，以上說的都是我從互聯網上看到的整理出來的內容。寫下本文的過程中我參考了這些文章：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://keithp.com/~keithp/talks/xarch_ols2004/xarch-ols2004-html/"&gt;The (Re)Architecture of the X Window System&lt;/a&gt; 這篇2004年寫的文章描述了 Composite
擴展出現的動機和歷史，介紹了繪圖庫的實現情況，涉及了上面所說的那些 X 擴展被用到的情況和可能。
同時這篇文章還展望了很多現在的 X 已然實現了的功能，比如 OpenGL 和 X 的結合方面我們有了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/GLX"&gt;GLX&lt;/a&gt; 和 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/AIGLX"&gt;AIGLX&lt;/a&gt;
，比如內核的顯卡支持方面我們有了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Direct_Rendering_Infrastructure"&gt;DRI&lt;/a&gt; 和 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Mode_setting"&gt;KMS&lt;/a&gt; 。總之這是一篇描述 Linux
桌面未來的發展軌跡的非常有閱讀價值的歷史文獻。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wingolog.org/archives/2008/07/26/so-you-want-to-build-a-compositor"&gt;so you want to build a compositor&lt;/a&gt; 這是一篇 2008 年寫的博文，介紹如何用 Clutter
實現一個最簡單的混成器。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.talisman.org/~erlkonig/misc/x11-composite-tutorial/"&gt;Composite tutorial&lt;/a&gt; 這是另一篇介紹如何實現一個簡單的混成器的博文，用 Qt 實現，但是同樣很底層。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://projects.mini-dweeb.org/projects/unagi"&gt;unagi&lt;/a&gt; 這是一個可用的（但是已經長期沒有開發的）類似 xcompmgr 的混成器。這個項目貌似
是一位研究生的碩士畢業設計，同時他公開了碩士學位的畢業論文
&lt;a class="reference external" href="http://projects.mini-dweeb.org/attachments/download/3/report.pdf"&gt;Master thesis: Writing an X compositing manager&lt;/a&gt;
其中也對實現一個簡單的混成器做了詳盡描述，包括介紹了相關的 X 擴展和調用。&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="linux"></category><category term="wayland"></category><category term="xorg"></category><category term="compositor"></category></entry><entry><title>桌面系統的混成器簡史</title><link href="//farseerfc.me/brief-history-of-compositors-in-desktop-os.html" rel="alternate"></link><published>2015-03-19T13:45:00+09:00</published><updated>2015-03-19T13:45:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-03-19:/brief-history-of-compositors-in-desktop-os.html</id><summary type="html">
&lt;p&gt;（原本是想寫篇關於 Wayland 的文章，後來越寫越長感覺能形成一個系列，
於是就先把這篇背景介紹性質的部分發出來了。）&lt;/p&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Linux 系統上要迎來 Wayland 了，或許大家能從各種渠道打聽到 Wayland
是一個混成器，替代 X 作爲顯示服務器。
那麼 &lt;strong&gt;混成器&lt;/strong&gt; 是個什麼東西，桌面系統爲什麼需要它呢？
要理解爲什麼桌面系統需要 &lt;strong&gt;混成器&lt;/strong&gt; （或者它的另一個叫法，
&lt;ruby&gt;&lt;rb&gt;混成窗口管理器&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Compositing Window Manager&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
），在這篇文章中我想回顧一下歷史，
瞭解一下混成器出現的前因後果。&lt;/p&gt;
&lt;p&gt;首先介紹一下混成器出現前主要的一類窗口管理器，也就是
&lt;ruby&gt;&lt;rb&gt;棧式窗口管理器&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Stacking Window Manager&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的實現方式。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="label label-warning"&gt;
本文中所有桌面截圖來自維基百科，不具有著作權保護。&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;早期的棧式窗口管理器&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
棧式窗口管理器的例子，Windows 3.11 的桌面&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="棧式窗口管理器的例子，Windows 3.11 的桌面" class="img-responsive" src="//farseerfc.me/images/Windows_3.11_workspace.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;我們知道最初圖形界面的應用程序是全屏的，獨佔整個顯示器（現在很多遊戲機和手持設備的實現仍舊如此）。
所有程序都全屏並且任何時刻只能看到一個程序的輸出，這個限制顯然不能滿足人們使用計算機的需求，
於是就有了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/WIMP_(computing)"&gt;窗口 …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;（原本是想寫篇關於 Wayland 的文章，後來越寫越長感覺能形成一個系列，
於是就先把這篇背景介紹性質的部分發出來了。）&lt;/p&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Linux 系統上要迎來 Wayland 了，或許大家能從各種渠道打聽到 Wayland
是一個混成器，替代 X 作爲顯示服務器。
那麼 &lt;strong&gt;混成器&lt;/strong&gt; 是個什麼東西，桌面系統爲什麼需要它呢？
要理解爲什麼桌面系統需要 &lt;strong&gt;混成器&lt;/strong&gt; （或者它的另一個叫法，
&lt;ruby&gt;&lt;rb&gt;混成窗口管理器&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Compositing Window Manager&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
），在這篇文章中我想回顧一下歷史，
瞭解一下混成器出現的前因後果。&lt;/p&gt;
&lt;p&gt;首先介紹一下混成器出現前主要的一類窗口管理器，也就是
&lt;ruby&gt;&lt;rb&gt;棧式窗口管理器&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Stacking Window Manager&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的實現方式。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="label label-warning"&gt;
本文中所有桌面截圖來自維基百科，不具有著作權保護。&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;早期的棧式窗口管理器&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
棧式窗口管理器的例子，Windows 3.11 的桌面&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="棧式窗口管理器的例子，Windows 3.11 的桌面" class="img-responsive" src="//farseerfc.me/images/Windows_3.11_workspace.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;我們知道最初圖形界面的應用程序是全屏的，獨佔整個顯示器（現在很多遊戲機和手持設備的實現仍舊如此）。
所有程序都全屏並且任何時刻只能看到一個程序的輸出，這個限制顯然不能滿足人們使用計算機的需求，
於是就有了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/WIMP_(computing)"&gt;窗口&lt;/a&gt;
的概念，有了 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Desktop_metaphor"&gt;桌面隱喻&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;在 &lt;ruby&gt;&lt;rb&gt;桌面隱喻&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Desktop Metaphor&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 中每個窗口只佔用顯示面積的一小部分，
有其顯示的位置和大小，可以互相遮蓋。於是棧式窗口管理器就是在圖形界面中實現桌面隱喻的核心功能，
其實現方式大體就是：給每個窗口一個相對的“高度”或者說“遠近”，比較高的窗口顯得距離用戶比較近，
會覆蓋其下比較低的窗口。繪圖的時候窗口管理器會從把窗口按高低排序，按照從低到高的順序使用
&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E7%94%BB%E5%AE%B6%E7%AE%97%E6%B3%95"&gt;畫家算法&lt;/a&gt;
繪製整個屏幕。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;這裏還要補充一點說明，在當時圖形界面的概念剛剛普及的時候，繪圖操作是非常“昂貴”的。
可以想象一下 800x600 像素的顯示器輸出下，每幀
&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E7%9C%9F%E5%BD%A9%E8%89%B2"&gt;真彩色&lt;/a&gt;
位圖就要佔掉 &lt;span class="math"&gt;\(800 \times 600 \times 3 \approx 1.4 \text{MiB}\)&lt;/span&gt; 的內存大小，30Hz
的刷新率（也就是30FPS）下每秒從 CPU 傳往繪圖設備的數據單單位圖就需要
&lt;span class="math"&gt;\(1.4 \times 30 = 41 \text{MiB}\)&lt;/span&gt; 的帶寬。對比一下當時的
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/VESA_Local_Bus"&gt;VESA 接口&lt;/a&gt; 總的數據傳輸能力也就是
&lt;span class="math"&gt;\(25 \text{MHz} \times 32 \text{bits} = 100 \text{MiB/s}\)&lt;/span&gt; 左右，
而 Windows 3.1 的最低內存需求是 1MB，對當時的硬件而言無論是顯示設備、內存或是CPU，
這無疑都是一個龐大的負擔。&lt;/p&gt;
&lt;p&gt;於是在當時的硬件條件下採用棧式窗口管理器有一個巨大 &lt;strong&gt;優勢&lt;/strong&gt; ：如果正確地採用畫家算法，
並且合理地控制重繪時 &lt;strong&gt;只繪製沒有被別的窗口覆蓋的部分&lt;/strong&gt; ，那麼無論有多少窗口互相
遮蓋，都可以保證每次繪製屏幕的最大面積不會超過整個顯示器的面積。
同樣因爲實現方式棧式窗口管理器也有一些難以迴避的 &lt;strong&gt;限制&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;窗口必須是矩形的，不能支持不規則形狀的窗口。&lt;/li&gt;
&lt;li&gt;不支持透明或者半透明的顏色。&lt;/li&gt;
&lt;li&gt;爲了優化效率，在縮放窗口和移動窗口的過程中，窗口的內容不會得到重繪請求，
必須等到縮放或者移動命令結束之後窗口纔會重繪。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上這些限制在早期的 X11 窗口管理器比如 twm 以及 XP 之前經典主題的 Windows
或者經典的 Mac OS 上都能看到。
在這些早期的窗口環境中，如果你拖動或者縮放一個窗口，那麼將顯示變化後的窗口邊界，
這些用來預覽的邊界用快速的位圖反轉方式繪製。當你放開鼠標的時候纔會觸發窗口的
重繪事件。
雖然有很多方法或者說技巧能繞過這些限制，比如 Windows XP 上就支持了實時的
重繪事件和不規則形狀的窗口剪裁，不過這些技巧都是一連串的 hack ，難以擴展。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nextstep-mac-os-x"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;NeXTSTEP 與 Mac OS X 中混成器的發展&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
NeXTSTEP 桌面&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="NeXTSTEP 桌面" class="img-responsive" src="//farseerfc.me/images/NeXTSTEP_desktop.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;轉眼進入了千禧年， Windows 稱霸了 PC 產業，蘋果爲重振 Macintosh 請回了 Jobs 基於 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/NeXTSTEP"&gt;NeXTSTEP&lt;/a&gt;
開發 Mac OSX 。&lt;/p&gt;
&lt;p&gt;NeXTSTEP 在當時提供的 GUI 界面技術相比較於同年代的 X 和 Windows 有一個很特別的地方：
拖動滾動條或者移動窗口的時候，窗口的內容是 &lt;strong&gt;實時更新&lt;/strong&gt; 的，這比只顯示一個縮放大小的框框來說被認爲更直觀。
而實現這個特性的基礎是在 NeXTSTEP 中運用了
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Display_PostScript"&gt;Display PostScript (DPS)&lt;/a&gt;
技術，簡單地說，就是每個窗口並非直接輸出到顯示設備，而是把內容輸出到 (Display) PostScript
格式交給窗口管理器，然後窗口管理器再在需要的時候把 PostScript 用軟件解釋器解釋成位圖顯示在屏幕上。&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/8d293c10.png"/&gt;
&lt;p&gt;比起讓窗口直接繪製，這種方案在滾動和移動窗口的時候不需要重新渲染保存好的 DPS ，
所以能實現實時渲染。到了實現 Mac OS X 的時候，爲了同時兼容老的 Mac 程序 API (carbon)
以及更快的渲染速度，以及考慮到 Adobe 對蘋果收取的高昂的 Display PostScript 授權費，
Mac OS X 的 Quartz 技術在矢量圖的 PDF 描述模型和最終渲染之間又插入了一層抽象：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/5807c26a.png"/&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Mission Control&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Mission Control" class="img-responsive" src="//farseerfc.me/images/Mac_OS_X_Lion_Preview_-_Mission_Control.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;也就是說在 Mac OS X 中無論窗口用何種方式繪圖，都會繪製輸出成一副內存中的位圖交給混成器，
而後者再在需要的時候將位圖混成在屏幕上。這種設計使得 2001年3月發佈的 Mac OS X v10.0
成爲了第一個廣泛使用的具有軟件混成器的操作系統。&lt;/p&gt;
&lt;p&gt;到了 Mac OS X v10.2 的時候，蘋果又引入了 Quartz Extreme 讓最後的混成渲染這一步發生在
顯卡上。然後在 2003年1月公開亮相的 Mac OS X v10.3 中，他們公佈了 Exposé (後來改名爲
Mission Control) 功能，把窗口的縮略圖（而不是事先繪製的圖標）並排顯示在桌面上，
方便用戶挑選打開的窗口。&lt;/p&gt;
&lt;p&gt;由於有了混成器的這種實現方式，使得可能把窗口渲染的圖像做進一步加工，添加陰影、三維和動畫效果。
這使得 Mac OS X 有了美輪美奐的動畫效果和 Exposé 這樣的方便易用的功能。
或許對於喬布斯而言，更重要的是因爲有了混成器，窗口的形狀終於能顯示爲他
&lt;a class="reference external" href="http://www.folklore.org/StoryView.py?story=Round_Rects_Are_Everywhere.txt"&gt;夢寐以求&lt;/a&gt;
的 &lt;a class="reference external" href="http://www.uiandus.com/blog/2009/7/26/realizations-of-rounded-rectangles.html"&gt;圓角矩形&lt;/a&gt;
了！&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="project-looking-glass-3d"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;插曲：曇花一現的 Project Looking Glass 3D&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在蘋果那邊剛剛開始使用混成器渲染窗口的 2003 年，昔日的 &lt;ruby&gt;&lt;rb&gt;昇陽公司&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Sun Microsystems&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
則在 Linux 和 Solaris 上用 Java3D 作出了另一個炫酷到沒有朋友的東西，被他們命名爲
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Project_Looking_Glass"&gt;Project Looking Glass 3D&lt;/a&gt;
（縮寫LG3D，別和 Google 的 Project Glass 混淆呀）。這個項目的炫酷實在難以用言語描述，
好在還能找到兩段視頻展示它的效果。&lt;/p&gt;
&lt;div class="well" style="padding: 0"&gt;
&lt;div class="tab-content" id="youtubeku"&gt;
&lt;div class="tab-pane fade active in" id="youtube_JXv8VlpoK_g"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/JXv8VlpoK_g"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class="tab-pane fade" id="youku_XOTEzMzM3MTY0"&gt;
&lt;div align="left" class="youku embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" height="498" src="https://player.youku.com/embed/XOTEzMzM3MTY0" width="510"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="nav nav-tabs"&gt;
&lt;li class="active"&gt;&lt;a data-toggle="tab" href="#youtube_JXv8VlpoK_g"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle="tab" href="#youku_XOTEzMzM3MTY0"&gt;Youku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="well" style="padding: 0"&gt;
&lt;div class="tab-content" id="youtubeku"&gt;
&lt;div class="tab-pane fade active in" id="youtube_zcPIEMvyPy4"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/zcPIEMvyPy4"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class="tab-pane fade" id="youku_XOTEzMzQwMjky"&gt;
&lt;div align="left" class="youku embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" height="498" src="https://player.youku.com/embed/XOTEzMzQwMjky" width="510"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="nav nav-tabs"&gt;
&lt;li class="active"&gt;&lt;a data-toggle="tab" href="#youtube_zcPIEMvyPy4"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle="tab" href="#youku_XOTEzMzQwMjky"&gt;Youku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
LG3D&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="LG3D" class="img-responsive" src="//farseerfc.me/images/LG3D.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;如視頻中展示的那樣， LG3D 完全突破了傳統的棧式窗口管理方式，
在三維空間中操縱二維的窗口平面，不僅像傳統的窗口管理器那樣可以縮放和移動窗口，
還能夠旋轉角度甚至翻轉到背面去。從視頻中難以體會到的一點是， LG3D 在實現方式上與
Mac OS X 中的混成器有一個本質上的不同，那就是處於（靜止或動畫中）縮放或旋轉狀態
下的窗口是 &lt;strong&gt;可以接受輸入事件&lt;/strong&gt; 的。這一重要區別在後面 Wayland 的說明中還會提到。
LG3D 項目展示了窗口管理器將如何突破傳統的棧式管理的框架，可以說代表了窗口管理器的未來發展趨勢。&lt;/p&gt;
&lt;p&gt;LG3D 雖然以 GPL 放出了實現的源代碼，不過整個項目已經停滯開發許久了。
官方曾經放出過一個
&lt;a class="reference external" href="http://sourceforge.net/projects/lg3d-livecd/"&gt;預覽版的 LiveCD&lt;/a&gt;
。可惜時隔久遠（12年前了）在我的 VirtualBox 上已經不能跑起來這個 LiveCD 了……&lt;/p&gt;
&lt;p&gt;更爲可惜的是，就在這個項目剛剛公開展示出來的時候，喬布斯就致電昇陽，
說如果繼續商業化這個產品，昇陽公司將涉嫌侵犯蘋果的知識產權
（時間順序上來看，蘋果最初展示 Exposé 是在 2003年6月23日的
Apple Worldwide Developers Conference ，而昇陽最初展示
LG3D 是在 2003年8月5日的 LinuxWorld Expo）。
雖然和喬布斯的指控無關，昇陽公司本身的業務也着重於服務器端的業務，
後來隨着昇陽的財政困難，這個項目也就停止開發並不了了之了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="windows"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Windows 中的混成器&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Longhorn 中的 Wobbly 效果&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div class="well" style="padding: 0"&gt;
&lt;div class="tab-content" id="youtubeku"&gt;
&lt;div class="tab-pane fade active in" id="youtube_X0idaN0MY1U"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/X0idaN0MY1U"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class="tab-pane fade" id="youku_XOTEzMzY5NjQ0"&gt;
&lt;div align="left" class="youku embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" height="498" src="https://player.youku.com/embed/XOTEzMzY5NjQ0" width="510"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="nav nav-tabs"&gt;
&lt;li class="active"&gt;&lt;a data-toggle="tab" href="#youtube_X0idaN0MY1U"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle="tab" href="#youku_XOTEzMzY5NjQ0"&gt;Youku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;上面說到， Windows 系列中到 XP 爲止都還沒有使用混成器繪製窗口。
看着 Mac OS X 上有了美輪美奐的動畫效果， Windows 這邊自然不甘示弱。
於是同樣在 2003 年展示的 Project Longhorn 中就演示了 wobbly 效果的窗口，
並且跳票推遲多年之後的 Windows Vista 中實現了完整的混成器
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Desktop_Window_Manager"&gt;Desktop Window Manager (DWM)&lt;/a&gt;
。整個 DWM 的架構和 Mac OS X 上看到的很像：&lt;/p&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/1763baf6.png"/&gt;
&lt;p&gt;和 Mac OS X 的情況類似， Windows Vista 之後的應用程序有兩套主要的繪圖庫，一套是從早期
Win32API 就沿用至今的 GDI（以及GDI+），另一套是隨着 Longhorn 計劃開發出的 WPF 。
WPF 的所有用戶界面控件都繪製在 DirectX 貼圖上，所以使用了 WPF 的程序也可以看作是
DirectX 程序。而對老舊的 GDI 程序而言，它們並不是直接繪製到 DirectX 貼圖的。首先每一個
GDI 的繪圖操作都對應一條
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Windows_Metafile"&gt;Windows Metafile (WMF)&lt;/a&gt;
記錄，所以 WMF 就可以看作是 Mac OS X 的 Quartz 內部用的 PDF 或者 NeXTSTEP 內部用的
DPS，它們都是矢量圖描述。隨後，這些 WMF 繪圖操作被通過一個
Canonical Display Driver (cdd.dll) 的內部組建轉換到 DirectX 平面，並且保存起來交給
DWM。最後， DWM 拿到來自 CDD 或者 DirectX 的平面，把它們混合起來繪製在屏幕上。&lt;/p&gt;
&lt;p&gt;值得注意的細節是，WPF 底層的繪圖庫幾乎肯定有 C/C++ 綁定對應， Windows 自帶的不少應用程序
和 Office 2007 用了 Ribbon 之後的版本都採用這套繪圖引擎，不過微軟沒有公開這套繪圖庫的
C/C++ 實現的底層細節，而只能通過 .Net 框架的 WPF 訪問它。這一點和 OS X 上只能通過
Objective-C 下的 Cocoa API 調用 Quartz 的情況類似。&lt;/p&gt;
&lt;p&gt;另外需要注意的細節是 DirectX 的單窗口限制在 Windows Vista 之後被放開了，或者嚴格的說是
基於 WDDM 規範下的顯卡驅動支持了多個 DirectX 繪圖平面。
在早期的 Windows 包括 XP 上，整個桌面上同一時刻只能有一個程序的窗口處於 DirectX 的
&lt;strong&gt;直接繪製&lt;/strong&gt; 模式，而別的窗口如果想用 DirectX 的話，要麼必須改用軟件渲染要麼就不能工作。
這種現象可以通過打開多個播放器或者窗口化的遊戲界面觀察到。
而在 WDDM 規範的 Vista 中，所有窗口最終都繪製到 DirectX 平面上，換句話說每個窗口都是
DirectX 窗口。又或者我們可以認爲，整個界面上只有一個真正的窗口也就是 DWM 繪製的全屏窗口，
只有 DWM 處於 DirectX 的直接渲染模式下，而別的窗口都輸出到 DirectX 平面裏（可能通過了硬件加速）。&lt;/p&gt;
&lt;p&gt;由 DWM 的這種實現方式，可以解釋爲什麼
&lt;a class="reference external" href="http://gaming.stackexchange.com/questions/13066/why-is-windowed-mode-always-slower-in-games"&gt;窗口模式下的遊戲總是顯得比較慢&lt;/a&gt;
，原因是整個桌面有很多不同的窗口都需要 DWM 最後混成，而如果在全屏模式下，只有遊戲
處於 DirectX 的直接渲染方式，從而不會浪費對遊戲而言寶貴的 GPU 資源。&lt;/p&gt;
&lt;p&gt;由於 DWM 實現了混成器，使得 Vista 和隨後的 Windows 7 有了
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Windows_Aero"&gt;Aero Glass&lt;/a&gt; 的界面風格，
有了 Flip 3D 、Aero Peek 等等的這些輔助功能和動畫效果。
這套渲染方式延續到 Windows 8 之後，雖然 Windows 8 還提出了 Modern UI
不過傳統桌面上的渲染仍舊是依靠混成器來做的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linux"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id15"&gt;這就結束了？ Linux 桌面呢？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;別急，我寫這些文章的目的是想聊聊 Linux 中的混成器，尤其是 X 下現有的混成器和 Wayland
，這篇文章只是個背景介紹。關於 X 中混成器的實現方式和限制，且聽我下回分解。&lt;/p&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="tech"></category><category term="desktop"></category><category term="compositor"></category><category term="macosx"></category><category term="windows"></category><category term="window"></category><category term="manager"></category></entry><entry><title>用 Travis-CI 生成 Github Pages 博客</title><link href="//farseerfc.me/travis-push-to-github-pages-blog.html" rel="alternate"></link><published>2015-02-20T11:10:00+09:00</published><updated>2015-02-20T11:10:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-02-20:/travis-push-to-github-pages-blog.html</id><summary type="html">
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月21日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;上次介紹過 &lt;a class="reference external" href="//farseerfc.me/redesign-pelican-theme.html"&gt;這個博客改換了主題&lt;/a&gt; ，
本以爲這個話題可以告一段落了，沒想到還能繼續寫呢。&lt;/p&gt;
&lt;p&gt;寄宿在 Github Pages 上的靜態博客通常有兩種方案，其一是使用 &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 方式撰寫，這可以利用
Github Pages 原本就有的
&lt;a class="reference external" href="https://help.github.com/articles/using-jekyll-with-pages/"&gt;Jekyll支持&lt;/a&gt;
生成靜態網站。另一種是在 &lt;strong&gt;本地&lt;/strong&gt; 也就是自己的電腦上生成好，然後把生成的 HTML 網站 push
到 Github Pages ，這種情況下 Github Pages 就完全只是一個靜態頁面宿主環境。&lt;/p&gt;
&lt;p&gt;我用 &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 生成博客，當然就只能選擇後一種方式了。這帶來一些不便，比如本地配置 pelican
還是有一點點複雜的，所以不能隨便找臺電腦就開始寫博客。有的時候只是想修正一兩個錯別字，
這時候必須打開某臺特定的電腦纔能編輯博客就顯得不太方便了。再比如 pelican 本身雖然是 python
寫的所以跨平臺，但是具體到博客的配置方面， Windows …&lt;/p&gt;</summary><content type="html">
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月21日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;上次介紹過 &lt;a class="reference external" href="//farseerfc.me/redesign-pelican-theme.html"&gt;這個博客改換了主題&lt;/a&gt; ，
本以爲這個話題可以告一段落了，沒想到還能繼續寫呢。&lt;/p&gt;
&lt;p&gt;寄宿在 Github Pages 上的靜態博客通常有兩種方案，其一是使用 &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 方式撰寫，這可以利用
Github Pages 原本就有的
&lt;a class="reference external" href="https://help.github.com/articles/using-jekyll-with-pages/"&gt;Jekyll支持&lt;/a&gt;
生成靜態網站。另一種是在 &lt;strong&gt;本地&lt;/strong&gt; 也就是自己的電腦上生成好，然後把生成的 HTML 網站 push
到 Github Pages ，這種情況下 Github Pages 就完全只是一個靜態頁面宿主環境。&lt;/p&gt;
&lt;p&gt;我用 &lt;a class="reference external" href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 生成博客，當然就只能選擇後一種方式了。這帶來一些不便，比如本地配置 pelican
還是有一點點複雜的，所以不能隨便找臺電腦就開始寫博客。有的時候只是想修正一兩個錯別字，
這時候必須打開某臺特定的電腦纔能編輯博客就顯得不太方便了。再比如 pelican 本身雖然是 python
寫的所以跨平臺，但是具體到博客的配置方面， Windows 環境和 Linux/OSX/Unix-like
環境下還是有
&lt;a class="reference external" href="http://pelican.readthedocs.org/en/latest/settings.html#date-format-and-locale"&gt;些許出入&lt;/a&gt;
的。還有就是沒有像 wordpress 那樣的基於 web
的編輯環境，在手機上就不能隨便寫一篇博客發表出來（不知道有沒有勇士嘗試過在
Android 的 &lt;a class="reference external" href="https://code.google.com/p/android-scripting/"&gt;SL4A&lt;/a&gt; 環境下的 python 中跑 pelican ，還要配合一個
&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.romanenco.gitt"&gt;Android 上的 git 客戶端&lt;/a&gt; ）。&lt;/p&gt;
&lt;p&gt;當然並不是因此就束手無策了，感謝 &lt;a class="reference external" href="https://travis-ci.org/"&gt;Travis-CI&lt;/a&gt; 提供了免費的
&lt;ruby&gt;&lt;rb&gt;持续整合&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Continuous integration&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 虛擬機環境，
通過它全自動生成靜態博客成爲了可能。&lt;/p&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;關於 Travis-CI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zh.wikipedia.org/wiki/%E6%8C%81%E7%BA%8C%E6%95%B4%E5%90%88"&gt;持续整合&lt;/a&gt;
原本是 &lt;ruby&gt;&lt;rb&gt;敏捷開發&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Agile Development&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
或者 &lt;ruby&gt;&lt;rb&gt;極限編程&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Extreme Programming&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 中提到的概念，大意就是說在開發的過程中，
一旦有微小的變更，就全自動地 &lt;strong&gt;持續&lt;/strong&gt; 合併到主線中， &lt;strong&gt;整合&lt;/strong&gt; 變更的內容到發佈版本裏。
這裏的 &lt;strong&gt;整合&lt;/strong&gt; 實際上可以理解爲 &lt;strong&gt;全自動測試&lt;/strong&gt; 加上 &lt;strong&gt;生成最終產品&lt;/strong&gt; 。
可以看到 &lt;strong&gt;持續整合&lt;/strong&gt; 實際強調 &lt;strong&gt;全自動&lt;/strong&gt; ，於是需要有一個服務器不斷地監聽主線開發的變更內容，
一旦有任何變更（可以理解爲 git commit ）就自動調用測試和部署腳本。&lt;/p&gt;
&lt;p&gt;於是要用持續整合就需要一個整合服務器，幸而 Travis-CI 對 github 上的公開 repo
提供了免費的整合服務器虛擬機服務，和 github 的整合非常自然。所以我們就可以用它提供的虛擬機
爲博客生成靜態網站。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;啓用 Travis-CI 自動編譯&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這一步很簡單，訪問 &lt;a class="reference external" href="https://travis-ci.org/"&gt;https://travis-ci.org/&lt;/a&gt; 並用你的 Github 賬戶登錄，
授權它訪問你的賬戶信息就可以了。然後在 &lt;a class="reference external" href="https://travis-ci.org/repositories"&gt;https://travis-ci.org/repositories&lt;/a&gt; 裏開啓
需要編譯的 repo ，這樣 Travis-CI 就會監視對這個 repo 的所有 push 操作，並且對
每個 push 調用測試了。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="在 Travis-CI 中開啓對 Github Repo 的持續整合" class="img-responsive" src="//farseerfc.me/images/travis-repo-enable.png"/&gt;
&lt;p class="caption"&gt;在 Travis-CI 中開啓對 Github Repo 的持續整合&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然後在 repo 的根目錄放一個 &lt;code class="code"&gt;
.travis.yml&lt;/code&gt;
 文件描述編譯的步驟。
&lt;strong&gt;暫時&lt;/strong&gt; 測試的目的下我寫的 &lt;code class="code"&gt;
.travis.yml&lt;/code&gt;
 大概是下面這樣。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;python&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"2.7"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;before_install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo apt-add-repository ppa:chris-lea/node.js -y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo apt-get update&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo apt-get install nodejs ditaa doxygen parallel&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo pip install pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo pip install jinja2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo pip install babel&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo pip install beautifulsoup4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo pip install markdown&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo npm install -g less&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;wget "http://downloads.sourceforge.net/project/plantuml/plantuml.jar?r=&amp;amp;ts=1424308684&amp;amp;use_mirror=jaist" -O plantuml.jar&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo mkdir -p /opt/plantuml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo cp plantuml.jar /opt/plantuml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo "#! /bin/sh" &amp;gt; plantuml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo 'exec java -jar /opt/plantuml/plantuml.jar "$@"' &amp;gt;&amp;gt; plantuml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo install -m 755 -D plantuml /usr/bin/plantuml&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;wget https://bintray.com/artifact/download/byvoid/opencc/opencc-1.0.2.tar.gz&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tar xf opencc-1.0.2.tar.gz&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd opencc-1.0.2 &amp;amp;&amp;amp; make &amp;amp;&amp;amp; sudo make install &amp;amp;&amp;amp; cd ..&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo locale-gen zh_CN.UTF-8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo locale-gen zh_HK.UTF-8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo locale-gen en_US.UTF-8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo locale-gen ja_JP.UTF-8&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git clone --depth 1 https://github.com/farseerfc/pelican-plugins plugins&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git clone --depth 1 https://github.com/farseerfc/pelican-bootstrap3 theme&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mkdir output&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;env SITEURL="farseerfc.me" make publish&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Travis-CI 提供的虛擬機是比較標準的 Ubuntu 12.04 LTS ，打上了最新的補丁，並且根據你指定的
語言選項會把相應的解釋器和編譯器升級到最新版（或者指定的版本）。這裏用 python 語言的配置，
所以 python 是 2.7 的最新版並且有 pip 可以直接用。
配置中的 before_install 和 install 的區別其實不大，其中任何一個失敗的話算作
build errored 而不是 build fail ，而如果在 script 裏失敗的話算作 build fail 。&lt;/p&gt;
&lt;p&gt;爲了編譯我的模板，還需要比較新的 less.js ，所以添加了 ppa 裝了個最新的 nodejs
並用它裝上了 less 。
還從源碼編譯安裝上了最新版的 opencc 1.0.2 ，因爲 Ubuntu 源裏的 opencc 的版本比較老(0.4)，
然後 doxygen 作爲 opencc 的編譯依賴也裝上了。
其它安裝的東西麼，除了 pelican 之外都是插件們需要的。以及我還需要生成 4 個語言的 locale
所以調用了 4 次 locale-gen 。由於是比較標準的 Ubuntu 環境，所以基本上編譯的步驟和在本地
Linux 環境中是一樣的，同樣的這套配置應該可以直接用於本地 Ubuntu 下編譯我的博客。&lt;/p&gt;
&lt;p&gt;寫好 &lt;code class="code"&gt;
.travis.yml&lt;/code&gt;
 之後把它 push 到 github ，然後 travis 這邊就會自動 clone
下來開始編譯。 travis 上能看到編譯的完整過程和輸出，一切正常的話編譯結束之後
build 的狀態就會變成 passing ，比如
&lt;a class="reference external" href="https://travis-ci.org/farseerfc/farseerfc/builds/51344614"&gt;我的這次的build&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="travis-ci-github"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;從 Travis-CI 推往 Github&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上面的測試編譯通過了之後，下一步就是讓 travis-ci 編譯的結果自動推到 Github Pages
並發佈出來。要推往 Github 自然需要設置 Github 用戶的身份，在本地設置的時候是把
ssh key 添加到 github 賬戶就可以了，在編譯細節都通過 github repo 公開了的 travis 上
當然不能放推送用的私有 key ，所以我們需要另外一種方案傳遞密碼。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Github 上創建 Personal Access Token&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Github 上創建 Personal Access Token" class="img-responsive" src="//farseerfc.me/images/travis-blog-push.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;好在 Github 支持通過 &lt;a class="reference external" href="https://github.com/settings/applications"&gt;Personal Access Token&lt;/a&gt;
的方式驗證，這個和 App Token 一樣可以隨時吊銷，同時完全是個人創建的。另一方面 Travis-CI
支持加密一些私密數據，通過環境變量的方式傳遞給編譯腳本，避免公開密碼這樣的關鍵數據。&lt;/p&gt;
&lt;p&gt;首先創建一個 &lt;a class="reference external" href="https://github.com/settings/applications"&gt;Personal Access Token&lt;/a&gt;
，這裏需要勾選一些給這個 Token 的權限，我只給予了最小的 public_repo 權限，如側邊裏的圖。
生成之後會得到一長串 Token 的散列碼。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
如果你不能使用 travis 命令&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月21日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code class="code"&gt;
travis encrypt&lt;/code&gt;
 命令來加密重要數據最方便，不過如果有任何原因，
比如 ruby 版本太低或者安裝不方便之類的，那麼不用擔心，我們直接通過
&lt;a class="reference external" href="http://docs.travis-ci.com/api/#repository-keys"&gt;travis api&lt;/a&gt;
也能加密數據。&lt;/p&gt;
&lt;p&gt;第一步用這個命令得到你的repo的 pubkey ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;curl -H "Accept: application/vnd.travis-ci.2+json" https://api.travis-ci.org/repos/&amp;lt;github-id/repo&amp;gt;/key | python2 -m json.tool | grep key | sed 's/.*"key": "\(.*\)"/\1/' | xargs -0 echo -en | sed 's/ RSA//' &amp;gt; travis.pem&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中的 &amp;lt;github-id/repo&amp;gt; 替換成 github 上的 用戶名/repo名， 比如我的是
farseerfc/farseer 。travis api 獲得的結果是一個 json ，所以還用 python 的
json 模塊處理了一下，然後把其中包含 key 的行用 &lt;code class="code"&gt;
grep&lt;/code&gt;
 提取出來，用
&lt;code class="code"&gt;
sed&lt;/code&gt;
 匹配出 key 的字符串本身，然後 &lt;code class="code"&gt;
xargs -0 echo -en&lt;/code&gt;

解釋掉轉義字符，然後刪掉其中的 "&amp;lt;空格&amp;gt;RSA" 幾個字（否則 openssl 不能讀），
最後保存在名爲 travis.pem 的文件裏。&lt;/p&gt;
&lt;p&gt;有了 pubkey 之後用 openssl 加密我們需要加密的東西並用 base64 編碼：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;echo -n 'GIT_NAME="Jiachen Yang" GIT_EMAIL=farseerfc@gmail.com GH_TOKEN=&amp;lt;Personal Access Token&amp;gt;' | openssl rsautl -encrypt -pubin -inkey travis.pem | base64 -w0&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;替換了相應的身份信息和token之後，這行得到的結果就是 secure 裏要寫的加密過的內容。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;然後我們需要 &lt;code class="code"&gt;
travis&lt;/code&gt;
 命令來加密這個 token ， archlinux 用戶可以安裝
&lt;code class="code"&gt;
aur/​ruby-travis&lt;/code&gt;
 ，其它用戶可以用 gems 安裝：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; gem install travis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;裝好之後，在設定了 Travis-CI 的 repo 的目錄中執行一下 &lt;code class="code"&gt;
travis status&lt;/code&gt;
 ，
命令會指導你登錄 Travis-CI 並驗證 repo 。正常的話會顯示最新的 build 狀態。
然後同樣在這個 repo 目錄下執行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; travis encrypt &lt;span class="s1"&gt;'GIT_NAME="Jiachen Yang" GIT_EMAIL=farseerfc@gmail.com GH_TOKEN=&amp;lt;Personal Access Token&amp;gt;'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;當然上面一行裏的相應信息替換爲個人的信息，作爲這個命令的執行結果會得到另一長串散列碼，
把這串散列寫入剛纔的 &lt;code class="code"&gt;
.travis.yml&lt;/code&gt;
 文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;secure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"long&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;base64&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;string"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了這段聲明之後， Travis-CI 就會在每次編譯之前，設置上面加密的環境變量。
然後在編譯腳本中利用這些環境變量來生成博客：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global user.email "$GIT_EMAIL"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global user.name "$GIT_NAME"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git config --global push.default simple&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git clone --depth 1 https://github.com/farseerfc/pelican-plugins plugins&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git clone --depth 1 https://github.com/farseerfc/pelican-bootstrap3 theme&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git clone --depth 1 https://$GH_TOKEN@github.com/farseerfc/farseerfc.github.io output&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;env SITEURL="farseerfc.me" make publish&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nt"&gt;after_success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cd output&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git add -A .&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git commit -m "update from travis"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;git push --quiet&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="alert alert-warning compound"&gt;
&lt;p&gt;這裏要注意最後 &lt;code class="code"&gt;
git push&lt;/code&gt;
 的時候一定要加上 &lt;code class="code"&gt;
--quiet&lt;/code&gt;
，因爲默認不加的時候會把
代入了 &lt;code class="code"&gt;
$GH_TOKEN&lt;/code&gt;
 的 URL 顯示出來，從而上面的加密工作就前功盡棄了……&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;根據 &lt;a class="reference external" href="http://docs.travis-ci.com/user/build-lifecycle/"&gt;travis 的文檔&lt;/a&gt;
， after_success 裏寫的步驟只有在 script 裏的全都完全無錯執行完之後纔會執行，這正是我們
push 的條件。目前 after_success 的成功與否不會影響到 build 的狀態。
具體我用的配置見
&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc/blob/master/.travis.yml"&gt;這裏的最新版&lt;/a&gt; 。
在我的 &lt;code class="code"&gt;
make github&lt;/code&gt;
 中
&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc/blob/master/Makefile#L102"&gt;調用了&lt;/a&gt;
&lt;code class="code"&gt;
git push&lt;/code&gt;
 命令，從而執行了 &lt;code class="code"&gt;
make github&lt;/code&gt;
 之後就會自動部署到 github 上。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;用 Web 編輯並發佈靜態博客&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;經過以上設置之後，一切正常的話，每次對主 repo 推送更新的同時， Travis-CI 就會自動
拉來更新然後編譯並發佈了。可以放置這樣的圖標 &lt;img alt="travisIcon" class="no-responsive img-responsive" src="https://travis-ci.org/farseerfc/farseerfc.svg?branch=master"/&gt; 在項目的 &lt;code class="code"&gt;
Readme.md&lt;/code&gt;

中顯示編譯狀態。&lt;/p&gt;
&lt;p&gt;這樣設置之後的另一個好處就在於可以利用 Github 的 Web 界面編輯文章內容。在 Github 裏
編輯和保存之後會自動作爲一個 commit 提交，所以也會觸發 Travis-CI 的自動編譯。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="在 Github 的 Web 界面中直接編輯文章內容" class="img-responsive" src="//farseerfc.me/images/travis-edit-github-web.png"/&gt;
&lt;p class="caption"&gt;在 Github 的 Web 界面中直接編輯文章內容&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;以及雖然目前還沒有好用的 Github 的手機客戶端，不過直接用 Android/iPhone 的瀏覽器登錄
github 並編輯文章的可用性也還不錯，所以同樣的方式也可以直接在手機上發佈博文了。&lt;/p&gt;
&lt;p&gt;That is all, happy blogging ~&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="pelican"></category><category term="github"></category><category term="pages"></category><category term="travis"></category><category term="travis-ci"></category><category term="ubuntu"></category></entry><entry><title>archlinux 上用 chrome 實現 透明計算 遠程登錄</title><link href="//farseerfc.me/arch-chrome-remote-desktop.html" rel="alternate"></link><published>2015-02-13T20:39:00+09:00</published><updated>2015-02-13T20:39:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-02-13:/arch-chrome-remote-desktop.html</id><summary type="html">
&lt;p&gt;&lt;a class="reference external" href="http://news.sciencenet.cn/htmlnews/2015/1/311393.shtm"&gt;透明計算&lt;/a&gt;
具體是什麼，因爲他們沒有公開技術細節所以我並不知道，只是看
&lt;a class="reference external" href="http://v.qq.com/page/h/v/q/h0145ebh1vq.html"&gt;公開出來的演示視頻&lt;/a&gt;
，感覺似乎只要能從手機上遠程登錄系統桌面，就能算是透明計算了。
如果透明計算真是這個意思，那麼我似乎已經用着這個技術很多年了嘛。&lt;/p&gt;
&lt;p&gt;Xorg 上常用的遠程桌面工具有很多，基於 VNC 協議的、基於NX的和基於 RDP 協議的都能找到，
直接 ssh X forwarding 效果也不錯。只是這些方案的一個 &lt;strong&gt;不太易用&lt;/strong&gt; 的地方在於，需要
通過 ip 訪問到遠程的電腦，所以在跨越 NAT 之類的情況下不太容易使用。&lt;/p&gt;
&lt;p&gt;於是今天介紹一個使用方便設置也簡單的方法： 通過 chrome-remote-desktop 在 archlinux
上使用遠程桌面。這個方案的優勢在於，藉助 Google 的雲端服務器（內部貌似是XMPP協議下的握手）
方便地實現了 NAT 穿透，無論什麼網絡環境基本都能使用。當然，要支持遠程登錄，
位於遠端的登錄的計算機必須一直開着 …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;&lt;a class="reference external" href="http://news.sciencenet.cn/htmlnews/2015/1/311393.shtm"&gt;透明計算&lt;/a&gt;
具體是什麼，因爲他們沒有公開技術細節所以我並不知道，只是看
&lt;a class="reference external" href="http://v.qq.com/page/h/v/q/h0145ebh1vq.html"&gt;公開出來的演示視頻&lt;/a&gt;
，感覺似乎只要能從手機上遠程登錄系統桌面，就能算是透明計算了。
如果透明計算真是這個意思，那麼我似乎已經用着這個技術很多年了嘛。&lt;/p&gt;
&lt;p&gt;Xorg 上常用的遠程桌面工具有很多，基於 VNC 協議的、基於NX的和基於 RDP 協議的都能找到，
直接 ssh X forwarding 效果也不錯。只是這些方案的一個 &lt;strong&gt;不太易用&lt;/strong&gt; 的地方在於，需要
通過 ip 訪問到遠程的電腦，所以在跨越 NAT 之類的情況下不太容易使用。&lt;/p&gt;
&lt;p&gt;於是今天介紹一個使用方便設置也簡單的方法： 通過 chrome-remote-desktop 在 archlinux
上使用遠程桌面。這個方案的優勢在於，藉助 Google 的雲端服務器（內部貌似是XMPP協議下的握手）
方便地實現了 NAT 穿透，無論什麼網絡環境基本都能使用。當然，要支持遠程登錄，
位於遠端的登錄的計算機必須一直開着 Chrome Remote Desktop 的後臺服務。&lt;/p&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Chrome Remote Desktop 插件&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Chrome Remote Desktop 插件" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-plugin.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="chrome-remote-desktop"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Chrome Remote Desktop 的客戶端&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;雖然可能有很多人不知道，不過 Chrome 內包括遠程桌面的功能很久了。只是這個功能的界面默認
沒有提供界面，要使用它需要安裝 Google 官方出品的
&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp"&gt;remote-desktop 插件&lt;/a&gt; 。
裝好之後遠程桌面的客戶端就準備好，可以用來遠程訪問別的計算機桌面了（無論是 Windows/OS X
還是 Linux 都支持）。並且不光可以自己遠程訪問自己賬戶的桌面，還可以遠程協助朋友的桌面。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="archlinux"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Archlinux 上設置遠程登錄的服務器&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有了客戶端之後還要設置一下纔能讓桌面作爲遠程登錄的服務器。Windows 和 OS X 上 Chrome
會自動下載需要的安裝包，無腦下一步就能裝好了。Linux上由於發行版衆多，桌面配置各異，
所以需要一點手動配置。官方的設置步驟記載在 &lt;a class="reference external" href="https://support.google.com/chrome/answer/1649523"&gt;這裏&lt;/a&gt;
其中給出了 debian 用的二進制包和 Ubuntu 12.10 上的設置方式，以下設置是參考官方步驟。&lt;/p&gt;
&lt;p&gt;首先要安裝 chrome-remote-desktop 這個包，這個包實際上對應了 Windows/OS X 上用安裝程序
安裝的 Remote Desktop Host Controller。 archlinux 上開啓了
&lt;a class="reference external" href="https://github.com/archlinuxcn/repo"&gt;[archlinuxcn]&lt;/a&gt;
倉庫的話，可以直接安裝打好的包。或者可以從
&lt;a class="reference external" href="https://aur.archlinux.org/packages/chrome-remote-desktop/"&gt;AUR&lt;/a&gt; 裝。&lt;/p&gt;
&lt;pre&gt;&lt;span class="code-line"&gt;$ pacman -Ss chrome-remote-desktop&lt;br/&gt;&lt;span style="color:purple;font-weight:bold;"&gt;archlinuxcn/&lt;/span&gt;&lt;span style="font-weight:bold;"&gt;chrome-remote-desktop &lt;/span&gt;&lt;span style="color:green;font-weight:bold;"&gt;40.0.2214.44-1&lt;/span&gt;&lt;br/&gt;Allows you to securely access your computer over the Internet through Chrome.&lt;/span&gt;&lt;/pre&gt;&lt;p&gt;裝好之後從會說這麼一段話：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;groupadd：无效的组 ID “chrome-remote-desktop”&lt;/p&gt;
&lt;p&gt;Please create ~/.config/chrome-remote-desktop folder manually, if it doesn't exist, or else you can't use CRD.
The needed files are created by the Chrome app, inside the chrome-remote-desktop folder, after Enabling Remote Connections.
To {enable,start} the service use systemctl --user {enable,start} chrome-remote-desktop&lt;/p&gt;
&lt;p&gt;You may need to create a ~/.chrome-remote-desktop-session file with commands to start your session&lt;/p&gt;
&lt;p&gt;Go to &lt;a class="reference external" href="https://support.google.com/chrome/answer/1649523"&gt;https://support.google.com/chrome/answer/1649523&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那句報錯是 AUR 裏打的包還沒跟上上游 Google 的更改導致的錯誤，
首先我們需要把遠程登錄的用戶添加入 chrome-remote-desktop 這個用戶組裏。
新版本的 chrome remote desktop 提供了一個命令做這個事情，所以執行以下命令就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; /opt/google/chrome-remote-desktop/chrome-remote-desktop --add-user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後我們需要手動創建 &lt;code class="code"&gt;
~/​.config/​chrome-remote-desktop&lt;/code&gt;
 這個文件夾，內容是空的
就好了，隨後 chrome 會往這裏面放 &lt;code class="code"&gt;
host#.json&lt;/code&gt;
 文件用於身份驗證。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkdir ~/.config/chrome-remote-desktop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後我們要創建一個 shell 腳本 &lt;code class="code"&gt;
~/​.chrome-remote-desktop-session&lt;/code&gt;
 ，這是遠程
登錄時的 .xinitrc ，內容麼就是啓動你想在遠程登錄時用的桌面環境。
這裏可以指定一個和你正在登錄的 WM/DE 不同的桌面，比如我啓動 xfce4：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; cat ~/.chrome-remote-desktop-session&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;#&lt;/span&gt;!/bin/bash&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;startxfce4&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; chmod &lt;span class="m"&gt;755&lt;/span&gt; .chrome-remote-desktop-session&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下來需要從 Chrome 的插件裏啓用遠程桌面。打開 Chrome 的 Remote Desktop 插件，這時
應該可以看到一個「啓用遠程鏈接」的按鈕。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Chrome Remote Desktop 插件中「啓用遠程鏈接」的按鈕" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-enable-button.png"/&gt;
&lt;p class="caption"&gt;Chrome Remote Desktop 插件中「啓用遠程鏈接」的按鈕&lt;/p&gt;
&lt;/div&gt;
&lt;div class="alert alert-warning compound"&gt;
&lt;p&gt;在撰寫本文的時候， Archlinux 官方源裏的 chromium 的版本和 aur/google-chrome
的版本尚且還是 40.0.2214.111 ，而 Chrome Web Store 中提供的 Chrome Remote
Desktop 的插件的版本是 41.0.2272.41 。雖然通常並不要求兩者版本一致，不過貌似最近
Chrome 內部的 Remoting 功能更改了 API 導致可能出問題。如果你找不到
「啓用遠程鏈接」的按鈕，請嘗試一下新版本的 Chrome 比如 google-chrome-dev 。
在這一步啓用之後，老版本的 chrome 應該也就能使用遠程桌面了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="alert alert-warning compound"&gt;
&lt;p&gt;在32位的 Linux 版本上，最近更新的 Chrome Remote Desktop 插件可能無法正確識別 Host
的版本，具體 &lt;a class="alert-link reference external" href="https://code.google.com/p/chromium/issues/detail?id=332930"&gt;參考這個 bug&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;點擊「啓用遠程鏈接」，設定一個 PIN 密碼（不需要很複雜，這裏首先有 Google 帳號驗證保證只有
你纔能訪問），然後就能看到這套電腦的 hostname 出現在「我的電腦」列表裏。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="啓用遠程鏈接之後的樣子" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-after-enabled.png"/&gt;
&lt;p class="caption"&gt;啓用遠程鏈接之後的樣子&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;同時，啓用了遠程鏈接之後，可以在剛剛創建的 ~/.config/chrome-remote-desktop
文件夾中找到記錄了驗證信息的文件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; ls .config/chrome-remote-desktop&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;chrome-profile  host#8cfe7ecfd6bb17955c1ea22f77d0d800.json  pulseaudio#8cfe7ecfd6&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後就可以啓動對應的 systemd 用戶服務了，如果想自動啓動服務要記得 &lt;code class="code"&gt;
systemctl --user enable&lt;/code&gt;
 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; systemctl --user start chrome-remote-desktop.service&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果上面的設置一切正常，就可以看到 chrome-remote-desktop 啓動了另外一個 Xorg 執行你
剛剛指定的桌面環境：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="htop 中看到的 chrome-remote-desktop 啓動的另外一個 Xorg" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-htop.png"/&gt;
&lt;p class="caption"&gt;htop 中看到的 chrome-remote-desktop 啓動的另外一個 Xorg&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;然後就可以試着通過 Remote Desktop 插件登錄到這個新開的 Xorg 了：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="「遠程」登錄到新的 XFCE4" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-xfce4.png"/&gt;
&lt;p class="caption"&gt;「遠程」登錄到新的 XFCE4&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linux-chrome-windows-os-x"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Linux 版本的 Chrome遠程桌面 和 Windows/ OS X 上的區別&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通過上面的設置步驟也可以看出，Linux版本的遠程桌面會在後臺開一個獨立的 X 會話，而不能
復用現在已有的 X 會話。對遠程登錄的用法而言這還能接受，對遠程協助的功能而言有點問題，
因爲正在使用的人不能觀察協助者做了什麼，協助者也不能繼續請求協助的人的操作。&lt;/p&gt;
&lt;p&gt;當然目前 Chrome 遠程桌面的 Linux Host Controller 還只是 beta 版本，官方只測試支持
Ubuntu 12.04 和 12.10 （14.04之後似乎有
&lt;a class="reference external" href="https://code.google.com/p/chromium/issues/detail?id=366432"&gt;Bug&lt;/a&gt;
），所以不能要求太多。希望以後能改善吧。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Bonus： 手機遠程登錄&lt;/a&gt;&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
手機上的 Chrome 遠程桌面 App&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="手機上的 Chrome 遠程桌面 App" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-android.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;通過上面的設置就可以從任何一個 Chrome 遠程桌面客戶端登錄剛剛設置的這臺電腦了。
因爲 Chrome 在三大桌面系統 Windows / OS X / Linux 上都有，所以應該能覆蓋大多數桌面
系統了。&lt;/p&gt;
&lt;p&gt;除了桌面的 Chrome 之外還有一個客戶端是 Android 上的
&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.google.chromeremotedesktop"&gt;Chrome 遠程桌面 App&lt;/a&gt; 經過上面的設置之後，從這個 App 也能看到並登錄：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="手機遠程登錄" class="img-responsive" src="//farseerfc.me/images/chrome-remote-desktop-android-logined.png"/&gt;
&lt;p class="caption"&gt;手機遠程登錄&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;好啦，開始享受國家自然科學一等獎的透明計算技術吧！&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="linux"></category><category term="archlinux"></category><category term="arch"></category><category term="chrome"></category><category term="remote"></category><category term="desktop"></category></entry><entry><title>換到 farseerfc.me 域名</title><link href="//farseerfc.me/switch-to-farseerfc-dot-me-domain.html" rel="alternate"></link><published>2015-01-26T23:32:00+09:00</published><updated>2015-01-26T23:32:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-01-26:/switch-to-farseerfc-dot-me-domain.html</id><summary type="html">&lt;p&gt;上個月就在 &lt;ruby&gt;&lt;rb&gt;狗爹&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;godaddy&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 上買了個自己的域名 &lt;code class="code"&gt;
farseerfc.me&lt;/code&gt;
 準備用在這個
博客上，當時試着轉到過這個域名，發現 &lt;ruby&gt;&lt;rb&gt;自定義域名&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;custom domain&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
只支持 http 不支持 https ，想着還要買自己的證書，於是就扔在了一旁。不用自定義域名的話，
放在 github.io 上是可以用 HTTPS 的。
今天在 &lt;a class="reference external" href="//webchat.freenode.net/?channels=archlinux-cn"&gt;#archlinux-cn&lt;/a&gt; 上受大牛 &lt;a class="reference external" href="/links.html#quininer"&gt;quininer&lt;/a&gt; 和 &lt;a class="reference external" href="/links.html#lilydjwg"&gt;lilydjwg&lt;/a&gt; 點播，
發現 cloudflare 有提供
&lt;a class="reference external" href="https://blog.cloudflare.com/introducing-universal-ssl/"&gt;免費的支持 SSL 的 CDN 服務&lt;/a&gt;
趕快去申請了一個，感覺非常讚，於是就換過來了。&lt;/p&gt;
&lt;p&gt;設置的方法按照 &lt;a class="reference external" href="https://me.net.nz/blog/github-pages-secure-with-cloudflare/"&gt;這篇博文&lt;/a&gt;
說的一步步做下來，如它所述，用 CloudFlare …&lt;/p&gt;</summary><content type="html">&lt;p&gt;上個月就在 &lt;ruby&gt;&lt;rb&gt;狗爹&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;godaddy&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 上買了個自己的域名 &lt;code class="code"&gt;
farseerfc.me&lt;/code&gt;
 準備用在這個
博客上，當時試着轉到過這個域名，發現 &lt;ruby&gt;&lt;rb&gt;自定義域名&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;custom domain&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
只支持 http 不支持 https ，想着還要買自己的證書，於是就扔在了一旁。不用自定義域名的話，
放在 github.io 上是可以用 HTTPS 的。
今天在 &lt;a class="reference external" href="//webchat.freenode.net/?channels=archlinux-cn"&gt;#archlinux-cn&lt;/a&gt; 上受大牛 &lt;a class="reference external" href="/links.html#quininer"&gt;quininer&lt;/a&gt; 和 &lt;a class="reference external" href="/links.html#lilydjwg"&gt;lilydjwg&lt;/a&gt; 點播，
發現 cloudflare 有提供
&lt;a class="reference external" href="https://blog.cloudflare.com/introducing-universal-ssl/"&gt;免費的支持 SSL 的 CDN 服務&lt;/a&gt;
趕快去申請了一個，感覺非常讚，於是就換過來了。&lt;/p&gt;
&lt;p&gt;設置的方法按照 &lt;a class="reference external" href="https://me.net.nz/blog/github-pages-secure-with-cloudflare/"&gt;這篇博文&lt;/a&gt;
說的一步步做下來，如它所述，用 CloudFlare 的優點如下：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CDN 加速&lt;/li&gt;
&lt;li&gt;SSL (HTTPS) 加密&lt;/li&gt;
&lt;li&gt;支持 SPDY 協議&lt;/li&gt;
&lt;li&gt;支持 IPv6&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年12月29日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;現在不光支持 SPDY 而且支持 HTTP/2 了。&lt;/p&gt;
&lt;p&gt;然後 &lt;strong&gt;免費賬戶&lt;/strong&gt; 的一些缺點有：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CloudFlare 和 github.io 之間的數據不是加密的，因爲 github
&lt;ruby&gt;&lt;rb&gt;自定義域名&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;custom domain&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 還不支持使用自己的證書。這也是一開始我沒用
自定義域名的原因嘛，這沒有辦法……&lt;/li&gt;
&lt;li&gt;CloudFlare 給免費賬戶簽名的 SSL 證書比較新，不支持一些老的設備和瀏覽器，比如不支持
老的 XP 系統的 IE 或者 2.x 的 Android。這種情況下沒辦法只能用沒有加密的 HTTP 了。&lt;/li&gt;
&lt;li&gt;不支持 &lt;a class="reference external" href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS 頭&lt;/a&gt;
，所以不能從服務器這邊強制瀏覽器用 HTTPS。當然可以放個 javascript 跳轉，
也可以用 &lt;a class="reference external" href="https://www.eff.org/https-everywhere"&gt;HTTPSEverywhere&lt;/a&gt; 這種方案。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年12月29日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;如評論中 &lt;a class="reference external" href="http://farseerfc.me/switch-to-farseerfc-dot-me-domain.html#comment-2015037231"&gt;提到的&lt;/a&gt;
現在支持 HSTS 了。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;設置步驟&lt;/h2&gt;
&lt;p&gt;基本按照默認的選項下一步就可以了。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;和那個博主一樣我把 &lt;ruby&gt;&lt;rb&gt;安全級別&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Security profile&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 降到了 Low ，即使是可疑流量也
不會要求輸入 CAPTCHA 。&lt;/li&gt;
&lt;li&gt;把 SSL 方式開在 Flexible SSL，訪客到 CloudFlare 是加密的，而 CloudFlare 到
github.io 是不加密的。&lt;/li&gt;
&lt;li&gt;把 CDN 開到了 CDT+Full Optimization ，可以對訪問加速。由於是完全靜態的博客，沒有
動態變化的內容，所以應該比較安全。&lt;/li&gt;
&lt;li&gt;服務器設置的一步需要將 &lt;ruby&gt;&lt;rb&gt;域名解析服務器&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;DNS nameservers&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 從狗爹的服務器改到
CloudFlare 的，如下圖：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="figure"&gt;
&lt;img alt="更改狗爹的域名服務器" class="img-responsive" src="//farseerfc.me/images/godaddy.png"/&gt;
&lt;p class="caption"&gt;更改狗爹的域名服務器&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;申請好之後就由 CloudFlare 接管域名解析了，接下來在 CloudFlare 的 DNS 設置添加一條
&lt;a class="reference external" href="https://help.github.com/articles/tips-for-configuring-an-a-record-with-your-dns-provider/"&gt;A 類規則指向 github pages 的 IP&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="更改CloudFlare的DNS規則" class="img-responsive" src="//farseerfc.me/images/cloudflaredns.png"/&gt;
&lt;p class="caption"&gt;更改CloudFlare的DNS規則&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;等一切都反映到 DNS 服務器上就設置完成了，接下來給
&lt;a class="reference external" href="https://help.github.com/articles/adding-a-cname-file-to-your-repository/"&gt;farseerfc.github.io push 一個 CNAME 文件&lt;/a&gt;
寫上我的域名就可以了。我用 Makefile 配合我的 pelican 配置做這個：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rmdrafts&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;theme&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; find &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -mindepth &lt;span class="m"&gt;1&lt;/span&gt; -not -wholename &lt;span class="s2"&gt;"*/.git*"&lt;/span&gt; -delete&lt;/span&gt;
&lt;span class="code-line"&gt;  rm -rf cache&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;SITEURL&lt;span class="k"&gt;)&lt;/span&gt; &amp;gt; content/static/CNAME&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;$(&lt;/span&gt;PELICAN&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;INPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -o &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; -s &lt;span class="k"&gt;$(&lt;/span&gt;PUBLISHCONF&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;PELICANOPTS&lt;span class="k"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; rsthtml&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git checkout master&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  env &lt;span class="nv"&gt;SITEURL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"farseerfc.me"&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;MAKE&lt;span class="k"&gt;)&lt;/span&gt; publish&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add . &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class="s2"&gt;"update"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push&lt;span class="o"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'//'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SITEURL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'localhost:8000'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'uml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'images/favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'static/CNAME'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'images/favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'static/CNAME'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'CNAME'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後把生成的靜態網站 push 到 github 之後可以從項目設置裏看到域名的變化：&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Github 配置好自定義域名之後的變化" class="img-responsive" src="//farseerfc.me/images/githubdomain.png"/&gt;
&lt;p class="caption"&gt;Github 配置好自定義域名之後的變化&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;最後把Disqus的評論也遷移到新的域名，disqus有方便的遷移嚮導，一直下一步就可以了。&lt;/p&gt;
&lt;p&gt;這樣就一切都設置妥當了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;致謝&lt;/h2&gt;
&lt;p&gt;最後要感謝提供消息的 &lt;a class="reference external" href="/links.html#quininer"&gt;quininer&lt;/a&gt; 和 &lt;a class="reference external" href="/links.html#lilydjwg"&gt;lilydjwg&lt;/a&gt; ，感謝撰寫設置步驟的
&lt;em&gt;Jonathan J Hunt&lt;/em&gt; ， 感謝 CloudFlare 提供免費 SSL CDN 服務，感謝 Github 提供
方便免費的 Pages 託管。&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="pelican"></category><category term="domain"></category><category term="cloudflare"></category><category term="github"></category></entry><entry><title>重新設計了 Pelican 的主題與插件</title><link href="//farseerfc.me/redesign-pelican-theme.html" rel="alternate"></link><published>2015-01-25T22:45:00+09:00</published><updated>2015-01-25T22:45:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-01-25:/redesign-pelican-theme.html</id><summary type="html">
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月14日更新&lt;/strong&gt;&lt;/div&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;前言: 新天新地，將一切都更新了 &lt;a class="footnote-reference" href="#id37" id="id1"&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;不知不覺間放任這邊長草很久了，從上次
&lt;a class="reference external" href="//farseerfc.me/try-pelican.html"&gt;折騰主題&lt;/a&gt; 到現在都快三年了，
而從上次 &lt;a class="reference external" href="//farseerfc.me/marry-me.html"&gt;寫了篇告白信&lt;/a&gt; 到現在也有快兩年了。
這期間曾經把主題配色從 &lt;a class="reference external" href="http://getbootstrap.com/2.3.2/"&gt;Bootstrap 2&lt;/a&gt; 默認的
白底黑字改成了讓眼睛更舒適的黑底白字，也不過是用 drop-in 的配色方案而已，沒有本質上的改進。&lt;/p&gt;
&lt;p&gt;洞中一日世上千載，兩年裏 Bootstrap 已經升上 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;v3.3&lt;/a&gt; ,
而 Pelican 則已經升到 &lt;a class="reference external" href="https://github.com/getpelican/pelican/releases/tag/3.5.0"&gt;3.5&lt;/a&gt; 了。
早就眼饞 Bootstrap 和 Pelican 中的諸多新功能新設計，不過無奈於時間有限只能飽飽眼福。&lt;/p&gt;
&lt;p&gt;近日想寫的東西越積越多，終於下定決心花了前前後後 &lt;strong&gt;兩個月&lt;/strong&gt; 的時間重新設計了一遍
Pelican 的主題，配合一些我覺得有用的插件。於是本博客就變成你們現在看到的樣子了。
（以及本篇博文也用了兩個月的時間寫完，其間還發了幾篇別的短文，算是恢復寫博客的嘗試吧 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月14日更新&lt;/strong&gt;&lt;/div&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id38"&gt;前言: 新天新地，將一切都更新了 &lt;a class="footnote-reference" href="#id37" id="id1"&gt;[1]&lt;/a&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;不知不覺間放任這邊長草很久了，從上次
&lt;a class="reference external" href="//farseerfc.me/try-pelican.html"&gt;折騰主題&lt;/a&gt; 到現在都快三年了，
而從上次 &lt;a class="reference external" href="//farseerfc.me/marry-me.html"&gt;寫了篇告白信&lt;/a&gt; 到現在也有快兩年了。
這期間曾經把主題配色從 &lt;a class="reference external" href="http://getbootstrap.com/2.3.2/"&gt;Bootstrap 2&lt;/a&gt; 默認的
白底黑字改成了讓眼睛更舒適的黑底白字，也不過是用 drop-in 的配色方案而已，沒有本質上的改進。&lt;/p&gt;
&lt;p&gt;洞中一日世上千載，兩年裏 Bootstrap 已經升上 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;v3.3&lt;/a&gt; ,
而 Pelican 則已經升到 &lt;a class="reference external" href="https://github.com/getpelican/pelican/releases/tag/3.5.0"&gt;3.5&lt;/a&gt; 了。
早就眼饞 Bootstrap 和 Pelican 中的諸多新功能新設計，不過無奈於時間有限只能飽飽眼福。&lt;/p&gt;
&lt;p&gt;近日想寫的東西越積越多，終於下定決心花了前前後後 &lt;strong&gt;兩個月&lt;/strong&gt; 的時間重新設計了一遍
Pelican 的主題，配合一些我覺得有用的插件。於是本博客就變成你們現在看到的樣子了。
（以及本篇博文也用了兩個月的時間寫完，其間還發了幾篇別的短文，算是恢復寫博客的嘗試吧。）&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
在邁阿密參加 &lt;a class="reference external" href="http://icsr2015.ipd.kit.edu/"&gt;ICSR 2015&lt;/a&gt; 的時候
拍到的街邊一家叫 Pelican 的旅館&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Pelican Hotel" class="img-responsive" src="//farseerfc.me/images/pelican.jpg"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bootstrap-3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id39"&gt;Bootstrap 3 的新設計&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;全新的 &lt;ruby&gt;&lt;rb&gt;優先移動設備&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;mobile-first&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; &lt;ruby&gt;&lt;rb&gt;響應式&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;responsive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 設計。
原本Bootstrap 2雖然有響應式設計，
不過諸多細節不能符合我的需求，最終還是得手工 hack &lt;code class="code"&gt;
@media&lt;/code&gt;
 查詢去微調。
現在的 &lt;ruby&gt;&lt;rb&gt;優先移動設備&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;mobile-first&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; &lt;ruby&gt;&lt;rb&gt;響應式&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;responsive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
&lt;ruby&gt;&lt;rb&gt;柵格系統&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;grid system&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 則相對顯得科學很多了，也終於能在手持
設備上看起來舒服一些。諸位可以嘗試改變窗口寬度，或者在不同的手持設備上打開這個
blog ，體驗一下這個頁面在不同顯示器大小中的效果。如果仍有問題歡迎
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/issues"&gt;發 Issue 給我&lt;/a&gt;  。&lt;/li&gt;
&lt;li&gt;科學的 &lt;ruby&gt;&lt;rb&gt;導航欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Navbar&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。
比 Bootstrap 2 那個科學很多了。無論是 &lt;ruby&gt;&lt;rb&gt;保持&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;sticky&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 在上端還是跟着浮動，
或者像這邊這樣 &lt;a class="reference external" href="http://www.virtuosoft.eu/code/bootstrap-autohidingnavbar/"&gt;自動隱藏&lt;/a&gt; 都很簡單。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多細節參考 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap 3 主頁&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-3-5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id40"&gt;Pelican 3.5 的新功能&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2 和 Python 3 統一代碼：
再沒有惱人的 unicode 相關的問題了。這對 blog 系統來說相當重要啊。
而且還能方便切換 pypy 等不同的解釋器。&lt;/li&gt;
&lt;li&gt;全新的插件系統：非常多功能強大的 &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;插件&lt;/a&gt; 等着你。&lt;/li&gt;
&lt;li&gt;增強了導入系統：嗯總算可以導入我的中文的 wordpress 博客了。（雖然那邊長草更久了……）&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pelican.readthedocs.org/en/latest/content.html#linking-to-internal-content"&gt;站內鏈接&lt;/a&gt;
：不用 &lt;ruby&gt;&lt;rb&gt;硬編碼&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;hard code&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 目標頁面的鏈接了，可以直接寫源文件的位置然後讓 pelican
處理，這樣能簡化各種 &lt;ruby&gt;&lt;rb&gt;插件&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;plugin&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 和 &lt;ruby&gt;&lt;rb&gt;主題&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;theme&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的實現。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多細節參考 &lt;a class="reference external" href="http://pelican.readthedocs.org/en/latest/"&gt;Pelican 文檔&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id41"&gt;新的文件夾佈局&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Pelican 的新文件夾佈局&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;pre&gt;&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span style="color:blue;font-weight:bold;"&gt;.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;cache&lt;/span&gt;             生成頁面的 pickle 緩存&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;content&lt;/span&gt;           讀取的全部內容&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;&amp;lt;categories&amp;gt;&lt;/span&gt;      按分類存放的文章&lt;/span&gt;
&lt;span class="code-line"&gt;│   ├── &lt;span style="color:blue;font-weight:bold;"&gt;pages&lt;/span&gt;             像 About 這樣的固定頁面&lt;/span&gt;
&lt;span class="code-line"&gt;│   └── &lt;span style="color:blue;font-weight:bold;"&gt;static&lt;/span&gt;            文章內用到的靜態內容&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:blue;font-weight:bold;"&gt;drafts&lt;/span&gt;            文章的草稿箱&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;Makefile&lt;/span&gt;          生成用的 makefile&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;pelicanconf.py&lt;/span&gt;    測試時用的快速 Pelican 配置&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:green;font-weight:bold;"&gt;publishconf.py&lt;/span&gt;    部署時用的耗時 Pelican 配置&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:teal;font-weight:bold;"&gt;output&lt;/span&gt;          -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../farseerfc.github.io&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;├── &lt;span style="color:teal;font-weight:bold;"&gt;plugins&lt;/span&gt;         -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../pelican-plugins&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;└── &lt;span style="color:teal;font-weight:bold;"&gt;theme&lt;/span&gt;           -&amp;gt; &lt;span style="color:blue;font-weight:bold;"&gt;../pelican-bootstrap3&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc.github.com"&gt;之前的博客&lt;/a&gt; 仍然留在
github 上，其中的內容完全搬過來了。開始寫老博客的時候 Pelican 版本較早，沒有形成好的
文件夾佈局，導致生成的文章、使用的模板和撰寫的內容全都混在一起，非常難以管理，
於是趁改版之際用了新的文件夾佈局方式，並分爲 4 個 git repo 分別管理歷史。&lt;/p&gt;
&lt;p&gt;首先是存放 &lt;a class="reference external" href="https://github.com/farseerfc/farseerfc"&gt;總的博客內容的 repo&lt;/a&gt; ，
其佈局是如圖那樣的。這樣將生成的靜態網站和生成網站用的配置啦內容啦分開之後，頓時清晰了很多。&lt;/p&gt;
&lt;p&gt;然後這個內容 repo 中的三個符號鏈接分別指向三個子 repo（沒用 &lt;code class="code"&gt;
git submodule&lt;/code&gt;

管理純粹是因爲偷懶）。 theme 指向
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;
，是我修改過的 pelican 主題。
plugins 指向 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-plugins"&gt;pelican-plugins&lt;/a&gt;
，由於 plugins 的質量有些參差不齊，其中不少 plugin
都按我的需要做了些許修改，一些是功能改進，另一些則是修bug（比如不少plugin只支持 python 2）。
最後 output 指向
&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc.github.io"&gt;farseerfc.github.io&lt;/a&gt;
也就是發佈的靜態網站啦。&lt;/p&gt;
&lt;p&gt;接下來從 &lt;strong&gt;主題&lt;/strong&gt; 和 &lt;strong&gt;插件&lt;/strong&gt; 兩個方面介紹一下改版的細節。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="material-design-bootstrap-3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id42"&gt;主題： Material Design 風格的 Bootstrap 3&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;上篇 &lt;a class="reference external" href="//farseerfc.me/summarize-material-design-css-framework.html"&gt;博文&lt;/a&gt;
就總結了我爲了這個博客尋找了一堆 CSS 框架，並且最終決定用
&lt;a class="reference external" href="http://fezvrasta.github.io/bootstrap-material-design/"&gt;bootstrap-material-design&lt;/a&gt;
, &lt;a class="reference external" href="https://github.com/DandyDev/pelican-bootstrap3"&gt;DandyDev/pelican-bootstrap3&lt;/a&gt;
和 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap 3&lt;/a&gt; 這三個項目結合的方式實現這個模板的主題。
這三個項目都或多或少經過了我的修改，修改後的項目以 pelican-bootstrap3 爲基礎放在
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3"&gt;這裏&lt;/a&gt; ，包括 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/bootstrap"&gt;Bootstrap3 樣式&lt;/a&gt;
和 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/material"&gt;Material 樣式&lt;/a&gt;。&lt;/p&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id43"&gt;對 Bootstrap 3 的定製&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由於架構完善，修改 Bootstrap 3 感覺非常簡單。另一方面我在 Web 前端技術上的技能點也不多，
所以修改的地方非常有限，只能按我自己的需求定製而已。&lt;/p&gt;
&lt;div class="section" id="id17"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id44"&gt;響應式設備的大小&lt;/a&gt;&lt;/h4&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
修改了 Bootstrap 3 響應式設備的大小&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;screen-xs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;screen-sm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;598px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*  768px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;screen-md&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;952px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*  992px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;screen-lg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="nt"&gt;1350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 1200px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;screen-xl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="nt"&gt;2030px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;container-sm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;582px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*  750px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;container-md&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;930px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/*  970px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;container-lg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;1320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* 1170px; */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;container-xl&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;1990px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;首先把 Bootstrap 3 默認適配的幾個 &lt;a class="reference external" href="http://getbootstrap.com/css/#grid"&gt;響應式設備的大小&lt;/a&gt;
改成了我需要的大小。 &lt;code class="code"&gt;
xs&lt;/code&gt;
 和 &lt;code class="code"&gt;
sm&lt;/code&gt;
 的大小分別按照我的手機屏幕 &lt;strong&gt;豎屏&lt;/strong&gt; 和
&lt;strong&gt;橫屏&lt;/strong&gt; 時候的瀏覽器頁面寬度來算， &lt;code class="code"&gt;
md&lt;/code&gt;
 是想兼容 Nexus 7 橫屏 960 的寬度以及
一個常見上網本 1024 的寬度。 &lt;code class="code"&gt;
lg&lt;/code&gt;
 的大小則按照常見的筆記本 1366 寬的屏幕來適配。&lt;/p&gt;
&lt;p&gt;這裏 Bootstrap 3 支持的設備大小的一個問題是，它最多考慮到 1200 像素寬的顯示器，而更寬的
比如 1600、 2048 甚至 2560 像素寬的顯示器現在也並不少見，其結果就是頁面中左右兩側
有很大的空間被浪費掉了。作爲深受這一問題困擾的用戶之一，我用
&lt;a class="reference external" href="http://stackoverflow.com/a/25644266"&gt;這裏介紹的方法&lt;/a&gt;
給 bootstrap 增加了一類「 &lt;ruby&gt;&lt;rb&gt;比大更大&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;bigger than bigger&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 」的
&lt;code class="code"&gt;
xl&lt;/code&gt;
 響應式設備尺寸，寬度設爲支持 2048 像素寬的顯示器，具體的修改反映在
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/blob/master/static/bootstrap/variables.less"&gt;variables.less&lt;/a&gt;
文件裏。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id45"&gt;根據寬度自動分欄和瀑布式佈局&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;接下來目標是讓主頁的文章列表像 Google+ 主頁那樣根據顯示器寬度自動調整分欄，使得寬度不同的
顯示器上每個分欄的寬度接近。想要達到的效果是，根據上面定義的屏幕寬度尺寸：&lt;/p&gt;
&lt;table border="0" class="docutils borderless table"&gt;
&lt;colgroup&gt;
&lt;col width="26%"/&gt;
&lt;col width="17%"/&gt;
&lt;col width="18%"/&gt;
&lt;col width="39%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;code class="code"&gt;
xs&lt;/code&gt;
 用單欄 &lt;ruby&gt;&lt;rb&gt;流動&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;fluid&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 佈局&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;code class="code"&gt;
sm&lt;/code&gt;
 用上方單欄文章列表、下方雙欄 &lt;ruby&gt;&lt;rb&gt;側邊欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;sidebar&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 固定佈局&lt;/td&gt;
&lt;td&gt;&lt;code class="code"&gt;
md&lt;/code&gt;
 用單欄文章列表、單欄 側邊欄 固定佈局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;table border="0" class="docutils first borderless table last"&gt;
&lt;colgroup&gt;
&lt;col width="100%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;ruby&gt;&lt;rb&gt;導航欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;Navbar&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;側邊欄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;底欄&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;table border="0" class="docutils first borderless table last"&gt;
&lt;colgroup&gt;
&lt;col width="53%"/&gt;
&lt;col width="47%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;導航欄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;文章&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;側邊欄 1&lt;/td&gt;
&lt;td&gt;側邊欄 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;ruby&gt;&lt;rb&gt;底欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;footer&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;td&gt;&lt;table border="0" class="docutils first borderless table last"&gt;
&lt;colgroup&gt;
&lt;col width="53%"/&gt;
&lt;col width="47%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;導航欄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 1&lt;/td&gt;
&lt;td&gt;側邊欄 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 2&lt;/td&gt;
&lt;td&gt;側邊欄 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;ruby&gt;&lt;rb&gt;底欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;footer&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;code class="code"&gt;
lg&lt;/code&gt;
 用雙欄文章列表、單欄 側邊欄 固定佈局&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;code class="code"&gt;
xl&lt;/code&gt;
 用三欄文章列表、雙欄 側邊欄 固定佈局&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="2"&gt;&lt;table border="0" class="docutils first borderless table last"&gt;
&lt;colgroup&gt;
&lt;col width="35%"/&gt;
&lt;col width="35%"/&gt;
&lt;col width="31%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="3"&gt;導航欄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 1&lt;/td&gt;
&lt;td&gt;文章 3&lt;/td&gt;
&lt;td&gt;側邊欄 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 2&lt;/td&gt;
&lt;td&gt;文章 4&lt;/td&gt;
&lt;td&gt;側邊欄 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="3"&gt;&lt;ruby&gt;&lt;rb&gt;底欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;footer&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;td colspan="2"&gt;&lt;table border="0" class="docutils first borderless table last"&gt;
&lt;colgroup&gt;
&lt;col width="26%"/&gt;
&lt;col width="26%"/&gt;
&lt;col width="26%"/&gt;
&lt;col width="23%"/&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td colspan="4"&gt;導航欄&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 1&lt;/td&gt;
&lt;td&gt;文章 3&lt;/td&gt;
&lt;td&gt;文章 5&lt;/td&gt;
&lt;td&gt;側邊欄 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;文章 2&lt;/td&gt;
&lt;td&gt;文章 4&lt;/td&gt;
&lt;td&gt;文章 6&lt;/td&gt;
&lt;td&gt;側邊欄 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td colspan="4"&gt;&lt;ruby&gt;&lt;rb&gt;底欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;footer&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一開始純粹用 Bootstrap3 的響應式柵格實現這個分欄佈局，結果發現效果不太理想，
因爲文章列表和側邊欄的高度是變化的，會導致柵格間留下大片空白。後來改用
&lt;a class="reference external" href="http://cssdeck.com/labs/pinterest-like-waterfall-design-purely-css"&gt;這裏示範的純CSS瀑布式佈局&lt;/a&gt;
實現文章和側邊欄的佈局，具體的實現代碼在
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/blob/master/static/bootstrap/waterfall.less"&gt;waterfall.less&lt;/a&gt;
，總算達到了想要的佈局了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id46"&gt;正文的樣式&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;最最重要的是文章正文的樣式。這裏我想要達到的效果是，在大屏幕上用更大的字號，讓讀者
看起來更舒適，同時在小屏幕上用比較小的字號，最終保證基本上「一行」的文字數接近。這個修改
主要針對 &lt;code class="code"&gt;
.jumbotron&lt;/code&gt;
，
用了 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/blob/master/static/bootstrap/jumbotron.less"&gt;不太科學的方式&lt;/a&gt;
代碼太長就不貼全了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id47"&gt;一些細微的定製&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;把主題配色改成了現在這樣的淡紫色
&lt;code class="code"&gt;
@brand-primary: darken(#6B5594, 6.5%);&lt;/code&gt;

，配合我的頭像風格， 這個修改只需要一行。
接着刪掉了 &lt;code class="code"&gt;
.btn&lt;/code&gt;
 的 &lt;code class="code"&gt;
white-space: nowrap;&lt;/code&gt;
 讓按鈕的文字可以換行，
這也只是一行修改。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年1月29日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;另外我也不太喜歡 Bootstrap 3 默認在手機上的 &lt;ruby&gt;&lt;rb&gt;摺疊導航欄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;collapsed navbar&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; ，
摺疊之後的操作不夠直觀方便而且依賴 javascript 所以有 bug …… 於是我把它關掉了，
具體方式是在 variables.less 把 &lt;code class="code"&gt;
@grid-float-breakpoint&lt;/code&gt;
 和
&lt;code class="code"&gt;
@grid-float-breakpoint-max&lt;/code&gt;
 都設爲0就可以了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id24"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id48"&gt;對 bootstrap-material-design 的定製&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這裏定製的地方不多。原樣式中一個不太科學的做法是所有 &lt;code class="code"&gt;
.btn&lt;/code&gt;
 都強制加上了陰影
效果，這在已經有陰影的環境裏用的話非常礙眼，像是 Win9x 風格的厚重睫毛膏。既然可以單獨
給每個樣式加陰影，於是就把 &lt;code class="code"&gt;
.btn&lt;/code&gt;
 強制的陰影去掉了，只保留鼠標懸停之後強調的陰影。&lt;/p&gt;
&lt;p&gt;其它定製的細節麼就是統一配色風格，修補漏洞錯誤，微調響應式效果而已，這裏不細說。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id25"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id49"&gt;將以上兩者整合在 pelican-bootstrap3 裏&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Pelican 實現顯示源代碼按鈕&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;p&gt;顯示源代碼按鈕借用了 Pelican 配置中自帶的 &lt;code class="code"&gt;
OUTPUT_SOURCES&lt;/code&gt;
 選項將源文件複製到輸出文件夾：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_SOURCES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;OUTPUT_SOURCES_EXTENSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'.rst'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後在 Makefile 裏用 pygmentize 把所有源代碼文件着色：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;find -iname &lt;span class="s2"&gt;"*.rst"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; parallel -I@  pygmentize -f html -o @.html @&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後在按鈕按下的時候用 jQuery 載入源代碼：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;onclick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"$.get('{{SITEURL}}/{{article.slug}}.rst.html', function(data){$('#source-code').html(data)});$('#article-content').toggle();$('#source-content').toggle();"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;雖然難看的 hack 比較多，但是能用！&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;雖說 pelican-bootstrap3 是我 fork 出來的，不過由於我修改的地方實在太多，代碼看來基本上
接近重寫了一份。好在之前有給 pelican 寫 bootstrap 2 主題的經驗，這次修改算得上駕輕就熟。
可以對比一下 &lt;a class="reference external" href="http://dandydev.net/"&gt;上游作者的博客&lt;/a&gt; 和這裏的樣子體會一下感覺。
具體修改過的地方包括：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;套用 bootstrap-material-design 的各個元素樣式。&lt;/li&gt;
&lt;li&gt;在文章列表模板應用上面提到的 Bootstrap 3 的柵格佈局和瀑布式佈局。&lt;/li&gt;
&lt;li&gt;翻譯到多個語言，這裏在後面的 i18n-subsite 插件裏詳述。&lt;/li&gt;
&lt;li&gt;套用後面會介紹到的各種插件。&lt;/li&gt;
&lt;li&gt;統一側邊欄的樣式到一個模板裏。&lt;/li&gt;
&lt;li&gt;添加 Atom 訂閱按鈕和 breadcrumb 條。&lt;/li&gt;
&lt;li&gt;對正文中出現的插圖，添加點擊放大的功能，通過 Bootstrap 的 &lt;code class="code"&gt;
modal&lt;/code&gt;
 實現。&lt;/li&gt;
&lt;li&gt;上面提到的用 &lt;a class="reference external" href="http://www.virtuosoft.eu/code/bootstrap-autohidingnavbar/"&gt;這個bootstrap插件&lt;/a&gt;
讓導航欄自動隱藏。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;顯示源代碼按鈕&lt;/strong&gt; ，也就是每篇文章信息欄中的
&lt;button class="btn btn-primary"&gt;&lt;i class="fa fa-code"&gt;&lt;/i&gt;&lt;/button&gt; 按鈕。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pelican-restructuredtext"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id50"&gt;插件: 發揮 Pelican 和 reStructuredText 的優勢&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先列舉一下我目前用到的所有插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"i18n_subsites"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s2"&gt;"plantuml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s2"&gt;"youku"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s2"&gt;"youtube"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'tipue_search'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'neighbors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'series'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'bootstrapify'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'twitter_bootstrap_rst_directives'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s2"&gt;"render_math"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;           &lt;span class="s1"&gt;'summary'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;嗯其實不算多。接下來逐一介紹一下這些各具特色的插件。&lt;/p&gt;
&lt;div class="section" id="i18n-subsites"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id51"&gt;i18n-subsites&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這個插件的目的是創建 &lt;ruby&gt;&lt;rb&gt;國際化&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;internationalization&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
&lt;ruby&gt;&lt;rb&gt;子站&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;subsite&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。&lt;/p&gt;
&lt;p&gt;之前介紹 Pelican 配置的時候就提到過，
原本的 Pelican 就支持一篇文章用多種語言書寫，有 &lt;code class="code"&gt;
lang&lt;/code&gt;
 屬性註明這篇文章使用的
語言，以及 &lt;code class="code"&gt;
slug&lt;/code&gt;
 屬性註明多語言的翻譯之間的關聯，換句話說同一篇文章的多個語言
版本應該有相同的 &lt;code class="code"&gt;
slug&lt;/code&gt;
 和不同的 &lt;code class="code"&gt;
lang&lt;/code&gt;
。然後原本 Pelican 裏對多語言的
實現方式是，首先有一個 &lt;strong&gt;主語言&lt;/strong&gt; 是模板和大部分文章採用的語言，文章列表中會優先列出
用 &lt;strong&gt;主語言&lt;/strong&gt; 撰寫的文章，然後從 &lt;strong&gt;主語言&lt;/strong&gt; 的文章鏈接到別的翻譯版本。
很多博客系統和CMS對多語言的支持都是這樣的，這種處理方式的缺點也顯而易見：作爲 &lt;strong&gt;主語言&lt;/strong&gt;
的語言必須足夠通用，纔能讓進來的人找到合適的翻譯版本，所以通常 &lt;strong&gt;主語言&lt;/strong&gt; 都是英語。&lt;/p&gt;
&lt;p&gt;而這個插件做的事情描述起來很簡單：將文章按語言屬性分到多個子站，每個子站獨立放在各自的文件夾。
比如主站是 &lt;a class="reference external" href="https://farseerfc.github.io/"&gt;https://farseerfc.github.io/&lt;/a&gt; 的話，那麼英語的子站就可以是
&lt;a class="reference external" href="https://farseerfc.github.io/en/"&gt;https://farseerfc.github.io/en/&lt;/a&gt; 。
然後分別對多個子站生成靜態頁面。具體的實現方式是對 pelican 的頁面生成步驟做了拆分：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;pelican 按正常情況讀入文章，生成元信息。&lt;/li&gt;
&lt;li&gt;i18n-subsites 針對每個語言，覆蓋掉 pelican 的一些選項設置比如路徑和 URL ，
分別調用 pelican 的頁面生成器按模板生成文章。&lt;/li&gt;
&lt;li&gt;對共用的靜態內容比如模板的 js 和 css 文件，只在主站中生成，子站中的相應鏈接全部鏈回主站。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;雖然描述起來簡單，但是這個插件可以說最大化利用了 Pelican 的插件系統，實現細節相對比較
複雜，大概是我用的這些插件裏面最複雜的了。不誇張的說 Pelican 3.4 支持的新插件 API 和
站內鏈接功能基本上就是爲了配合這個插件的。至於具體它會覆蓋哪些 Pelican 的配置，請參閱它的
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-plugins/blob/master/i18n_subsites/README.rst"&gt;README.md文件&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;按內容拆分多語言子站的做法只解決了問題的一半，還留下另一半的問題，也即對模板的翻譯。
對這個問題， i18n-subsites 提供了兩套方案供選擇：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;用覆蓋配置路徑的方式讓每個子站套用不同的模板。這配置起來簡單，但是對模板維護起來有點困難。&lt;/li&gt;
&lt;li&gt;用 jinja2 的 i18n 插件，配合 Python 的 gettext 庫實現內容翻譯。這個方案
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-plugins/blob/master/i18n_subsites/localizing_using_jinja2.rst"&gt;配置起來比較複雜&lt;/a&gt; ，但是配置好之後用起來就很方便了。
只是要記得每次修改了模板都要更新翻譯，處理 *.po 和 *.mo 文件等等瑣碎事宜。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;這裏我用 jinja2 的 i18n 插件的方式實現了模板的翻譯，
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/translations"&gt;各個語言的翻譯在這裏&lt;/a&gt; ，
然後用 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/blob/master/SConstruct"&gt;這裏的 SCons 腳本&lt;/a&gt;
根據內容是否變化自動更新 po 和 mo 文件。&lt;/p&gt;
&lt;p&gt;配置好這一套方案之後，還要注意在模板和文章中處理好鏈接。用 Pelican 3.4 之後推薦的
新的文章間鏈接的寫法以及將 &lt;code class="code"&gt;
SITEURL&lt;/code&gt;
 設置爲實際 URL 並且關閉 &lt;code class="code"&gt;
RELATIVE_URLS&lt;/code&gt;

之後，應該就不會出沒什麼問題了（可能還要考慮使用的模板和插件的兼容性，大部分都是寫死了 URL 的問題）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plantuml"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id52"&gt;plantuml&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
嵌入 PlantUML 的示例&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="uml diagram" class="uml img-responsive" src="//farseerfc.me/uml/8e4b1ee3.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plantuml.sourceforge.net/"&gt;PlantUML&lt;/a&gt; 是一個Java實現的，
用接近文字描述的語言繪製 UML 圖或者 GUI 界面圖的工具，非常適合嵌入在
Markdown、 reStructuredText、 AsciiDoc 等這種輕量級標記語言裏。
然後麼這個 plantuml 插件就是定義了一個新的 reStructuredText
&lt;ruby&gt;&lt;rb&gt;指示符&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;directive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; &lt;code class="code"&gt;
.. uml::&lt;/code&gt;
，把嵌入的內容提取出來調用 plantuml 命令處理
成圖像然後再插入到文章中。&lt;/p&gt;
&lt;p&gt;比如示例裏的這個 UML 圖就是用這樣一段簡單的文字描述生成的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;uml&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Object &amp;lt;|-- ArrayList&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    Object : equals()&lt;/span&gt;
&lt;span class="code-line"&gt;    ArrayList : Object[] elementData&lt;/span&gt;
&lt;span class="code-line"&gt;    ArrayList : size()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;實際用起來這個插件實現上稍微有點小問題：首先它只支持 python2，所以我把它改寫成了 python
2 和 3 都通用的語法；其次它原本輸出的文件夾似乎會被 pelican 刪掉，所以把它改了個位置；
然後它輸出的 URL 也和 i18n-subsites 插件間有不兼容的問題，也順帶修掉了。
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-plugins/tree/master/plantuml"&gt;修改之後的代碼在這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年1月30日更新&lt;/strong&gt;&lt;/div&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
嵌入 Ditaa 的示例&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="ditaa diagram" class="ditaa img-responsive" src="//farseerfc.me/uml/973a8424.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;plantuml 是繪製UML的，除此之外還有一個類似的工具是繪製一般的 &lt;ruby&gt;&lt;rb&gt;流程圖&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;diagram&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt;
的，叫 &lt;a class="reference external" href="http://ditaa.sourceforge.net/"&gt;ditaa&lt;/a&gt; ，和 plantuml 非常像，也比較像
reStructuredText 的表格。
於是我也照貓畫虎實現了一個 ditaa 的 &lt;ruby&gt;&lt;rb&gt;指示符&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;directive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; ，用起來類似這樣：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;ditaa&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;                       +-------------+&lt;/span&gt;
&lt;span class="code-line"&gt;                       &lt;span class="o"&gt;|&lt;/span&gt;   ditaa     |-------+&lt;/span&gt;
&lt;span class="code-line"&gt;                       &lt;span class="o"&gt;|&lt;/span&gt;  Diagram    |       |&lt;/span&gt;
&lt;span class="code-line"&gt;                       +-------------+       | PNG out&lt;/span&gt;
&lt;span class="code-line"&gt;                           ^                 |&lt;/span&gt;
&lt;span class="code-line"&gt;                           &lt;span class="o"&gt;|&lt;/span&gt; ditaa in        |&lt;/span&gt;
&lt;span class="code-line"&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;                 v&lt;/span&gt;
&lt;span class="code-line"&gt;     +--------+   +--------+----+    /----------------\&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;|&lt;/span&gt;        | --+   Pelican   +--&amp;gt; |                |&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;|&lt;/span&gt;  Text  |   +-------------+    | Beautiful Blog |&lt;/span&gt;
&lt;span class="code-line"&gt;     |Document|   |   !magic!   |    |                |&lt;/span&gt;
&lt;span class="code-line"&gt;     &lt;span class="o"&gt;|&lt;/span&gt;     {d}|   |             |    |                |&lt;/span&gt;
&lt;span class="code-line"&gt;     +---+----+   +-------------+    \----------------/&lt;/span&gt;
&lt;span class="code-line"&gt;         :                                   ^&lt;/span&gt;
&lt;span class="code-line"&gt;         &lt;span class="o"&gt;|&lt;/span&gt;          Lots of work             |&lt;/span&gt;
&lt;span class="code-line"&gt;         +-----------------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="render-math"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id53"&gt;render-math&lt;/a&gt;&lt;/h3&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
嵌入公式的示例&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;p&gt;示範行內公式 &lt;span class="math"&gt;\(A_\text{c} = (\pi/4) d^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;整行公式&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\alpha{}_t(i) = P(O_1, O_2, \ldots  O_t, q_t = S_i \lambda{})
\end{equation*}
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;這個插件提供在 reStructuredText 中用 LaTeX 語法插入數學公式的能力，定義了
&lt;code class="code"&gt;
:math:&lt;/code&gt;
&lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 和 &lt;code class="code"&gt;
.. math::&lt;/code&gt;
&lt;ruby&gt;&lt;rb&gt;指示符&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;directive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。
實際工作的渲染庫當然是大名鼎鼎的 &lt;a class="reference external" href="http://www.mathjax.org/"&gt;MathJax&lt;/a&gt; ，這個插件
會用 MathJax 的 CDN 載入，所以也沒有額外的依賴文件。（只是不知道是否會被國內牆掉，
如果公式顯示不正常請 &lt;strong&gt;務必&lt;/strong&gt; 告訴我。）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="youtube-youku"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id54"&gt;youtube 和 youku&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;顧名思義，這兩個插件分別實現嵌入 youtube 和 youku 視頻。其中 youtube 是原本就有的插件，
youku 是我照貓畫虎抄的。
之前寫了一篇
&lt;a class="reference external" href="//farseerfc.me/jumping-kde5-plasma-activities-button.html"&gt;KDE5 Plasma 之跳動賣萌的活動按鈕&lt;/a&gt;
用到了這兩個插件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tipue-search"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id55"&gt;tipue_search&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.tipue.com/search/"&gt;Tipue search&lt;/a&gt; 是一個非常有意思也很強大的搜索工具，
通過 jQuery 實現靜態博客的站內搜索功能。實現方式是，它需要你寫一個 json 文件，包含
整個網站的 &lt;strong&gt;全部&lt;/strong&gt; 文章的標題和文字內容，然後在搜索的時候讀入這個 json 做搜索（是不是有點耍賴）。
雖然聽起來會有性能問題，但是應用在小型的靜態博客上效果意外很不錯，比如本站的所有文章內容
放在一起的 json 也只有 300KiB 左右。&lt;/p&gt;
&lt;p&gt;這個插件就是自動在 pelican 輸出完全部靜態網頁之後，調用 beautifulsoup4 從所有網頁中抽取出
純文本，產生這個 json 給 Tipue 用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="neighbors-series"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id56"&gt;neighbors 和 series&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這兩個插件比較類似也都比較簡單， neighbors 提供一篇文章的前後文章信息，
在主題模板裏可以用來製作 &lt;strong&gt;上一篇&lt;/strong&gt; 和 &lt;strong&gt;下一篇&lt;/strong&gt; 按鈕。
series 提供將多篇文章歸類爲一個 &lt;strong&gt;系列&lt;/strong&gt; 的支持，當然也需要在
主題模板中定義顯示「文章系列」的列表。這兩個插件的效果都能在本文末尾，評論區上方的部分看到。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bootstrapify-twitter-bootstrap-rst-directives"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id57"&gt;bootstrapify 和 twitter_bootstrap_rst_directives&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這兩個插件讓文章的 &lt;strong&gt;正文&lt;/strong&gt; 套用上 Bootstrap 的樣式。&lt;/p&gt;
&lt;p&gt;bootstrapify 這個插件實現得比較簡單，用 beautifulsoup4 在靜態網頁的結果裏面過濾元素，
對 &lt;code class="code"&gt;
table&lt;/code&gt;
 , &lt;code class="code"&gt;
img&lt;/code&gt;
 , &lt;code class="code"&gt;
embed&lt;/code&gt;
 , &lt;code class="code"&gt;
iframe&lt;/code&gt;
 ,
&lt;code class="code"&gt;
video&lt;/code&gt;
 , &lt;code class="code"&gt;
object&lt;/code&gt;
 這幾個標籤套用上
&lt;a class="reference external" href="http://getbootstrap.com/components/#responsive-embed"&gt;響應式嵌入對象的類&lt;/a&gt;
讓他們更美觀。&lt;/p&gt;
&lt;p&gt;twitter_bootstrap_rst_directives 這個插件則是增加了幾個 reStructuredText 的
&lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 和 &lt;ruby&gt;&lt;rb&gt;指示符&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;directive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。
它實現的 &lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 包括：
用 &lt;code class="code"&gt;
:kbd:&lt;/code&gt;
 實現如 &lt;kbd class="kbd"&gt;
Ctrl+C&lt;/kbd&gt;
 這樣的鍵盤快捷鍵，
用 &lt;code class="code"&gt;
:code:&lt;/code&gt;
 嵌入代碼片段，用 &lt;code class="code"&gt;
:glyph:&lt;/code&gt;
 嵌入字符圖標。
它實現的 &lt;ruby&gt;&lt;rb&gt;指示符&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;directive&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 包括：
&lt;a class="reference external" href="http://getbootstrap.com/components/#labels"&gt;labels 行內標籤&lt;/a&gt; ，
&lt;a class="reference external" href="http://getbootstrap.com/components/#alerts"&gt;alerts 提示段落&lt;/a&gt; ，
&lt;a class="reference external" href="http://getbootstrap.com/components/#panels"&gt;panels 嵌入面板&lt;/a&gt; ，
以及還有一個 &lt;a class="reference external" href="http://getbootstrap.com/components/#media"&gt;media 混排圖標&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;對其中的 &lt;code class="code"&gt;
panel&lt;/code&gt;
 我改寫了它在文章正文中的樣式，在 &lt;code class="code"&gt;
lg&lt;/code&gt;
 或者 &lt;code class="code"&gt;
xl&lt;/code&gt;

的屏幕寬度下，分別用 &lt;span class="math"&gt;\(\frac{1}{2}\)&lt;/span&gt; 和 &lt;span class="math"&gt;\(\frac{1}{3}\)&lt;/span&gt; 大小的嵌入面板，
簡單實現和正文文字的圖文混排。&lt;/p&gt;
&lt;p&gt;除此以外我還在 twitter_bootstrap_rst_directives 這個插件裏套用它的框架實現了兩個額外
的 &lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; ， 分別是 &lt;code class="code"&gt;
:ruby:&lt;/code&gt;
 ：通過 html5 的 &lt;code class="code"&gt;
&amp;lt;ruby&amp;gt;&lt;/code&gt;

標籤實現文字上方的注音（firefox下
&lt;a class="reference external" href="https://bugzilla.mozilla.org/show_bug.cgi?id=33339"&gt;不支持&lt;/a&gt;
，會使用文字後的括號顯示）， 以及 &lt;code class="code"&gt;
:html:&lt;/code&gt;
 ：在
行內插入 &lt;ruby&gt;&lt;rb&gt;裸&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;raw&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; html 標籤（這屬於 Markdown 的基本功能，在 reStructuredText
這邊由於要考慮多種輸出格式於是就比較麻煩了）。這兩個 &lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-plugins/blob/master/twitter_bootstrap_rst_directives/bootstrap_rst_directives.py#L140"&gt;實現代碼在這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月3日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;今天又在 twitter_bootstrap_rst_directives 裏增加了兩個 &lt;ruby&gt;&lt;rb&gt;行內角色&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;role&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 。
一個是 &lt;code class="code"&gt;
:twi:&lt;/code&gt;
 用來寫 twitter 用戶的鏈接，比如 &lt;a class="reference external" href="//twitter.com/farseerfc"&gt;@farseerfc&lt;/a&gt; ，另一個是
&lt;code class="code"&gt;
:irc:&lt;/code&gt;
 用來指向 freenode 的 channel ，比如 &lt;a class="reference external" href="//webchat.freenode.net/?channels=yssyd3"&gt;#yssyd3&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年2月14日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;今天增加了 &lt;code class="code"&gt;
.. friend::&lt;/code&gt;
 用來寫好友鏈接，以及 &lt;code class="code"&gt;
fref&lt;/code&gt;
 用來引用好友，
比如 &lt;a class="reference external" href="/links.html#lqymgt"&gt;LQYMGT&lt;/a&gt; 這樣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extract-toc-summary"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id58"&gt;extract_toc 和 summary&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最後是這兩個有點「名不副實」的插件。&lt;/p&gt;
&lt;p&gt;reStructuredText 原本就有自動生成
&lt;ruby&gt;&lt;rb&gt;目錄&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;toc&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 的功能，用起來也非常簡單，只需要在想要插入目錄的地方寫一行
&lt;code class="code"&gt;
.. contents::&lt;/code&gt;
 ，剩下的都由 docutils 自動生成了。
只是當然這樣生成的目錄肯定會插入在文章的正文裏，而 extract_toc 這個插件的作用就是簡單地
把這個目錄抽取出來，讓模板能在別的地方放置這個目錄。比如我這裏就把目錄放在了一個
&lt;code class="code"&gt;
panel&lt;/code&gt;
 裏。&lt;/p&gt;
&lt;p&gt;然後 Pelican 也原本就有從文章中抽取 &lt;ruby&gt;&lt;rb&gt;總結&lt;/rb&gt;&lt;rp&gt;(&lt;/rp&gt;&lt;rt&gt;summary&lt;/rt&gt;&lt;rp&gt;)&lt;/rp&gt;&lt;/ruby&gt; 顯示在文章列表的功能。
Pelican 原始的實現似乎是按照文字數抽取前半段，不總是適合作爲總結。 於是這個 summary
插件的作用其實是允許在正文中以特殊的註釋的方式標註哪些部分應該被抽出來作爲總結。
summary 這個插件原本的實現只允許抽取一段文字，我又對它的實現做了少許擴充，允許標註多段
文字合併起來作爲總結。&lt;/p&gt;
&lt;div class="label label-warning"&gt;
&lt;strong&gt;2015年1月29日更新&lt;/strong&gt;&lt;/div&gt;
&lt;p&gt;今天在 extract_toc 插件的幫助下，在側邊欄裏放了一個 Bootstrap affix 的目錄，
它保持在頁面的右側位置不變，方便導航到文章的各個地方。具體實現方法除了 Bootstrap 3 的
&lt;a class="reference external" href="http://getbootstrap.com/javascript/#affix"&gt;Affix 文檔&lt;/a&gt; ，還參考了
&lt;a class="reference external" href="http://tutsme-webdesign.info/bootstrap-3-affix/"&gt;這篇更詳細的說明&lt;/a&gt; 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id36"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id59"&gt;結語&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這個博客的配置都可以在
&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc/blob/master/pelicanconf.py"&gt;github 上找到&lt;/a&gt;
，包括用來
&lt;a class="reference external" href="https://github.com/farseerfc/farseerfc/blob/master/Makefile"&gt;自動生成整個博客的 Makefile&lt;/a&gt;
，由於比較長，這裏就不再貼了。&lt;/p&gt;
&lt;p&gt;折騰這個主題前後歷時兩個月，期間學會了不少東西，也算是不錯的收穫吧。
現在既然基礎打好了，接下來就要開始多寫博客了。（希望拖延症不會再犯……）&lt;/p&gt;
&lt;p&gt;最近發現除了我的博客之外還有一個網站
&lt;a class="reference external" href="http://www.kansaslinuxfest.us/"&gt;Kansas Linux Fest&lt;/a&gt; fork
了我的主題，不過他們用了我修改的早期版本，還是原本的 Bootstrap 3 和
bootstrap-material-design 樣式。自己草草修改的東西被別人用到果然還是有點小激動呢，
以及接下來不能馬馬虎虎地寫 commit 消息了。&lt;/p&gt;
&lt;table border="0" class="footnote docutils table" frame="void" id="id37" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;賽65:17「看哪！我造新天新地」啟21:5「我將一切都更新了。」&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="tech"></category><category term="python"></category><category term="pelican"></category><category term="bootstrap"></category><category term="material"></category><category term="subsite"></category></entry><entry><title>總結一下 Material Design 的 CSS 框架</title><link href="//farseerfc.me/summarize-material-design-css-framework.html" rel="alternate"></link><published>2015-01-16T03:27:00+09:00</published><updated>2015-01-16T03:27:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2015-01-16:/summarize-material-design-css-framework.html</id><summary type="html">&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;現在這裏的界面風格要從 Google 在 &lt;a class="reference external" href="https://www.google.com/events/io"&gt;I/O 2014 大會&lt;/a&gt;
上公佈Android L 也即 後來的 Lollipop 說起。 他們在談論界面設計的時候公佈了他們的
設計準則： &lt;a class="reference external" href="http://www.google.com/design/spec/material-design/introduction.html"&gt;Material Design&lt;/a&gt; (&lt;a class="reference external" href="http://wcc723.gitbooks.io/google_design_translate/"&gt;中文非官方翻譯&lt;/a&gt; )。
當然這只是一些準則，總結並描述了之前在 Web 設計和移動端 App 界面設計方面的一些規範，
並且用材料的類比來形象化的比喻這個準則。關於 Material Design 的更多中文資料可
&lt;a class="reference external" href="http://www.ui.cn/Material/"&gt;參考這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;看到 Material Design 之後就覺得這個設計風格非常符合直覺，於是想在這邊也用上
Material Design。 但是我在 Web 前端科技樹上沒點多少技能點，所以想找找別人實現好的模板
或者框架直接套用上。在網絡上搜索數日找到了這幾個：&lt;/p&gt;
&lt;div class="section" id="polymer-paper-elements"&gt;
&lt;h2&gt;Polymer Paper Elements&lt;/h2&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Polymer&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="https://www.polymer-project.org/images/logos/p-logo.svg" type="image/svg+xml"&gt;
Polymer logo&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Google …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;現在這裏的界面風格要從 Google 在 &lt;a class="reference external" href="https://www.google.com/events/io"&gt;I/O 2014 大會&lt;/a&gt;
上公佈Android L 也即 後來的 Lollipop 說起。 他們在談論界面設計的時候公佈了他們的
設計準則： &lt;a class="reference external" href="http://www.google.com/design/spec/material-design/introduction.html"&gt;Material Design&lt;/a&gt; (&lt;a class="reference external" href="http://wcc723.gitbooks.io/google_design_translate/"&gt;中文非官方翻譯&lt;/a&gt; )。
當然這只是一些準則，總結並描述了之前在 Web 設計和移動端 App 界面設計方面的一些規範，
並且用材料的類比來形象化的比喻這個準則。關於 Material Design 的更多中文資料可
&lt;a class="reference external" href="http://www.ui.cn/Material/"&gt;參考這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;看到 Material Design 之後就覺得這個設計風格非常符合直覺，於是想在這邊也用上
Material Design。 但是我在 Web 前端科技樹上沒點多少技能點，所以想找找別人實現好的模板
或者框架直接套用上。在網絡上搜索數日找到了這幾個：&lt;/p&gt;
&lt;div class="section" id="polymer-paper-elements"&gt;
&lt;h2&gt;Polymer Paper Elements&lt;/h2&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Polymer&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="https://www.polymer-project.org/images/logos/p-logo.svg" type="image/svg+xml"&gt;
Polymer logo&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;Google 官方提供的參考實現應該是 &lt;a class="reference external" href="https://www.polymer-project.org/"&gt;Polymer&lt;/a&gt; 中的
&lt;a class="reference external" href="https://www.polymer-project.org/docs/elements/paper-elements.html"&gt;Paper Elements&lt;/a&gt; 。&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;p&gt;由於是 &lt;strong&gt;官方參考實現&lt;/strong&gt; ，這個框架的確非常忠實地實現了 Material Design 的設計，但是同時
由於它基於 &lt;a class="reference external" href="http://webcomponents.org/"&gt;HTML5 Web Components&lt;/a&gt; 構建，相關技術我還
不太懂，瀏覽器兼容性和其餘 HTML 技術的兼容性也還不太完善的樣子……&lt;/p&gt;
&lt;p&gt;並且對於我這個 Web 開發的半吊子來說，Polymer 只是提供了一組設計組建，沒有完善的
&lt;strong&gt;響應式&lt;/strong&gt; (responsive) 佈局支持，也沒有 Navbar 這種常見的框架組建，真的要用起來的話還
需要手工實現不少東西。於是口水了半天之後只好放棄……以後可能真的會換用這個，只是目前需要學
的東西太多了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="angular-material-design"&gt;
&lt;h2&gt;Angular Material Design&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
AngularJS&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="AngularJS logo" class="img-responsive" src="https://angularjs.org/img/AngularJS-large.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt; 是 Google 對 Web Components 技術的另一個
嘗試。而這額 &lt;a class="reference external" href="https://material.angularjs.org/"&gt;Angular Material Design&lt;/a&gt; 項目
就是基於 AngularJS 構建的Material Design 庫啦，同樣是 Google 出品所以應該算得上半個
官方實現吧。 相比於 Polymer, AngularJS 算是實用了很多，提供了基於
&lt;a class="reference external" href="http://www.w3.org/TR/css3-flexbox/"&gt;CSS Flexbox&lt;/a&gt; 的佈局。有人對這兩者的評價是，
如果說 Polymer 代表了 &lt;strong&gt;未來趨勢&lt;/strong&gt; ，那麼 AngularJS 就是 &lt;strong&gt;眼下可用&lt;/strong&gt; 的 Web
Components 實現了。&lt;/p&gt;
&lt;p&gt;只不過同樣是因爲它是 Components 的框架，對 WebApp 的支持很豐富，大量採用 Ajax 等
JavaScript 技術， 對於我這個靜態博客來說仍然稍顯高級了……非常擔心還不支持 HTML5 的瀏覽器
比如 w3m 甚至 cURL 對它的支持程度。 於是最終也沒有使用它。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="materialize"&gt;
&lt;h2&gt;Materialize&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Materialize&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Materialize logo" class="img-responsive" src="https://raw.githubusercontent.com/Dogfalo/materialize/master/images/materialize.gif"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://materializecss.com/"&gt;Materialize&lt;/a&gt; 這是一批(自稱?)熟悉 Android 上
Material Design 的設計師們新近出爐的框架，試圖提供一個接近 Bootstrap 的方案。
最早是在 &lt;a class="reference external" href="http://www.reddit.com/r/web_design/comments/2lt4qy/what_do_you_think_of_materialize_a_responsive/"&gt;Reddit&lt;/a&gt; 上看到對它的討論的，立刻覺得這個想法不錯。&lt;/p&gt;
&lt;p&gt;體驗一下官網的設計就可以看出，他們的動畫效果非常接近 Polymer 的感覺，響應式設計的佈局
也還不錯。 只是同樣體驗一下他們現在的官網就可以看出，他們目前的
&lt;a class="reference external" href="https://github.com/Dogfalo/materialize/issues"&gt;bug 還比較多&lt;/a&gt; ，甚至一些 bug
在他們自己的主頁上也有顯現。 雖然不想給這個新出爐的項目潑涼水，不過看來要達到他們聲稱的接近
Bootstrap 的易用度還任重而道遠……&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bootstrap-material-design-bootstrap3"&gt;
&lt;h2&gt;bootstrap-material-design + bootstrap3&lt;/h2&gt;
&lt;p&gt;這是我最終選擇的方案。這個方案將三個項目組合在了一起，分別是
&lt;a class="reference external" href="http://fezvrasta.github.io/bootstrap-material-design/"&gt;bootstrap-material-design&lt;/a&gt;
, &lt;a class="reference external" href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;
和 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap 3&lt;/a&gt; 。
Bootstrap 3 想必不用再介紹了，很多網站都在使用這套框架，定製性很高。
bootstrap-material-design 是在 Bootstrap 3 的基礎上套用 Material Design 風格
製作的一套 CSS 庫，當然也不是很完善並且在不斷改進中，一些細節其實並不是很符合我的要求。
最後 pelican-bootstrap3 是用 Bootstrap 3 做的 pelican 模板。
這三個項目或多或少都有點不合我的口味，於是嘛就把 pelican-bootstrap3 fork了一套放在
&lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3"&gt;這裏&lt;/a&gt; ，其中還包括我自己改
過的 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/bootstrap"&gt;Bootstrap3 樣式&lt;/a&gt;
和 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/material"&gt;Material 樣式&lt;/a&gt;
，需要的可以自取。&lt;/p&gt;
&lt;p&gt;至於細節上我定製了哪些地方，敬請聽下回分解……&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="css"></category><category term="material"></category><category term="paper"></category></entry><entry><title>從非緩衝輸入流到 Linux 控制檯的歷史</title><link href="//farseerfc.me/from-unbuffered-stdin-to-history-of-linux-tty.html" rel="alternate"></link><published>2014-12-12T17:06:00+09:00</published><updated>2014-12-12T17:06:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2014-12-12:/from-unbuffered-stdin-to-history-of-linux-tty.html</id><summary type="html">
&lt;p&gt;這篇也是源自於水源C板上板友的一個問題，涉及Linux上的控制檯的實現方式和歷史原因。因爲內容比較長，所以在這裏再排版一下發出來。
&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1418138991,file,M.1418138991.A.html"&gt;原帖在這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;可以設置不帶緩衝的標準輸入流嗎？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WaterElement(UnChanged) 於 2014年12月09日23:29:51 星期二 問到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;請問對於標準輸入流可以設置不帶緩衝嗎？比如以下程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buffer …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;這篇也是源自於水源C板上板友的一個問題，涉及Linux上的控制檯的實現方式和歷史原因。因爲內容比較長，所以在這裏再排版一下發出來。
&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1418138991,file,M.1418138991.A.html"&gt;原帖在這裏&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;可以設置不帶緩衝的標準輸入流嗎？&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WaterElement(UnChanged) 於 2014年12月09日23:29:51 星期二 問到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;請問對於標準輸入流可以設置不帶緩衝嗎？比如以下程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buffer is:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;似乎還是需要在命令行輸入後按回車纔會讓 &lt;code class="code"&gt;
fgets&lt;/code&gt;
 返回，不帶緩衝究竟體現在哪裏？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;這和緩存無關，是控制檯的實現方式的問題。&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;再講細節一點，這裏有很多個程序和設備。以下按 linux 的情況講：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;終端模擬器窗口（比如xterm）收到鍵盤事件&lt;/li&gt;
&lt;li&gt;終端模擬器(xterm)把鍵盤事件發給虛擬終端 pty1&lt;/li&gt;
&lt;li&gt;pty1 檢查目前的輸入狀態，把鍵盤事件轉換成 stdin 的輸入，發給你的程序&lt;/li&gt;
&lt;li&gt;你的程序的 c 庫從 stdin 讀入一個輸入，處理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;標準庫說的輸入緩存是在 4 的這一步進行的。而行輸入是在 3 的這一步被緩存起來的。&lt;/p&gt;
&lt;p&gt;終端pty有多種狀態，一般控制檯程序所在的狀態叫「回顯行緩存」狀態，這個狀態的意思是:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;所有普通字符的按鍵，會回顯到屏幕上，同時記錄在行緩存區裏。&lt;/li&gt;
&lt;li&gt;處理退格( &lt;kbd class="kbd"&gt;
BackSpace&lt;/kbd&gt;
 )，刪除( &lt;kbd class="kbd"&gt;
Delete&lt;/kbd&gt;
 )按鍵爲刪掉字符，左右按鍵移動光標。&lt;/li&gt;
&lt;li&gt;收到回車的時候把整個一行的內容發給stdin。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;參考： &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cooked_mode"&gt;http://en.wikipedia.org/wiki/Cooked_mode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同時在Linux/Unix下可以發特殊控制符號給pty讓它進入「raw」狀態，這種狀態下按鍵
不會被回顯，顯示什麼內容都靠你程序自己控制。
如果你想得到每一個按鍵事件需要用raw狀態，這需要自己控制回顯自己處理緩衝，
簡單點的方法是用 readline 這樣的庫（基本就是「回顯行緩存」的高級擴展，支持了
Home/End，支持歷史）或者 ncurses 這樣的庫（在raw狀態下實現了一個簡單的窗口/
事件處理框架）。&lt;/p&gt;
&lt;p&gt;參考： &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_terminal_interface#History"&gt;http://en.wikipedia.org/wiki/POSIX_terminal_interface#History&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;除此之外， &lt;kbd class="kbd"&gt;
Ctrl-C&lt;/kbd&gt;
 轉換到 SIGINT ， &lt;kbd class="kbd"&gt;
Ctrl-D&lt;/kbd&gt;
 轉換到 EOF 這種也是在 3 這一步做的。&lt;/p&gt;
&lt;p&gt;以及，有些終端模擬器提供的 &lt;kbd class="kbd"&gt;
Ctrl-Shift-C&lt;/kbd&gt;
 表示複製這種是在 2 這一步做的。&lt;/p&gt;
&lt;p&gt;以上是 Linux/unix 的方式。 Windows的情況大體類似，只是細節上有很多地方不一樣：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;窗口事件的接收者是創建 cmd 窗口的 Win32 子系統。&lt;/li&gt;
&lt;li&gt;Win32子系統接收到事件之後，傳遞給位於 命令行子系統 的 cmd 程序&lt;/li&gt;
&lt;li&gt;cmd 程序再傳遞給你的程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Windows上同樣有類似行緩存模式和raw模式的區別，只不過實現細節不太一樣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;strace查看了下&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WaterElement(UnChanged) 於 2014年12月10日21:53:54 星期三 回復：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;感謝FC的詳盡解答。&lt;/p&gt;
&lt;p&gt;用strace查看了下，設置標準輸入沒有緩存的話讀每個字符都會調用一次 &lt;code class="code"&gt;
read&lt;/code&gt;
 系統調用，
比如輸入abc：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;read(0, abc&lt;/span&gt;
&lt;span class="code-line"&gt;"a", 1)                         = 1&lt;/span&gt;
&lt;span class="code-line"&gt;read(0, "b", 1)                         = 1&lt;/span&gt;
&lt;span class="code-line"&gt;read(0, "c", 1)                         = 1&lt;/span&gt;
&lt;span class="code-line"&gt;read(0, "\n", 1)                        = 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果有緩存的話就只調用一次了 &lt;code class="code"&gt;
read&lt;/code&gt;
 系統調用了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;read(0, abc&lt;/span&gt;
&lt;span class="code-line"&gt;"abc\n", 1024)                  = 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-mode"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;如果想感受一下 raw mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;沒錯，這個是你的進程內C庫做的緩存，tty屬於字符設備所以是一個一個字符塞給你的
程序的。&lt;/p&gt;
&lt;p&gt;如果想感受一下 raw mode 可以試試下面這段程序（沒有檢測錯誤返回值）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;termios.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ttyfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;termios&lt;/span&gt; &lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;/* reset tty - useful also for restoring the terminal when this process&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;   wishes to temporarily relinquish the tty&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;*/&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;tty_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* flush and reset */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcsetattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TCSAFLUSH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;/* put terminal in raw mode - see termio(7I) for modes */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;tty_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;termios&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* copy original and then modify below */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* input modes - clear indicated ones giving: no break, no CR to NL,&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;       no parity check, no strip char, no start/stop output (sic) control */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_iflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BRKINT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ICRNL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;INPCK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ISTRIP&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IXON&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* output modes - clear giving: no post processing such as NL to CR+NL */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_oflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OPOST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* control modes - set 8 bit chars */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cflag&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CS8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* local modes - clear giving: echoing off, canonical off (no erase with&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;       backspace, ^U,...),  no extended functions, no signal chars (^Z,^C) */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_lflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ECHO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ICANON&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IEXTEN&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ISIG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* control chars - set return condition: min number of bytes and timer */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after 5 bytes or .8 seconds&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="cm"&gt;                                                after first byte seen      */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* immediate - anything       */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after two bytes, no timer  */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after a byte or .8 seconds */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="cm"&gt;/* put terminal in raw mode after flushing */&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;tcsetattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TCSAFLUSH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tty_reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;tty_raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buffer is:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;終端上的字符編程&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;vander(大青蛙) 於 2014年12月12日08:52:20 星期五 問到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;學習了！&lt;/p&gt;
&lt;p&gt;進一步想請教一下fc大神。如果我在Linux上做終端上的字符編程，是否除了用ncurses庫
之外，也可以不用該庫而直接與終端打交道，就是你所說的直接在raw模式？
另外，終端類型vt100和linux的差別在哪裏？爲什麼Kevin Boone的KBox配置手冊裏面說必
須把終端類型設成linux，而且要加上terminfo文件，才能讓終端上的vim正常工作？term
info文件又是幹什麼的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Linux控制檯的歷史&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;嗯理論上可以不用 ncurses 庫直接在 raw 模式操縱終端。&lt;/p&gt;
&lt;p&gt;這裏稍微聊一下terminfo/termcap的歷史，詳細的歷史和吐槽參考
&lt;a class="reference external" href="http://web.mit.edu/~simsong/www/ugh.pdf"&gt;Unix hater's Handbook&lt;/a&gt;
第6章 Terminal Insanity。&lt;/p&gt;
&lt;p&gt;首先一個真正意義上的終端就是一個輸入設備（通常是鍵盤）加上一個輸出設備（打印
機或者顯示器）。很顯然不同的終端的能力不同，比如如果輸出設備是打印機的話，顯
示出來的字符就不能刪掉了（但是能覆蓋），而且輸出了一行之後就不能回到那一行了
。再比如顯示器終端有的支持粗體和下劃線，有的支持顏色，而有的什麼都不支持。
早期Unix工作在電傳打字機（TeleTYpe）終端上，後來Unix被port到越來越多的機器上
，然後越來越多類型的終端會被連到Unix上，很可能同一臺Unix主機連了多個不同類型
的終端。由於是不同廠商提供的不同的終端，能力各有不同，自然控制他們工作的方式
也是不一樣的。所有終端都支持回顯行編輯模式，所以一般的面向行的程序還比較好寫
，但是那時候要撰寫支持所有終端的「全屏」程序就非常痛苦，這種情況就像現在瀏覽
器沒有統一標準下寫HTML要測試各種瀏覽器兼容性一樣。
通常的做法是&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;使用最小功能子集&lt;/li&gt;
&lt;li&gt;假設終端是某個特殊設備，不管別的設備。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;水源的代碼源頭 Firebird2000 就是那樣的一個程序，只支持固定大小的vt102終端。&lt;/p&gt;
&lt;p&gt;這時有一個劃時代意義的程序出現了，就是 vi，試圖要做到「全屏可視化編輯」。這在
現在看起來很簡單，但是在當時基本是天方夜譚。
vi 的做法是提出一層抽象，記錄它所需要的所有終端操作，然後有一個終端類型數據庫
，把那些操作映射到終端類型的具體指令上。當然並不是所有操作在所有終端類型上都
支持，所以會有一堆 fallback，比如要「強調」某段文字，在彩色終端上可能
fallback 到紅色，在黑白終端上可能 fallback 到粗體。&lt;/p&gt;
&lt;p&gt;vi 一出現大家都覺得好頂讚，然後想要寫更多類似 vi 這樣的全屏程序。然後 vi 的作
者就把終端抽象的這部分數據庫放出來形成一個單獨的項目，叫 termcap （Terminal
Capibility），對應的描述終端的數據庫就是 termcap 格式。然後 termcap 只是一個
數據庫（所以無狀態）還不夠方便易用，所以後來又有人用 termcap 實現了 curses 。&lt;/p&gt;
&lt;p&gt;再後來大家用 curses/termcap 的時候漸漸發現這個數據庫有一點不足：它是爲 vi 設
計的，所以只實現了 vi 需要的那部分終端能力。然後對它改進的努力就形成了新的
terminfo 數據庫和 pcurses 和後來的 ncurses 。 然後 VIM 出現了自然也用
terminfo 實現這部分終端操作。&lt;/p&gt;
&lt;p&gt;然後麼就是 X 出現了， xterm 出現了，大家都用顯示器了，然後 xterm 爲了兼容各種
老程序加入了各種老終端的模擬模式。不過因爲最普及的終端是 vt100 所以 xterm 默
認是工作在兼容 vt100 的模式下。然後接下來各種新程序（偷懶不用*curses的那些）
都以 xterm/vt100 的方式寫。&lt;/p&gt;
&lt;p&gt;嗯到此爲止是 Unix 世界的黑歷史。&lt;/p&gt;
&lt;p&gt;知道這段歷史的話就可以明白爲什麼需要 TERM 變量配合 terminfo 數據庫纔能用一些
Unix 下的全屏程序了。類比一下的話這就是現代瀏覽器的 user-agent。&lt;/p&gt;
&lt;p&gt;然後話題回到 Linux 。 大家知道 Linux 早期代碼不是一個 OS， 而是 Linus 大神想
在他的嶄新蹭亮的 386-PC 上遠程登錄他學校的 Unix 主機，接收郵件和逛水源（咳咳
）。於是 Linux 最早的那部分代碼並不是一個通用 OS 而只是一個 bootloader 加一個
終端模擬器。所以現在 Linux 內核裏還留有他當年實現的終端模擬器的部分代碼，而這
個終端模擬器的終端類型就是 linux 啦。然後他當時是爲了逛水源嘛所以 linux 終端
基本上是 vt102 的一個接近完整子集。&lt;/p&gt;
&lt;p&gt;說到這裏脈絡大概應該清晰了， xterm終端類型基本模擬 vt100，linux終端類型基本模
擬 vt102。這兩個的區別其實很細微，都是同一個廠商的兩代產品嘛。有差別的地方差
不多就是 &lt;kbd class="kbd"&gt;
Home&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
End&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
PageUp&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
PageDown&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
Delete&lt;/kbd&gt;

這些不在 ASCII 控制字符表裏的按鍵的映射關係不同。&lt;/p&gt;
&lt;p&gt;嗯這也就解釋了爲什麼在linux環境的圖形界面的終端裏 telnet 上水源的話，上面這些
按鍵會錯亂…… 如果設置終端類型是 linux/vt102 的話就不會亂了。在 linux 的
TTY 裏 telnet 也不會亂的樣子。&lt;/p&gt;
&lt;p&gt;寫到這裏纔發現貌似有點長…… 總之可以參考
&lt;a class="reference external" href="http://web.mit.edu/~simsong/www/ugh.pdf"&gt;Unix hater's Handbook&lt;/a&gt;
裏的相關歷史評論和吐槽，那一段非常有意思。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="c"></category><category term="linux"></category><category term="stdio"></category><category term="tty"></category><category term="unix"></category><category term="ugh"></category><category term="ncurses"></category><category term="termcap"></category><category term="terminfo"></category></entry><entry><title>KDE5 Plasma 之跳動賣萌的活動按鈕</title><link href="//farseerfc.me/jumping-kde5-plasma-activities-button.html" rel="alternate"></link><published>2014-12-09T01:54:00+09:00</published><updated>2014-12-09T01:54:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2014-12-09:/jumping-kde5-plasma-activities-button.html</id><content type="html">&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;今天嘗試 KDE5 Plasma 的活動的時候無意間發現這個現象。
只要把活動按鈕拖出桌面，它就會在桌面邊緣來回跳動。
視頻如下：&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="well" style="padding: 0"&gt;
&lt;div class="tab-content" id="youtubeku"&gt;
&lt;div class="tab-pane fade active in" id="youtube_SSbf97jGSpI"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/SSbf97jGSpI"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class="tab-pane fade" id="youku_XODQ0NjM2MzQ4"&gt;
&lt;div align="left" class="youku embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" height="498" src="https://player.youku.com/embed/XODQ0NjM2MzQ4" width="510"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="nav nav-tabs"&gt;
&lt;li class="active"&gt;&lt;a data-toggle="tab" href="#youtube_SSbf97jGSpI"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle="tab" href="#youku_XODQ0NjM2MzQ4"&gt;Youku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;當然你可以把它再拖回來，所以這個問題還無傷大雅，只是賣萌。&lt;/p&gt;
&lt;p&gt;比比之前 Gnome3 那個跳動的界面真是好太多了：&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;div class="well" style="padding: 0"&gt;
&lt;div class="tab-content" id="youtubeku"&gt;
&lt;div class="tab-pane fade active in" id="youtube_TRQJdRHYwrw"&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/TRQJdRHYwrw"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;div class="tab-pane fade" id="youku_XNjc4MjQ5NjE2"&gt;
&lt;div align="left" class="youku embed-responsive embed-responsive-16by9"&gt; &lt;iframe allow="fullscreen" class="embed-responsive-item" frameborder="0" height="498" src="https://player.youku.com/embed/XNjc4MjQ5NjE2" width="510"&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="nav nav-tabs"&gt;
&lt;li class="active"&gt;&lt;a data-toggle="tab" href="#youtube_TRQJdRHYwrw"&gt;Youtube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a data-toggle="tab" href="#youku_XNjc4MjQ5NjE2"&gt;Youku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!-- PELICAN_BEGIN_SUMMARY --&gt;
&lt;p&gt;順便，今天還看到一個賣萌的 KDE5 Plasma 靜音圖標的翻譯：&lt;/p&gt;
&lt;!-- PELICAN_END_SUMMARY --&gt;
&lt;blockquote class="twitter-tweet" lang="zh-tw"&gt;&lt;p&gt;KDE5のミュート画面の中国語翻訳、「静音」のはずだが「镜音」になっている。Vocaloidファンのネタだか、単なる入力ミスだか分からない。 &lt;a href="http://t.co/ipyHjXMscR"&gt;pic.twitter.com/ipyHjXMscR&lt;/a&gt;&lt;/p&gt;— Jiachen YANG (@farseerfc) &lt;a href="https://twitter.com/farseerfc/status/541944351270518784"&gt;2014 12月 8日&lt;/a&gt;&lt;/blockquote&gt;</content><category term="tech"></category><category term="kde5"></category><category term="plasma"></category><category term="linux"></category><category term="gnome3"></category></entry><entry><title>Pyssy 項目</title><link href="//farseerfc.me/pyssy.html" rel="alternate"></link><published>2012-04-02T12:42:00+09:00</published><updated>2012-04-02T12:42:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2012-04-02:/pyssy.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;Pyssy 是用於 &lt;a class="reference external" href="https://bbs.sjtu.edu.cn"&gt;上海交通大學 飲水思源站&lt;/a&gt; 的一系列 Python 腳本和工具。&lt;/p&gt;
&lt;p&gt;Pyssy 被有意設計爲既可以託管寄宿在 SAE &lt;a class="footnote-reference" href="#sae" id="id3"&gt;[1]&lt;/a&gt; 上，也可以在單機上獨立使用。&lt;/p&gt;
&lt;p&gt;項目地址： &lt;a class="reference external" href="http://pyssy.sinaapp.com/"&gt;http://pyssy.sinaapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github上的源代碼地址： &lt;a class="reference external" href="https://github.com/yssy-d3/pyssy"&gt;https://github.com/yssy-d3/pyssy&lt;/a&gt;&lt;/p&gt;
&lt;table border="0" class="footnote docutils table" frame="void" id="sae" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://sae.sina.com.cn/"&gt;Sina App Engine&lt;/a&gt; ，新浪雲平臺，類似 &lt;a class="reference external" href="https://appengine.google.com/"&gt;Google App Engine&lt;/a&gt; 的東西。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;依賴關係&lt;/h2&gt;
&lt;p&gt;Pyssy 使用 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 作爲網頁服務器，
並且使用 Memcached 或者 Redis 作爲抓取 &lt;em&gt;水源Web&lt;/em&gt; 的緩存。&lt;/p&gt;
&lt;p&gt;SAE Python 環境下請開啓 …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;簡介&lt;/h2&gt;
&lt;p&gt;Pyssy 是用於 &lt;a class="reference external" href="https://bbs.sjtu.edu.cn"&gt;上海交通大學 飲水思源站&lt;/a&gt; 的一系列 Python 腳本和工具。&lt;/p&gt;
&lt;p&gt;Pyssy 被有意設計爲既可以託管寄宿在 SAE &lt;a class="footnote-reference" href="#sae" id="id3"&gt;[1]&lt;/a&gt; 上，也可以在單機上獨立使用。&lt;/p&gt;
&lt;p&gt;項目地址： &lt;a class="reference external" href="http://pyssy.sinaapp.com/"&gt;http://pyssy.sinaapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github上的源代碼地址： &lt;a class="reference external" href="https://github.com/yssy-d3/pyssy"&gt;https://github.com/yssy-d3/pyssy&lt;/a&gt;&lt;/p&gt;
&lt;table border="0" class="footnote docutils table" frame="void" id="sae" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://sae.sina.com.cn/"&gt;Sina App Engine&lt;/a&gt; ，新浪雲平臺，類似 &lt;a class="reference external" href="https://appengine.google.com/"&gt;Google App Engine&lt;/a&gt; 的東西。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;依賴關係&lt;/h2&gt;
&lt;p&gt;Pyssy 使用 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 作爲網頁服務器，
並且使用 Memcached 或者 Redis 作爲抓取 &lt;em&gt;水源Web&lt;/em&gt; 的緩存。&lt;/p&gt;
&lt;p&gt;SAE Python 環境下請開啓 Memcached 支持。&lt;/p&gt;
&lt;p&gt;本地環境下請安裝 Redis-py 並運行 redis-server 服務器程序。&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="python"></category><category term="sjtu"></category><category term="yssy"></category></entry><entry><title>PyRuby</title><link href="//farseerfc.me/mix-ruby.html" rel="alternate"></link><published>2012-03-02T23:09:00+09:00</published><updated>2012-03-02T23:09:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2012-03-02:/mix-ruby.html</id><summary type="html">&lt;p&gt;今天在GitHub上閒逛的時候看到一個叫做 &lt;a class="reference external" href="https://github.com/danielfm/pyruby"&gt;PyRuby&lt;/a&gt; 的項目。項目的Readme說得很好：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PyRuby - Some Ruby for your Python!
PyRuby is a simple way to leverage the power of Ruby to make your Python code more readable and beautiful.

Usage
All you have to do is import the ruby module:

import ruby
From now on you should be able …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;今天在GitHub上閒逛的時候看到一個叫做 &lt;a class="reference external" href="https://github.com/danielfm/pyruby"&gt;PyRuby&lt;/a&gt; 的項目。項目的Readme說得很好：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PyRuby - Some Ruby for your Python!
PyRuby is a simple way to leverage the power of Ruby to make your Python code more readable and beautiful.

Usage
All you have to do is import the ruby module:

import ruby
From now on you should be able to write Ruby code within a regular Python module. An example:

1.upto(10) { |n| puts n }
&lt;/pre&gt;
&lt;p&gt;甚至 &lt;a class="reference external" href="http://pypi.python.org/pypi/pyruby/1.0.0"&gt;PyPI&lt;/a&gt; 上還有這個項目的包。&lt;/p&gt;
&lt;p&gt;一開始我還以爲這又是一個野心勃勃的基於PyPy的Ruby實現，或者某種trick在Python裏面直接調用Ruby解釋器。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;然後我想看看這個的源代碼&lt;/h2&gt;
&lt;p&gt;只有一個ruby.py文件，內容是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                              `.-:/+ossyhhddmmmmNNNNNNNmmmmmdddddhhhyyyyhhhyo:`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                       .:+sydNNNmmdhhysso++/+++++++////::::::-.```......--/oymms.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                  `:ohmdys+//::/::--::::////:-.```......`````.://:-`         `/dNs.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;               .+hNds:`-:-:///::------::///++///:--....--::///::-`.///.        `oMm/&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;             /hNmo.`   ``    `....```````````      ...------:::-:/+/-.:/:`       /NMs&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            oMd/`      `::::--.---://+`           //`     `````-:::::+/-`::.`     :NM+&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            yN`       -+.`         `/`           o.               ``::.-:. ``      :NN:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;           :Nm        -             ./           :    `.-://///:-.   `-` ``         :NN-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;          /NM/           .-:::-.`   `/            `:sdmdhyMMMMMMNNmy/`               :mNo`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        :hMd:          /dmddddNNmdy+-.          `smmy/-```hMMMMMMMhydm/ `-.``     `...:mMm+.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;      -hNd/-/o/-..-::`.ydmmmmNMMMMMMNh:/+-      dMN-`-+hmmmmdhhhhdddmMN-`-/o:    .-::::/oydms-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;     oNMo:+/::.         ``...--:/+ohNMNhs-      :hNmmdyo:..``yo-```.--. `-`-+shdddhs+-` `.//yms.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    .MMo:/`o:.:+sso+:-`             sM+           ./-`       /mNh+-....-/ymNNdo::--/shd+`  -`:mm:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    /MM-o ./ ohhsooohNmy::sh.      `yM/                       `:oyyyyyyhys+:.` hy    `/Nh`  : -NN.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    -MM// -: ``   y: odddhh+     -omNh-          `--.` ``          ````    .:ohMMs.    +Ms  /  yMo&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;     hMoo .+.    :Mh  ````    `/hNd/.`           ohdddy::...`..`      `-/sdmdyo+NMNh+- :Mh  /  sMs&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;     .mmh:..:.  :NMm       `-/dMNM+         ./+++/:`.hM:`.````.` `-/shmNmh+-`  /Mmooso.hM/ .: `mM/&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;      .mNs://: .NMNMs-   -:-.`/+-sms.   `  `shyyyhy`sNd`   `.:+sdmmmdMM-.    .oNM+    :m/ `s``yMh&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;       -mMo  . sMNdMNNh+-.        .ydyoyy`        ``+o::+shdddhs+:-.:MM.`.-+hNMMh-    `.`-/::dNs`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        -NM-   mMMMh:MMdNmhs+:-..```-ohs-`...-:/+syhddmMMs:-.`    `/mMMdmmddNMm+`      ..-/hNh-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         sMy   NMMM`:Mh`-/mMmmmdddddddddhhhdNNdhyo+:--.yMs  `..:+ymMMMMd+--yNh.        `+hNh:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         -Mm   NMMM/yMh  -NM-`..--:NMo:--.`+My         :MNoydmNMMNmhdMh` -dNs`        `yMd:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         `MN   mMMMMMMMyshMN+:---.-MN-.....+My...-:/oyhdMMMMNmdy+-` +Mh:sNm/          yMy`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;          MN   yMMMMMMMMMMMMMMMMMNMMMMNNNNNMMMNNNMMMMMNmhMM/-.      `yMMNs.          /My&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         `MN   :MMmMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmmdy+:-``NM-      ./hNNy-           /Nd`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         -Mh    dMydMmsNMNdNNMMmmmNMMMdddhys+yMo``       /Nm:  `:yNNdo.           .sNd.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         +Ms    .mMsMN::NN:.:MN: `.+NM.      +Mo          +Mm+ymNdo-            .omm+`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         yM:     .hNMd+:sMN. oMm.   oMo      +Mh   ```.:+shMNmy+-``.-:-..-//-`:yNmo`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         mM.       :ohmNNMMdhyMMdo//+Mm//////sMNhyhhdmNNmhs/-``./+/:--+so/-:smNy/`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        .Mm        ``  .-:/+osyyhhddddddddddhhyysoo+/:-.  `./+//--+oo/--+ymmy/.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        :Mh   .:   `+:`        `.------------`      ```-////:/++/:../ydNdo:`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        +Ms   `/`    :+o+:-```              ``..-::///++///:-.`-+ydNdo:`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        oMs     :/:.``  `..---.``` ````````..-:/:::---.`  `-ohmmh+:`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;        /Mh       .://///:::-----.-----.......`       `-+hmmy+-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;         sMy`                                ``````-+ydmy+-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;          /mNs-`                        `./ohmNMNNNmy+-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;            /yNmho/:.``````````.-:/+syhdNmdyso+/-.`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;              `:+ydmNMNNNNNNNNNmdhys+/:.`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;                     ``.....`&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;    LOL U MAD?&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的……的確……這種嘗試把Python和Ruby放在一起的想法絕對是瘋了……&lt;/p&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="python"></category><category term="ruby"></category></entry><entry><title>關於C++模板的類型轉換的討論</title><link href="//farseerfc.me/discuss-cpp-template-downcast.html" rel="alternate"></link><published>2012-02-26T05:54:57+09:00</published><updated>2012-02-26T05:54:57+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2012-02-26:/discuss-cpp-template-downcast.html</id><summary type="html">
&lt;p&gt;這兩天在飲水思源的C板，關於C++模板的類型轉換的一個討論，後面是我的解答。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;討論地址&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;原問題&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天在書上看到模板演繹的時候可以允許cast-down，於是我寫了個東西：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct …&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;這兩天在飲水思源的C板，關於C++模板的類型轉換的一個討論，後面是我的解答。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;討論地址&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;原問題&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今天在書上看到模板演繹的時候可以允許cast-down，於是我寫了個東西：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BB&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DD&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="c1"&gt;//f(b);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;奇怪的是重載決議的時候， &lt;code class="code"&gt;
f&lt;/code&gt;
 的情況下它就不讓我特化的 &lt;code class="code"&gt;
f&amp;lt;A&amp;gt;&lt;/code&gt;
 進來。&lt;/p&gt;
&lt;p&gt;但是在 &lt;code class="code"&gt;
ff&lt;/code&gt;
 的情況下， &lt;code class="code"&gt;
ff&amp;lt;BB&amp;lt;long&amp;gt;&amp;gt;&lt;/code&gt;
 卻進來了。&lt;/p&gt;
&lt;p&gt;在VC10和GCC3.4下測試&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;我的解答&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我們來設身處地地作爲編譯器，看一遍到底發生了什麼。&lt;/p&gt;
&lt;p&gt;約定符號 &lt;code class="code"&gt;
#&lt;/code&gt;
 : &lt;code class="code"&gt;
A#B&lt;/code&gt;
 是把 &lt;code class="code"&gt;
B&lt;/code&gt;
 帶入 &lt;code class="code"&gt;
A&amp;lt;T&amp;gt;&lt;/code&gt;
 的參數 &lt;code class="code"&gt;
T&lt;/code&gt;
 之後實例化得到的結果。&lt;/p&gt;
&lt;div class="section" id="ff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;首先看ff的情況。&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;處理到這句的時候，編譯器看到了 &lt;code class="code"&gt;
DD&amp;lt;long&amp;gt;&lt;/code&gt;
 的實例化，於是去實例化 &lt;code class="code"&gt;
DD#long&lt;/code&gt;
 ，繼而實例
化了 &lt;code class="code"&gt;
BB#long&lt;/code&gt;
 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;這句，首先計算重載函數集合。&lt;/p&gt;
&lt;p&gt;第一步，需要從參數 &lt;code class="code"&gt;
DD#long -&amp;gt; BB&amp;lt;T&amp;gt;&lt;/code&gt;
 推斷 &lt;code class="code"&gt;
ff&amp;lt;T&amp;gt;&lt;/code&gt;
 的 &lt;code class="code"&gt;
T&lt;/code&gt;
 。根據函數模板參數推斷規則：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
:code:`class_template_name&amp;lt;T&amp;gt;` 類型的參數，可以用於推斷 :code:`T` 。
&lt;/pre&gt;
&lt;p&gt;於是編譯器推斷 &lt;code class="code"&gt;
T&lt;/code&gt;
 爲 &lt;code class="code"&gt;
long&lt;/code&gt;
 。這裏就算不是 &lt;code class="code"&gt;
BB&lt;/code&gt;
 而是完全無關的 &lt;code class="code"&gt;
CC&lt;/code&gt;
 都可以推斷成功，只要 &lt;code class="code"&gt;
CC&lt;/code&gt;
 也
是一個 &lt;code class="code"&gt;
CC&amp;lt;T&amp;gt;&lt;/code&gt;
 形式的模板。&lt;/p&gt;
&lt;p&gt;第二步，模板特化匹配。因爲只有一個模板，所以匹配了最泛化的 &lt;code class="code"&gt;
ff&amp;lt;T&amp;gt;&lt;/code&gt;
 。&lt;/p&gt;
&lt;p&gt;第三步，模板實例化。&lt;/p&gt;
&lt;p&gt;推斷了 &lt;code class="code"&gt;
long -&amp;gt; T&lt;/code&gt;
 之後，編譯器實例化 &lt;code class="code"&gt;
ff#long&lt;/code&gt;
 。&lt;/p&gt;
&lt;p&gt;重載函數集合： &lt;code class="code"&gt;
{ff#long}&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;然後重載抉擇找到唯一的可匹配的實例 &lt;code class="code"&gt;
ff#long&lt;/code&gt;
 ，檢查實際參數 &lt;code class="code"&gt;
DD#long&lt;/code&gt;
 可以隱式轉換到
形式參數 &lt;code class="code"&gt;
BB#long&lt;/code&gt;
 ，從而生成了這次函數調用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;再來看f的情況。&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;計算候選重載函數集合。&lt;/p&gt;
&lt;p&gt;第一步，對所有 &lt;code class="code"&gt;
f&lt;/code&gt;
 模板推斷實參。根據函數模板參數推斷規則：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
帶有 :code:`T` 類型的參數，可以用於推斷 :code:`T` 。
&lt;/pre&gt;
&lt;p&gt;於是 &lt;code class="code"&gt;
B -&amp;gt; T&lt;/code&gt;
 被推斷出來了。&lt;/p&gt;
&lt;p&gt;第二步，模板特化匹配。&lt;/p&gt;
&lt;p&gt;這裏 &lt;code class="code"&gt;
B&lt;/code&gt;
 不是 &lt;code class="code"&gt;
A&lt;/code&gt;
 ，所以不能用 &lt;code class="code"&gt;
f&amp;lt;A&amp;gt;&lt;/code&gt;
 特化，只能用 &lt;code class="code"&gt;
f&amp;lt;T&amp;gt;&lt;/code&gt;
 模板。&lt;/p&gt;
&lt;p&gt;第三步，模板實例化。&lt;/p&gt;
&lt;p&gt;&lt;code class="code"&gt;
B&lt;/code&gt;
 帶入 &lt;code class="code"&gt;
f&amp;lt;T&amp;gt;&lt;/code&gt;
 實例化成 &lt;code class="code"&gt;
f#B&lt;/code&gt;
 的過程中，實例化 &lt;code class="code"&gt;
traits#B&lt;/code&gt;
 。&lt;/p&gt;
&lt;p&gt;由於沒有針對 &lt;code class="code"&gt;
B&lt;/code&gt;
 的特化，所以用 &lt;code class="code"&gt;
traits&amp;lt;T&amp;gt;&lt;/code&gt;
 模板， &lt;code class="code"&gt;
traits#B::value=false&lt;/code&gt;
 ，進而 &lt;code class="code"&gt;
enable_if#false&lt;/code&gt;
 沒有 &lt;code class="code"&gt;
type&lt;/code&gt;
 ，出錯。&lt;/p&gt;
&lt;p&gt;唯一的模板匹配出錯，重載函數集合爲空，SFINAE原則不能找到合適的匹配，於是報錯。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="template"></category><category term="C"></category></entry><entry><title>嘗試一下 Pelican</title><link href="//farseerfc.me/try-pelican.html" rel="alternate"></link><published>2012-02-24T17:33:00+09:00</published><updated>2012-02-24T17:33:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.me,2012-02-24:/try-pelican.html</id><summary type="html">&lt;p&gt;似乎一夜之間所有的
&lt;a class="reference external" href="http://blog.yxwang.me/2011/11/migrated-to-octopress/"&gt;極客們&lt;/a&gt;
&lt;a class="reference external" href="http://xoyo.name/2012/02/migrate-to-octopress/"&gt;都&lt;/a&gt;
&lt;a class="reference external" href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"&gt;有了&lt;/a&gt;
&lt;a class="reference external" href="http://www.yangzhiping.com/tech/octopress.html"&gt;自己&lt;/a&gt;
的 &lt;a class="reference external" href="http://pages.github.com/#user__organization_pages"&gt;Github主頁&lt;/a&gt;
和 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 博客。就像所有人在他們的博客中指出的，靜態博客的確比傳統的WordPress方式具有更多優勢。 自從看到這些
我就一直在想着自己搭一個 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;但是似乎 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 不適合我&lt;/h2&gt;
&lt;p&gt;一上手就被 &lt;a class="reference external" href="http://octopress.org/docs/setup/"&gt;Octopress的搭建步驟&lt;/a&gt; 煩到了。 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt; 是什麼？ &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; 又是什麼？
看來 Ruby 社區的快節奏發展已經超過了我的想象，他們似乎需要一套發行版管理器來調和不同版本之間的 Ruby 的兼容性問題。
雖然同樣的兼容性問題在 Python 社區也有 &lt;a class="footnote-reference" href="#id10" id="id8"&gt;[1]&lt;/a&gt; ，不過總覺得 Python 至少還沒到需要一個發行版管理器的程度 &lt;a class="footnote-reference" href="#id11" id="id9"&gt;[2]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;真正的問題是我手上還沒有一個可以讓我隨便玩的 Linux 環境（真的想要……）。 而無論是 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt; 還是 &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; 似乎都只支持 Unix/Linux …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;似乎一夜之間所有的
&lt;a class="reference external" href="http://blog.yxwang.me/2011/11/migrated-to-octopress/"&gt;極客們&lt;/a&gt;
&lt;a class="reference external" href="http://xoyo.name/2012/02/migrate-to-octopress/"&gt;都&lt;/a&gt;
&lt;a class="reference external" href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"&gt;有了&lt;/a&gt;
&lt;a class="reference external" href="http://www.yangzhiping.com/tech/octopress.html"&gt;自己&lt;/a&gt;
的 &lt;a class="reference external" href="http://pages.github.com/#user__organization_pages"&gt;Github主頁&lt;/a&gt;
和 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 博客。就像所有人在他們的博客中指出的，靜態博客的確比傳統的WordPress方式具有更多優勢。 自從看到這些
我就一直在想着自己搭一個 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 。&lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;但是似乎 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 不適合我&lt;/h2&gt;
&lt;p&gt;一上手就被 &lt;a class="reference external" href="http://octopress.org/docs/setup/"&gt;Octopress的搭建步驟&lt;/a&gt; 煩到了。 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt; 是什麼？ &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; 又是什麼？
看來 Ruby 社區的快節奏發展已經超過了我的想象，他們似乎需要一套發行版管理器來調和不同版本之間的 Ruby 的兼容性問題。
雖然同樣的兼容性問題在 Python 社區也有 &lt;a class="footnote-reference" href="#id10" id="id8"&gt;[1]&lt;/a&gt; ，不過總覺得 Python 至少還沒到需要一個發行版管理器的程度 &lt;a class="footnote-reference" href="#id11" id="id9"&gt;[2]&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;真正的問題是我手上還沒有一個可以讓我隨便玩的 Linux 環境（真的想要……）。 而無論是 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt; 還是 &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt; 似乎都只支持 Unix/Linux/MacOSX 。 身爲極客就註定不能用 Windows 麼？（或許是的……）。&lt;/p&gt;
&lt;p&gt;剩下的問題就是 Ruby 和 Python 兩大陣營的對立問題了。我不熟悉 &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; ， 相對來說比較喜歡 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt; 。 似乎無論哪邊都要
依賴 &lt;a class="reference external" href="http://pygments.org/"&gt;Pygments&lt;/a&gt; 作爲代碼着色器，那麼其實 Rubyist 也至少需要安裝 Python 。 我傾向於不依賴任何 Ruby 組件，最好沒有 C 擴展
的純 Python 實現。&lt;/p&gt;
&lt;p&gt;於是我開始在 Github 上找 Python 的靜態博客引擎。 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 的作者 &lt;a class="reference external" href="https://github.com/mitsuhiko"&gt;mitsuhiko&lt;/a&gt; 寫的 &lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt; 看起來不錯，不過似乎沒有多少人在用。 &lt;a class="reference external" href="http://ringce.com/hyde"&gt;Hyde&lt;/a&gt; 似乎很完善，不過默認的標記語言是 MarkDown ， 又依賴於幾個 Ruby 組建，而且官方網站的設計實在太前衛。 最終我看到了 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 。&lt;/p&gt;
&lt;table border="0" class="footnote docutils table" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;比如 Python 2.x 與 3.x 之間看似難以跨越的鴻溝，以及 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt; 、 &lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt; 、 &lt;a class="reference external" href="http://www.stackless.com/"&gt;Stackless&lt;/a&gt; 、 &lt;a class="reference external" href="http://cython.org/"&gt;Cython&lt;/a&gt; 等各個實現之間的微妙差別。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table border="0" class="footnote docutils table" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"/&gt;&lt;col/&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;是的，我們有 &lt;a class="reference external" href="http://packages.python.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt; ，我們有 &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/index.html"&gt;pip&lt;/a&gt; ， 不過這些都是包管理器，都是裝好特定的Python實現之後的事情。 Python實現本身還不需要包管理器來管理。 Python 的版本問題基本上也只需要 &lt;a class="reference external" href="http://docs.python.org/release/3.0.1/library/2to3.html"&gt;2to3.py&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.startcodon.com/wordpress/?cat=8"&gt;3to2.py&lt;/a&gt; 這樣的輕量級轉換器就可以了，你不需要爲了安裝多個軟件而在硬盤裏留下多個不同版本的 Python 。 如果爲了引用的穩定性，你可以用 &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; ，不過這又是另一回事情了。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;那麼就 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 吧&lt;/h2&gt;
&lt;p&gt;對我而言， &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 相比於 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 有幾個好處：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;純 Python 實現。 這意味着我可以換用任何 Python 解釋器而不必擔心兼容性問題。比如我就換成了 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;多語言支持。因爲 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 的作者似乎是個法國人。不過這個似乎大部分人不需要…… 我是想儘量把一篇博客寫成三種語言作爲鍛鍊吧。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt; 。這樣我就可以用 &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt; 的 @auto-rst 直接寫 ReST了。簡單方便快捷有效。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;不過似乎 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 的關注度不如 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 那麼高，現在一些部分還有細微的問題：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;pelican-import 從 WordPress 導入的時候對中文、日文的支持似乎很成問題。&lt;/li&gt;
&lt;li&gt;日期格式、時區、字符集、和多語言功能的結合度還不夠。  &lt;strong&gt;我在嘗試改善它。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;模板還不夠豐富。&lt;/li&gt;
&lt;li&gt;插件也不夠多……&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;希望這麼優秀的工具能夠受到更多關注，以上這些問題都是增加關注度之後很快就能解決的問題。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-py"&gt;
&lt;h2&gt;我的設置 settings.py&lt;/h2&gt;
&lt;p&gt;安裝 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt; 很容易，一句話就夠了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然後把文章寫成ReST的格式，放在`pages`文件夾裏面。(重新)生成只要：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican -s settings.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上傳到 Github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git commit -am &lt;span class="s2"&gt;"Commit message"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就這麼簡單。附上我的配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Asia/Tokyo'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;DATE_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'usa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="si"&gt;%a&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; %b %Y'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'zh'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'chs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%a&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s1"&gt;'jp'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s1"&gt;'jpn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; (&lt;/span&gt;&lt;span class="si"&gt;%a&lt;/span&gt;&lt;span class="s1"&gt;)'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# windows locale: http://msdn.microsoft.com/en-us/library/cdax410z%28VS.71%29.aspx&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;LOCALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'usa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'chs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'jpn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c1"&gt;# windows&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="s1"&gt;'en_US'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'zh_CN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ja_JP'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# Unix/Linux&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'zh'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Farseerfc Blog'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Jiachen Yang'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'farseerfcgithub'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/farseerfc'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'http://farseerfc.github.com'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;TAG_FEED&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.atom.xml'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://twitter.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://www.facebook.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'weibo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://weibo.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'renren'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'http://www.renren.com/farseer'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;          &lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'farseerfc'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'notmyidea'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;CSS_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"wide.css"&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Others'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tech"></category><category term="python"></category><category term="pelican"></category></entry></feed>