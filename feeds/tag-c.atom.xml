<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc's Blog</title><link href="//farseerfc.github.io/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/tag-c.atom.xml" rel="self"></link><id>//farseerfc.github.io/</id><updated>2012-02-26T05:54:57+09:00</updated><entry><title>關於C++模板的類型轉換的討論</title><link href="//farseerfc.github.io/discuss-cpp-template-downcast.html" rel="alternate"></link><updated>2012-02-26T05:54:57+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-26:discuss-cpp-template-downcast.html</id><summary type="html">&lt;p&gt; 這兩天在飲水思源的 C 板 ， 關於 C++ 模板的類型轉換的一個討論 ， 後面是我的解答 。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 討論地址 &lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt; 原問題 &lt;/h2&gt;
&lt;p&gt; 今天在書上看到模板演繹的時候可以允許 cast-down， 於是我寫了個東西 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BB&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DD&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//f(b);&lt;/span&gt;
    &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 奇怪的是重載決議的時候 ， &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;  的情況下它就不讓我特化的  &lt;tt class="docutils literal"&gt;f&amp;lt;A&amp;gt;&lt;/tt&gt;  進來 。&lt;/p&gt;
&lt;p&gt; 但是在  &lt;tt class="docutils literal"&gt;ff&lt;/tt&gt;  的情況下 ， &lt;tt class="docutils literal"&gt;ff&amp;lt;&lt;span class="caps"&gt;BB&lt;/span&gt;&amp;lt;long&amp;gt;&amp;gt;&lt;/tt&gt;  卻進來了 。&lt;/p&gt;
&lt;p&gt; 在 &lt;span class="caps"&gt;VC10&lt;/span&gt; 和 &lt;span class="caps"&gt;GCC3&lt;/span&gt;.4 下測試 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt; 我的解答 &lt;/h2&gt;
&lt;p&gt; 我們來設身處地地作爲編譯器 ， 看一遍到底發生了什麼 。&lt;/p&gt;
&lt;p&gt; 約定符號  &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; : &lt;tt class="docutils literal"&gt;A#B&lt;/tt&gt;  是把  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  帶入  &lt;tt class="docutils literal"&gt;A&amp;lt;T&amp;gt;&lt;/tt&gt;  的參數  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt;  之後實例化得到的結果 。&lt;/p&gt;
&lt;div class="section" id="ff"&gt;
&lt;h3&gt; 首先看 ff 的情況 。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 處理到這句的時候 ， 編譯器看到了  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;&amp;lt;long&amp;gt;&lt;/tt&gt;  的實例化 ， 於是去實例化  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long&lt;/tt&gt; ， 繼而實例 
 化了  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;#long&lt;/tt&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 這句 ， 首先計算重載函數集合 。&lt;/p&gt;
&lt;p&gt; 第一步 ， 需要從參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="caps"&gt;BB&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/tt&gt;  推斷  &lt;tt class="docutils literal"&gt;ff&amp;lt;T&amp;gt;&lt;/tt&gt;  的  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt; 。 根據函數模板參數推斷規則 ：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
``class_template_name&amp;lt;T&amp;gt;``  類型的參數 ， 可以用於推斷  ``T`` 。
&lt;/pre&gt;
&lt;p&gt; 於是編譯器推斷  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt;  爲  &lt;tt class="docutils literal"&gt;long&lt;/tt&gt; 。 這裏就算不是  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;&lt;/tt&gt;  而是完全無關的  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&lt;/tt&gt;  都可以推斷成功 ， 只要  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&lt;/tt&gt;  也 
 是一個  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/tt&gt;  形式的模板 。&lt;/p&gt;
&lt;p&gt; 第二步 ， 模板特化匹配 。 因爲只有一個模板 ， 所以匹配了最泛化的  &lt;tt class="docutils literal"&gt;ff&amp;lt;T&amp;gt;&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 第三步 ， 模板實例化 。&lt;/p&gt;
&lt;p&gt; 推斷了  &lt;tt class="docutils literal"&gt;long &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; T&lt;/tt&gt;  之後 ， 編譯器實例化  &lt;tt class="docutils literal"&gt;ff#long&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 重載函數集合 ： &lt;tt class="docutils literal"&gt;{ff#long}&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt; 然後重載抉擇找到唯一的可匹配的實例  &lt;tt class="docutils literal"&gt;ff#long&lt;/tt&gt; ， 檢查實際參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long&lt;/tt&gt;  可以隱式轉換到 
 形式參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;#long&lt;/tt&gt; ， 從而生成了這次函數調用 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f"&gt;
&lt;h3&gt; 再來看 f 的情況 。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 計算候選重載函數集合 。&lt;/p&gt;
&lt;p&gt; 第一步 ， 對所有  &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;  模板推斷實參 。 根據函數模板參數推斷規則 ：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 帶有  ``T``  類型的參數 ， 可以用於推斷  ``T`` 。
&lt;/pre&gt;
&lt;p&gt; 於是  &lt;tt class="docutils literal"&gt;B &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; T&lt;/tt&gt;  被推斷出來了 。&lt;/p&gt;
&lt;p&gt; 第二步 ， 模板特化匹配 。&lt;/p&gt;
&lt;p&gt; 這裏  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  不是  &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; ， 所以不能用  &lt;tt class="docutils literal"&gt;f&amp;lt;A&amp;gt;&lt;/tt&gt;  特化 ， 只能用  &lt;tt class="docutils literal"&gt;f&amp;lt;T&amp;gt;&lt;/tt&gt;  模板 。&lt;/p&gt;
&lt;p&gt; 第三步 ， 模板實例化 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  帶入  &lt;tt class="docutils literal"&gt;f&amp;lt;T&amp;gt;&lt;/tt&gt;  實例化成  &lt;tt class="docutils literal"&gt;f#B&lt;/tt&gt;  的過程中 ， 實例化  &lt;tt class="docutils literal"&gt;traits#B&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 由於沒有針對  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  的特化 ， 所以用  &lt;tt class="docutils literal"&gt;traits&amp;lt;T&amp;gt;&lt;/tt&gt;  模板 ， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;traits#B::value=false&lt;/span&gt;&lt;/tt&gt; ， 進而  &lt;tt class="docutils literal"&gt;enable_if#false&lt;/tt&gt;  沒有  &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; ， 出錯 。&lt;/p&gt;
&lt;p&gt; 唯一的模板匹配出錯 ， 重載函數集合爲空 ，&lt;span class="caps"&gt;SFINAE&lt;/span&gt; 原則不能找到合適的匹配 ， 於是報錯 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="C++"></category><category term="template"></category><category term="C"></category></entry><entry><title>關於C++模板的類型轉換的討論</title><link href="//farseerfc.github.io/discuss-cpp-template-downcast.html" rel="alternate"></link><updated>2012-02-26T05:54:57+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-26:discuss-cpp-template-downcast.html</id><summary type="html">&lt;p&gt; 這兩天在飲水思源的 C 板 ， 關於 C++ 模板的類型轉換的一個討論 ， 後面是我的解答 。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 討論地址 &lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt; 原問題 &lt;/h2&gt;
&lt;p&gt; 今天在書上看到模板演繹的時候可以允許 cast-down， 於是我寫了個東西 ：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;_Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;_Type&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enable_if&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;traits&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BB&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DD&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BB&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//f(b);&lt;/span&gt;
    &lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 奇怪的是重載決議的時候 ， &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;  的情況下它就不讓我特化的  &lt;tt class="docutils literal"&gt;f&amp;lt;A&amp;gt;&lt;/tt&gt;  進來 。&lt;/p&gt;
&lt;p&gt; 但是在  &lt;tt class="docutils literal"&gt;ff&lt;/tt&gt;  的情況下 ， &lt;tt class="docutils literal"&gt;ff&amp;lt;&lt;span class="caps"&gt;BB&lt;/span&gt;&amp;lt;long&amp;gt;&amp;gt;&lt;/tt&gt;  卻進來了 。&lt;/p&gt;
&lt;p&gt; 在 &lt;span class="caps"&gt;VC10&lt;/span&gt; 和 &lt;span class="caps"&gt;GCC3&lt;/span&gt;.4 下測試 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt; 我的解答 &lt;/h2&gt;
&lt;p&gt; 我們來設身處地地作爲編譯器 ， 看一遍到底發生了什麼 。&lt;/p&gt;
&lt;p&gt; 約定符號  &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; : &lt;tt class="docutils literal"&gt;A#B&lt;/tt&gt;  是把  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  帶入  &lt;tt class="docutils literal"&gt;A&amp;lt;T&amp;gt;&lt;/tt&gt;  的參數  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt;  之後實例化得到的結果 。&lt;/p&gt;
&lt;div class="section" id="ff"&gt;
&lt;h3&gt; 首先看 ff 的情況 。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DD&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 處理到這句的時候 ， 編譯器看到了  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;&amp;lt;long&amp;gt;&lt;/tt&gt;  的實例化 ， 於是去實例化  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long&lt;/tt&gt; ， 繼而實例 
 化了  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;#long&lt;/tt&gt; 。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 這句 ， 首先計算重載函數集合 。&lt;/p&gt;
&lt;p&gt; 第一步 ， 需要從參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="caps"&gt;BB&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/tt&gt;  推斷  &lt;tt class="docutils literal"&gt;ff&amp;lt;T&amp;gt;&lt;/tt&gt;  的  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt; 。 根據函數模板參數推斷規則 ：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
``class_template_name&amp;lt;T&amp;gt;``  類型的參數 ， 可以用於推斷  ``T`` 。
&lt;/pre&gt;
&lt;p&gt; 於是編譯器推斷  &lt;tt class="docutils literal"&gt;T&lt;/tt&gt;  爲  &lt;tt class="docutils literal"&gt;long&lt;/tt&gt; 。 這裏就算不是  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;&lt;/tt&gt;  而是完全無關的  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&lt;/tt&gt;  都可以推斷成功 ， 只要  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&lt;/tt&gt;  也 
 是一個  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt;&amp;lt;T&amp;gt;&lt;/tt&gt;  形式的模板 。&lt;/p&gt;
&lt;p&gt; 第二步 ， 模板特化匹配 。 因爲只有一個模板 ， 所以匹配了最泛化的  &lt;tt class="docutils literal"&gt;ff&amp;lt;T&amp;gt;&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 第三步 ， 模板實例化 。&lt;/p&gt;
&lt;p&gt; 推斷了  &lt;tt class="docutils literal"&gt;long &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; T&lt;/tt&gt;  之後 ， 編譯器實例化  &lt;tt class="docutils literal"&gt;ff#long&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 重載函數集合 ： &lt;tt class="docutils literal"&gt;{ff#long}&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt; 然後重載抉擇找到唯一的可匹配的實例  &lt;tt class="docutils literal"&gt;ff#long&lt;/tt&gt; ， 檢查實際參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;DD&lt;/span&gt;#long&lt;/tt&gt;  可以隱式轉換到 
 形式參數  &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;BB&lt;/span&gt;#long&lt;/tt&gt; ， 從而生成了這次函數調用 。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f"&gt;
&lt;h3&gt; 再來看 f 的情況 。&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 計算候選重載函數集合 。&lt;/p&gt;
&lt;p&gt; 第一步 ， 對所有  &lt;tt class="docutils literal"&gt;f&lt;/tt&gt;  模板推斷實參 。 根據函數模板參數推斷規則 ：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 帶有  ``T``  類型的參數 ， 可以用於推斷  ``T`` 。
&lt;/pre&gt;
&lt;p&gt; 於是  &lt;tt class="docutils literal"&gt;B &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; T&lt;/tt&gt;  被推斷出來了 。&lt;/p&gt;
&lt;p&gt; 第二步 ， 模板特化匹配 。&lt;/p&gt;
&lt;p&gt; 這裏  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  不是  &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; ， 所以不能用  &lt;tt class="docutils literal"&gt;f&amp;lt;A&amp;gt;&lt;/tt&gt;  特化 ， 只能用  &lt;tt class="docutils literal"&gt;f&amp;lt;T&amp;gt;&lt;/tt&gt;  模板 。&lt;/p&gt;
&lt;p&gt; 第三步 ， 模板實例化 。&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  帶入  &lt;tt class="docutils literal"&gt;f&amp;lt;T&amp;gt;&lt;/tt&gt;  實例化成  &lt;tt class="docutils literal"&gt;f#B&lt;/tt&gt;  的過程中 ， 實例化  &lt;tt class="docutils literal"&gt;traits#B&lt;/tt&gt; 。&lt;/p&gt;
&lt;p&gt; 由於沒有針對  &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;  的特化 ， 所以用  &lt;tt class="docutils literal"&gt;traits&amp;lt;T&amp;gt;&lt;/tt&gt;  模板 ， &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;traits#B::value=false&lt;/span&gt;&lt;/tt&gt; ， 進而  &lt;tt class="docutils literal"&gt;enable_if#false&lt;/tt&gt;  沒有  &lt;tt class="docutils literal"&gt;type&lt;/tt&gt; ， 出錯 。&lt;/p&gt;
&lt;p&gt; 唯一的模板匹配出錯 ， 重載函數集合爲空 ，&lt;span class="caps"&gt;SFINAE&lt;/span&gt; 原則不能找到合適的匹配 ， 於是報錯 。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="C++"></category><category term="template"></category><category term="C"></category></entry></feed>