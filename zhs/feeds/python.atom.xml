<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc的小窝</title><link href="//farseerfc.github.io/zhs/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/python.atom.xml" rel="self"></link><id>//farseerfc.github.io/zhs/</id><updated>2015-01-16T03:27:00+09:00</updated><entry><title>总结一下 Material Design 的 CSS 框架</title><link href="//farseerfc.github.io/zhs/summarize-material-design-css-framework.html" rel="alternate"></link><updated>2015-01-16T03:27:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2015-01-16:zhs/summarize-material-design-css-framework.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 现在这里的界面风格要从 Google  在 &lt;a class="reference external" href="https://www.google.com/events/io"&gt;I/O 2014  大会 &lt;/a&gt;
 上公布 Android L  也即后来的 Lollipop  说起。他们在谈论界面设计的时候公布了他们的设计准则： &lt;a class="reference external" href="http://www.google.com/design/spec/material-design/introduction.html"&gt;Material Design&lt;/a&gt; (&lt;a class="reference external" href="http://wcc723.gitbooks.io/google_design_translate/"&gt; 中文非官方翻译 &lt;/a&gt; ) 。当然这只是一些准则，总结并描述了之前在 Web  设计和移动端 App  界面设计方面的一些规范，并且用材料的类比来形象化的比喻这个准则。关于 Material Design  的更多中文资料可 &lt;a class="reference external" href="http://www.ui.cn/Material/"&gt; 参考这里 &lt;/a&gt;  。 &lt;/p&gt;
&lt;p&gt; 看到 Material Design  之后就觉得这个设计风格非常符合直觉，于是想在这边也用上 Material Design 。但是我在 Web  前端科技树上没点多少技能点，所以想找找别人实现好的模板或者框架直接套用上。在网络上搜索数日找到了这几个： &lt;/p&gt;
&lt;div class="section" id="polymer-paper-elements"&gt;
&lt;h2&gt;Polymer Paper Elements&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Polymer&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;object class="embed-responsive-item" data="https://www.polymer-project.org/images/logos/p-logo.svg" type="image/svg+xml"&gt;
Polymer logo&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Google  官方提供的参考实现应该是 &lt;a class="reference external" href="https://www.polymer-project.org/"&gt;Polymer&lt;/a&gt;  中的 &lt;a class="reference external" href="https://www.polymer-project.org/docs/elements/paper-elements.html"&gt;Paper Elements&lt;/a&gt;  。 &lt;/p&gt;
&lt;p&gt; 由于是 &lt;strong&gt; 官方参考实现 &lt;/strong&gt;  ，这个框架的确非常忠实地实现了 Material Design  的设计，但是同时由于它基于 &lt;a class="reference external" href="http://webcomponents.org/"&gt;HTML5 Web Components&lt;/a&gt;  构建，相关技术我还不太懂，浏览器兼容性和其余 HTML  技术的兼容性也还不太完善的样子 ……&lt;/p&gt;
&lt;p&gt; 并且对于我这个 Web  开发的半吊子来说， Polymer  只是提供了一组设计组建，没有完善的 &lt;strong&gt; 响应式 &lt;/strong&gt; (responsive)  布局支持，也没有 Navbar  这种常见的框架组建，真的要用起来的话还需要手工实现不少东西。于是口水了半天之后只好放弃 …… 以后可能真的会换用这个，只是目前需要学的东西太多了。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="angular-material-design"&gt;
&lt;h2&gt;Angular Material Design&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
AngularJS&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="AngularJS logo" class="img-responsive" src="https://angularjs.org/img/AngularJS-large.png"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt;  是 Google  对 Web Components  技术的另一个尝试。而这额 &lt;a class="reference external" href="https://material.angularjs.org/"&gt;Angular Material Design&lt;/a&gt;  项目就是基于 AngularJS  构建的 Material Design  库啦，同样是 Google  出品所以应该算得上半个官方实现吧。相比于 Polymer, AngularJS  算是实用了很多，提供了基于 &lt;a class="reference external" href="http://www.w3.org/TR/css3-flexbox/"&gt;CSS Flexbox&lt;/a&gt;  的布局。有人对这两者的评价是，如果说 Polymer  代表了 &lt;strong&gt; 未来趋势 &lt;/strong&gt;  ，那么 AngularJS  就是 &lt;strong&gt; 眼下可用 &lt;/strong&gt;  的 Web
Components  实现了。 &lt;/p&gt;
&lt;p&gt; 只不过同样是因为它是 Components  的框架，对 WebApp  的支持很丰富，大量采用 Ajax  等 JavaScript  技术，对于我这个静态博客来说仍然稍显高级了 …… 非常担心还不支持 HTML5  的浏览器比如 w3m  甚至 cURL  对它的支持程度。于是最终也没有使用它。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="materialize"&gt;
&lt;h2&gt;Materialize&lt;/h2&gt;
&lt;div class="panel panel-default"&gt;
&lt;div class="panel-heading"&gt;
Materialize&lt;/div&gt;
&lt;div class="panel-body"&gt;
&lt;img alt="Materialize logo" class="img-responsive" src="https://raw.githubusercontent.com/Dogfalo/materialize/master/images/materialize.gif"/&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://materializecss.com/"&gt;Materialize&lt;/a&gt;  这是一批 ( 自称 ?) 熟悉 Android  上 Material Design  的设计师们新近出炉的框架，试图提供一个接近 Bootstrap  的方案。最早是在 &lt;a class="reference external" href="http://www.reddit.com/r/web_design/comments/2lt4qy/what_do_you_think_of_materialize_a_responsive/"&gt;Reddit&lt;/a&gt;  上看到对它的讨论的，立刻觉得这个想法不错。 &lt;/p&gt;
&lt;p&gt; 体验一下官网的设计就可以看出，他们的动画效果非常接近 Polymer  的感觉，响应式设计的布局也还不错。只是同样体验一下他们现在的官网就可以看出，他们目前的 &lt;a class="reference external" href="https://github.com/Dogfalo/materialize/issues"&gt;bug  还比较多 &lt;/a&gt;  ，甚至一些 bug
 在他们自己的主页上也有显现。虽然不想给这个新出炉的项目泼凉水，不过看来要达到他们声称的接近 Bootstrap  的易用度还任重而道远 ……&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bootstrap-material-design-bootstrap3"&gt;
&lt;h2&gt;bootstrap-material-design + bootstrap3&lt;/h2&gt;
&lt;p&gt; 这是我最终选择的方案。这个方案将三个项目组合在了一起，分别是 &lt;a class="reference external" href="http://fezvrasta.github.io/bootstrap-material-design/"&gt;bootstrap-material-design&lt;/a&gt;
, &lt;a class="reference external" href="https://github.com/DandyDev/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt;
 和 &lt;a class="reference external" href="http://getbootstrap.com/"&gt;Bootstrap 3&lt;/a&gt;  。 Bootstrap 3  想必不用再介绍了，很多网站都在使用这套框架，定制性很高。 bootstrap-material-design  是在 Bootstrap 3  的基础上套用 Material Design  风格制作的一套 CSS  库，当然也不是很完善并且在不断改进中，一些细节其实并不是很符合我的要求。最后 pelican-bootstrap3  是用 Bootstrap 3  做的 pelican  模板。这三个项目或多或少都有点不合我的口味，于是嘛就把 pelican-bootstrap3 fork 了一套放在 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3"&gt; 这里 &lt;/a&gt;  ，其中还包括我自己改过的 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/bootstrap"&gt;Bootstrap3  样式 &lt;/a&gt;
 和 &lt;a class="reference external" href="https://github.com/farseerfc/pelican-bootstrap3/tree/master/static/material"&gt;Material  样式 &lt;/a&gt;
 ，需要的可以自取。 &lt;/p&gt;
&lt;p&gt; 至于细节上我定制了哪些地方，敬请听下回分解 ……&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="css"></category><category term="material"></category><category term="paper"></category></entry><entry><title>Pyssy 项目</title><link href="//farseerfc.github.io/zhs/pyssy.html" rel="alternate"></link><updated>2012-04-02T12:42:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-04-02:zhs/pyssy.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 简介 &lt;/h2&gt;
&lt;p&gt;Pyssy  是用于 &lt;a class="reference external" href="https://bbs.sjtu.edu.cn"&gt; 上海交通大学饮水思源站 &lt;/a&gt;  的一系列 Python  脚本和工具。 &lt;/p&gt;
&lt;p&gt;Pyssy  被有意设计为既可以托管寄宿在 SAE &lt;a class="footnote-reference" href="#sae" id="id3"&gt;[1]&lt;/a&gt;  上，也可以在单机上独立使用。 &lt;/p&gt;
&lt;p&gt; 项目地址： &lt;a class="reference external" href="http://pyssy.sinaapp.com/"&gt;http://pyssy.sinaapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github 上的源代码地址： &lt;a class="reference external" href="https://github.com/yssy-d3/pyssy"&gt;https://github.com/yssy-d3/pyssy&lt;/a&gt;&lt;/p&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="sae" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://sae.sina.com.cn/"&gt;Sina App Engine&lt;/a&gt;  ，新浪云平台，类似 &lt;a class="reference external" href="https://appengine.google.com/"&gt;Google App Engine&lt;/a&gt;  的东西。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt; 依赖关系 &lt;/h2&gt;
&lt;p&gt;Pyssy  使用 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;  作为网页服务器，并且使用 Memcached  或者 Redis  作为抓取 &lt;em&gt; 水源 Web&lt;/em&gt;  的缓存。 &lt;/p&gt;
&lt;p&gt;SAE Python  环境下请开启 Memcached  支持。 &lt;/p&gt;
&lt;p&gt; 本地环境下请安装 Redis-py  并运行 redis-server  服务器程序。 &lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="sjtu"></category><category term="yssy"></category></entry><entry><title>PyRuby</title><link href="//farseerfc.github.io/zhs/mix-ruby.html" rel="alternate"></link><updated>2012-03-02T23:09:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-03-02:zhs/mix-ruby.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 今天在 GitHub 上闲逛的时候看到一个叫做 &lt;a class="reference external" href="https://github.com/danielfm/pyruby"&gt;PyRuby&lt;/a&gt;  的项目。项目的 Readme 说得很好： &lt;/p&gt;
&lt;pre class="literal-block"&gt;
PyRuby - Some Ruby for your Python!
PyRuby is a simple way to leverage the power of Ruby to make your Python code more readable and beautiful.

Usage
All you have to do is import the ruby module:

import ruby
From now on you should be able to write Ruby code within a regular Python module. An example:

1.upto(10) { |n| puts n }
&lt;/pre&gt;
&lt;p&gt; 甚至 &lt;a class="reference external" href="http://pypi.python.org/pypi/pyruby/1.0.0"&gt;PyPI&lt;/a&gt;  上还有这个项目的包。 &lt;/p&gt;
&lt;p&gt; 一开始我还以为这又是一个野心勃勃的基于 PyPy 的 Ruby 实现，或者某种 trick 在 Python 里面直接调用 Ruby 解释器。 &lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt; 然后我想看看这个的源代码 &lt;/h2&gt;
&lt;p&gt; 只有一个 ruby.py 文件，内容是： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"""&lt;/span&gt;

&lt;span class="s"&gt;                              `.-:/+ossyhhddmmmmNNNNNNNmmmmmdddddhhhyyyyhhhyo:`&lt;/span&gt;
&lt;span class="s"&gt;                       .:+sydNNNmmdhhysso++/+++++++////::::::-.```......--/oymms.&lt;/span&gt;
&lt;span class="s"&gt;                  `:ohmdys+//::/::--::::////:-.```......`````.://:-`         `/dNs.&lt;/span&gt;
&lt;span class="s"&gt;               .+hNds:`-:-:///::------::///++///:--....--::///::-`.///.        `oMm/&lt;/span&gt;
&lt;span class="s"&gt;             /hNmo.`   ``    `....```````````      ...------:::-:/+/-.:/:`       /NMs&lt;/span&gt;
&lt;span class="s"&gt;            oMd/`      `::::--.---://+`           //`     `````-:::::+/-`::.`     :NM+&lt;/span&gt;
&lt;span class="s"&gt;            yN`       -+.`         `/`           o.               ``::.-:. ``      :NN:&lt;/span&gt;
&lt;span class="s"&gt;           :Nm        -             ./           :    `.-://///:-.   `-` ``         :NN-&lt;/span&gt;
&lt;span class="s"&gt;          /NM/           .-:::-.`   `/            `:sdmdhyMMMMMMNNmy/`               :mNo`&lt;/span&gt;
&lt;span class="s"&gt;        :hMd:          /dmddddNNmdy+-.          `smmy/-```hMMMMMMMhydm/ `-.``     `...:mMm+.&lt;/span&gt;
&lt;span class="s"&gt;      -hNd/-/o/-..-::`.ydmmmmNMMMMMMNh:/+-      dMN-`-+hmmmmdhhhhdddmMN-`-/o:    .-::::/oydms-&lt;/span&gt;
&lt;span class="s"&gt;     oNMo:+/::.         ``...--:/+ohNMNhs-      :hNmmdyo:..``yo-```.--. `-`-+shdddhs+-` `.//yms.&lt;/span&gt;
&lt;span class="s"&gt;    .MMo:/`o:.:+sso+:-`             sM+           ./-`       /mNh+-....-/ymNNdo::--/shd+`  -`:mm:&lt;/span&gt;
&lt;span class="s"&gt;    /MM-o ./ ohhsooohNmy::sh.      `yM/                       `:oyyyyyyhys+:.` hy    `/Nh`  : -NN.&lt;/span&gt;
&lt;span class="s"&gt;    -MM// -: ``   y: odddhh+     -omNh-          `--.` ``          ````    .:ohMMs.    +Ms  /  yMo&lt;/span&gt;
&lt;span class="s"&gt;     hMoo .+.    :Mh  ````    `/hNd/.`           ohdddy::...`..`      `-/sdmdyo+NMNh+- :Mh  /  sMs&lt;/span&gt;
&lt;span class="s"&gt;     .mmh:..:.  :NMm       `-/dMNM+         ./+++/:`.hM:`.````.` `-/shmNmh+-`  /Mmooso.hM/ .: `mM/&lt;/span&gt;
&lt;span class="s"&gt;      .mNs://: .NMNMs-   -:-.`/+-sms.   `  `shyyyhy`sNd`   `.:+sdmmmdMM-.    .oNM+    :m/ `s``yMh&lt;/span&gt;
&lt;span class="s"&gt;       -mMo  . sMNdMNNh+-.        .ydyoyy`        ``+o::+shdddhs+:-.:MM.`.-+hNMMh-    `.`-/::dNs`&lt;/span&gt;
&lt;span class="s"&gt;        -NM-   mMMMh:MMdNmhs+:-..```-ohs-`...-:/+syhddmMMs:-.`    `/mMMdmmddNMm+`      ..-/hNh-&lt;/span&gt;
&lt;span class="s"&gt;         sMy   NMMM`:Mh`-/mMmmmdddddddddhhhdNNdhyo+:--.yMs  `..:+ymMMMMd+--yNh.        `+hNh:&lt;/span&gt;
&lt;span class="s"&gt;         -Mm   NMMM/yMh  -NM-`..--:NMo:--.`+My         :MNoydmNMMNmhdMh` -dNs`        `yMd:&lt;/span&gt;
&lt;span class="s"&gt;         `MN   mMMMMMMMyshMN+:---.-MN-.....+My...-:/oyhdMMMMNmdy+-` +Mh:sNm/          yMy`&lt;/span&gt;
&lt;span class="s"&gt;          MN   yMMMMMMMMMMMMMMMMMNMMMMNNNNNMMMNNNMMMMMNmhMM/-.      `yMMNs.          /My&lt;/span&gt;
&lt;span class="s"&gt;         `MN   :MMmMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmmdy+:-``NM-      ./hNNy-           /Nd`&lt;/span&gt;
&lt;span class="s"&gt;         -Mh    dMydMmsNMNdNNMMmmmNMMMdddhys+yMo``       /Nm:  `:yNNdo.           .sNd.&lt;/span&gt;
&lt;span class="s"&gt;         +Ms    .mMsMN::NN:.:MN: `.+NM.      +Mo          +Mm+ymNdo-            .omm+`&lt;/span&gt;
&lt;span class="s"&gt;         yM:     .hNMd+:sMN. oMm.   oMo      +Mh   ```.:+shMNmy+-``.-:-..-//-`:yNmo`&lt;/span&gt;
&lt;span class="s"&gt;         mM.       :ohmNNMMdhyMMdo//+Mm//////sMNhyhhdmNNmhs/-``./+/:--+so/-:smNy/`&lt;/span&gt;
&lt;span class="s"&gt;        .Mm        ``  .-:/+osyyhhddddddddddhhyysoo+/:-.  `./+//--+oo/--+ymmy/.&lt;/span&gt;
&lt;span class="s"&gt;        :Mh   .:   `+:`        `.------------`      ```-////:/++/:../ydNdo:`&lt;/span&gt;
&lt;span class="s"&gt;        +Ms   `/`    :+o+:-```              ``..-::///++///:-.`-+ydNdo:`&lt;/span&gt;
&lt;span class="s"&gt;        oMs     :/:.``  `..---.``` ````````..-:/:::---.`  `-ohmmh+:`&lt;/span&gt;
&lt;span class="s"&gt;        /Mh       .://///:::-----.-----.......`       `-+hmmy+-&lt;/span&gt;
&lt;span class="s"&gt;         sMy`                                ``````-+ydmy+-&lt;/span&gt;
&lt;span class="s"&gt;          /mNs-`                        `./ohmNMNNNmy+-&lt;/span&gt;
&lt;span class="s"&gt;            /yNmho/:.``````````.-:/+syhdNmdyso+/-.`&lt;/span&gt;
&lt;span class="s"&gt;              `:+ydmNMNNNNNNNNNmdhys+/:.`&lt;/span&gt;
&lt;span class="s"&gt;                     ``.....`&lt;/span&gt;

&lt;span class="s"&gt;    LOL U MAD?&lt;/span&gt;
&lt;span class="s"&gt;"""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 是的 …… 的确 …… 这种尝试把 Python 和 Ruby 放在一起的想法绝对是疯了 ……&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="ruby"></category></entry><entry><title>尝试一下 Pelican</title><link href="//farseerfc.github.io/zhs/try-pelican.html" rel="alternate"></link><updated>2012-02-24T17:33:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-24:zhs/try-pelican.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 似乎一夜之间所有的 &lt;a class="reference external" href="http://blog.yxwang.me/2011/11/migrated-to-octopress/"&gt; 极客们 &lt;/a&gt;
&lt;a class="reference external" href="http://xoyo.name/2012/02/migrate-to-octopress/"&gt; 都 &lt;/a&gt;
&lt;a class="reference external" href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"&gt; 有了 &lt;/a&gt;
&lt;a class="reference external" href="http://www.yangzhiping.com/tech/octopress.html"&gt; 自己 &lt;/a&gt;
 的 &lt;a class="reference external" href="http://pages.github.com/#user__organization_pages"&gt;Github 主页 &lt;/a&gt;
 和 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  博客。就像所有人在他们的博客中指出的，静态博客的确比传统的 WordPress 方式具有更多优势。自从看到这些我就一直在想着自己搭一个 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  。 &lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt; 但是似乎 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  不适合我 &lt;/h2&gt;
&lt;p&gt; 一上手就被 &lt;a class="reference external" href="http://octopress.org/docs/setup/"&gt;Octopress 的搭建步骤 &lt;/a&gt;  烦到了。 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt;  是什么？ &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt;  又是什么？看来 Ruby  社区的快节奏发展已经超过了我的想象，他们似乎需要一套发行版管理器来调和不同版本之间的 Ruby  的兼容性问题。虽然同样的兼容性问题在 Python  社区也有 &lt;a class="footnote-reference" href="#id10" id="id8"&gt;[1]&lt;/a&gt;  ，不过总觉得 Python  至少还没到需要一个发行版管理器的程度 &lt;a class="footnote-reference" href="#id11" id="id9"&gt;[2]&lt;/a&gt;  。 &lt;/p&gt;
&lt;p&gt; 真正的问题是我手上还没有一个可以让我随便玩的 Linux  环境（真的想要 …… ）。而无论是 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;RVM&lt;/a&gt;  还是 &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt;  似乎都只支持 Unix/Linux/MacOSX  。身为极客就注定不能用 Windows  么？（或许是的 …… ）。 &lt;/p&gt;
&lt;p&gt; 剩下的问题就是 Ruby  和 Python  两大阵营的对立问题了。我不熟悉 &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;  ，相对来说比较喜欢 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt;  。似乎无论哪边都要依赖 &lt;a class="reference external" href="http://pygments.org/"&gt;Pygments&lt;/a&gt;  作为代码着色器，那么其实 Rubyist  也至少需要安装 Python  。我倾向于不依赖任何 Ruby  组件，最好没有 C  扩展的纯 Python  实现。 &lt;/p&gt;
&lt;p&gt; 于是我开始在 Github  上找 Python  的静态博客引擎。 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;  的作者 &lt;a class="reference external" href="https://github.com/mitsuhiko"&gt;mitsuhiko&lt;/a&gt;  写的 &lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt;  看起来不错，不过似乎没有多少人在用。 &lt;a class="reference external" href="http://ringce.com/hyde"&gt;Hyde&lt;/a&gt;  似乎很完善，不过默认的标记语言是 MarkDown  ，又依赖于几个 Ruby  组建，而且官方网站的设计实在太前卫。最终我看到了 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  。 &lt;/p&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 比如 Python 2.x  与 3.x  之间看似难以跨越的鸿沟，以及 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;  、 &lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;  、 &lt;a class="reference external" href="http://www.stackless.com/"&gt;Stackless&lt;/a&gt;  、 &lt;a class="reference external" href="http://cython.org/"&gt;Cython&lt;/a&gt;  等各个实现之间的微妙差别。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 是的，我们有 &lt;a class="reference external" href="http://packages.python.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt;  ，我们有 &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/index.html"&gt;pip&lt;/a&gt;  ，不过这些都是包管理器，都是装好特定的 Python 实现之后的事情。 Python 实现本身还不需要包管理器来管理。 Python  的版本问题基本上也只需要 &lt;a class="reference external" href="http://docs.python.org/release/3.0.1/library/2to3.html"&gt;2to3.py&lt;/a&gt;  和 &lt;a class="reference external" href="http://www.startcodon.com/wordpress/?cat=8"&gt;3to2.py&lt;/a&gt;  这样的轻量级转换器就可以了，你不需要为了安装多个软件而在硬盘里留下多个不同版本的 Python  。如果为了引用的稳定性，你可以用 &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;  ，不过这又是另一回事情了。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt; 那么就 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  吧 &lt;/h2&gt;
&lt;p&gt; 对我而言， &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  相比于 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  有几个好处： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 纯 Python  实现。这意味着我可以换用任何 Python  解释器而不必担心兼容性问题。比如我就换成了 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt; 。 &lt;/li&gt;
&lt;li&gt; 多语言支持。因为 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  的作者似乎是个法国人。不过这个似乎大部分人不需要 ……  我是想尽量把一篇博客写成三种语言作为锻炼吧。 &lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt;  。这样我就可以用 &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;  的 @auto-rst  直接写 ReST 了。简单方便快捷有效。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt; 不过似乎 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  的关注度不如 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  那么高，现在一些部分还有细微的问题： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;pelican-import  从 WordPress  导入的时候对中文、日文的支持似乎很成问题。 &lt;/li&gt;
&lt;li&gt; 日期格式、时区、字符集、和多语言功能的结合度还不够。 &lt;strong&gt; 我在尝试改善它。 &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt; 模板还不够丰富。 &lt;/li&gt;
&lt;li&gt; 插件也不够多 ……&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt; 希望这么优秀的工具能够受到更多关注，以上这些问题都是增加关注度之后很快就能解决的问题。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-py"&gt;
&lt;h2&gt; 我的设置 settings.py&lt;/h2&gt;
&lt;p&gt; 安装 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  很容易，一句话就够了： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 然后把文章写成 ReST 的格式，放在 `pages` 文件夹里面。 ( 重新 ) 生成只要： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pelican -s settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 上传到 Github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git commit -am &lt;span class="s2"&gt;"Commit message"&lt;/span&gt;
&lt;span class="gp"&gt;$&lt;/span&gt; git push
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 就这么简单。附上我的配置文件： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Asia/Tokyo'&lt;/span&gt;

&lt;span class="n"&gt;DATE_FORMATS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s"&gt;'usa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'%a, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %b %Y'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'zh'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s"&gt;'chs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, %a'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;'jp'&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s"&gt;'jpn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; (%a)'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;# windows locale: http://msdn.microsoft.com/en-us/library/cdax410z%28VS.71%29.aspx&lt;/span&gt;
&lt;span class="n"&gt;LOCALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'usa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'chs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'jpn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;        &lt;span class="c"&gt;# windows&lt;/span&gt;
          &lt;span class="s"&gt;'en_US'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'zh_CN'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'ja_JP'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c"&gt;# Unix/Linux&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'zh'&lt;/span&gt;

&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Farseerfc Blog'&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Jiachen Yang'&lt;/span&gt;

&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'farseerfcgithub'&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://github.com/farseerfc'&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'http://farseerfc.github.com'&lt;/span&gt;
&lt;span class="n"&gt;TAG_FEED&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.atom.xml'&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;'twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://twitter.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'https://github.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://www.facebook.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'weibo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://weibo.com/farseerfc'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'renren'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'http://www.renren.com/farseer'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'farseerfc'&lt;/span&gt;

&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'notmyidea'&lt;/span&gt;
&lt;span class="n"&gt;CSS_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"wide.css"&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Others'&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'.'&lt;/span&gt;
&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'posts'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="pelican"></category></entry></feed>