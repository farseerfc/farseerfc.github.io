<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc的小窝</title><link href="//farseerfc.github.io/zhs/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/tag-oop.atom.xml" rel="self"></link><id>//farseerfc.github.io/zhs/</id><updated>2007-09-20T14:38:00+09:00</updated><entry><title>由记忆棒误差故障引发的关于面向对象设计的九点思考</title><link href="//farseerfc.github.io/zhs/9-thoughts-about-oop-from-wrongly-insert-memory-stick.html" rel="alternate"></link><updated>2007-09-20T14:38:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2007-09-20:zhs/9-thoughts-about-oop-from-wrongly-insert-memory-stick.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 从 &lt;a class="reference external" href="http://farseerfc.wordpress.com/"&gt;farseerfc.wordpress.com&lt;/a&gt;  导入 &lt;/p&gt;
&lt;p&gt; 故障描述 :
MMC Memory Stick Duo 记忆棒未经 Adapter 适配器，直接插入 SD Reader ，致使 MMC 卡入 SD Reader 中。 &lt;/p&gt;
&lt;p&gt; 栈展开：某日下午，无课。忙于数分作业，想查询用手机拍摄的板书照片。取出手机中的 MMC 。未经装配 Adapter ，直接插入 SD Reader 。 (A runtime exception was thrown.)
 尝试翻转笔记本机身，倒出 MMC ，未果。 (rethrow)
 尝试用手指甲取出，未果。 (rethrow)
 考虑到有 “ 推入反弹 ” 机制，尝试将 MMC 推入更深，反弹机制由于类型不匹配而失效，未果。 (rethrow)
(The exception spread across the border of the model.)
 电脑维修技师接手 (catch)
 技师未能发现问题所在，由我解说原委。 (Because the exception lose the information, RTTI was asked to recall the information)
 技师发现问题，尝试用镊子镊出 MMC ，未果。技师开解机箱 (expose the data structure)
 技师制作钩子，勾出 MMC(hooker link to the structure)
 取出 MMC ，故障解除 &lt;/p&gt;
&lt;p&gt; 故障总结 1. 接收到没有完全了解、或没有适当工具解决的 exception 时，不要尝试用不成熟的技术解决，应尽快寻求能解决它的代码。否则，被反复 rethrow 的 exception ，尤其是通过模块边界的 exception ，有可能由 subclass 退化为 superclass ，并因此而丧失一些信息。尽量不要让 exception 丢失信息，必要时，通过 RTTI 机制寻回信息。 &lt;/p&gt;
&lt;p&gt;2. 超负荷运转，多线程执行，这种种复杂性都有可能导致错误，应避免。无论你有多么信任你的代码或能力。 &lt;/p&gt;
&lt;p&gt;3. 在设计 class 的 interface 时，相匹配的 interface 应该满足 is-a 的关系。因此，任何能插入 SD Reader 的 object ，即任何实现了 SD interface 的 object ，都应该 is-a SD card 。这次故障中， interface 接受了 MMC ，但 MMC 不是 SD 。即使这种情况下 throw an exception ，都不能使事态缓和。能提供 compile-time error 时，尽量让错误以 compile-time error 的形式展现，并在事先解决。类型匹配问题是应该能在事先解决的问题。 &lt;/p&gt;
&lt;p&gt;4.Design patterns 中的 Adapter pattern 应该只是迫不得已情况之下的解决方案。只有当你无权改变现状时，才能使用 Adapter 。如果能改变现状，应该改变设计以符合 interface 。 &lt;/p&gt;
&lt;p&gt;5. 因为上条，所有相似功能的对象应具有相同的 interface ，不同的 interface 是本次故障的根源所在。 &lt;/p&gt;
&lt;p&gt;6. 特殊情况下，破坏封装机制并 expose the data structure 是必要的，应该有方法支持这种做法。 C 的指针和 C# 的 Reflection 技术都以不同的方式支持这种做法。其他的一些语言机制，比如 serializing( 序列化 ) 或 streaming( 流化 ) ，也可以以某种方式间接支持这一做法。当然，机制还应避免这种做法被滥用。 &lt;/p&gt;
&lt;p&gt;7. 相反功能具有相同操作的设计，容易造成使用的混乱，应适当避免。比如 SD Reader 的推入反弹设计，即插入和弹出使用同一个向里推的操作的设计。同样的设计还包括， C++ 中的 setNewHandle 使用同一个函数，同时设置和返回 handle 。以及有些书中提倡的，使用同名函数重载的方式，实现 setter/getter 的设计。 &lt;/p&gt;
&lt;p&gt;8. 特殊工具 (hooker) 对于解决特定问题，通常比手工解决有效。不要嫌麻烦而不愿意构造特殊工具。 &lt;/p&gt;
&lt;p&gt;9. 栈语义，即 FILO 顺序，总在不知不觉中影响我们。违反了 FILO 顺序的操作极易造成混乱。本故障发生时正确的处理顺序为：装配 Adapter
     插入 SD Reader
         读取数据          停用设备      拔出 SD Reader
 拆解 Adapter
 本次故障的原因就是违反了 FILO 顺序，违反了栈语义。 &lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="oop"></category></entry></feed>