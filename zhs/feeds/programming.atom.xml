<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc的小窝</title><link href="//farseerfc.github.io/zhs/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/programming.atom.xml" rel="self"></link><id>//farseerfc.github.io/zhs/</id><updated>2014-12-12T17:06:00+09:00</updated><entry><title>从非缓冲输入流到 Linux 控制台的历史</title><link href="//farseerfc.github.io/zhs/from-unbuffered-stdin-to-history-of-linux-tty.html" rel="alternate"></link><updated>2014-12-12T17:06:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2014-12-12:zhs/from-unbuffered-stdin-to-history-of-linux-tty.html</id><summary type="html">&lt;html&gt;&lt;body&gt;
&lt;p&gt; 这篇也是源自于水源 C 板上板友的一个问题，涉及 Linux 上的控制台的实现方式和历史原因。因为内容比较长，所以在这里再排版一下发出来。 &lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1418138991,file,M.1418138991.A.html"&gt; 原帖在这里 &lt;/a&gt;  。 &lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt; 可以设置不带缓冲的标准输入流吗？ &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WaterElement(UnChanged)  于 2014 年 12 月 09 日 23:29:51  星期二   问到： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 请问对于标准输入流可以设置不带缓冲吗？比如以下程序 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buffer is:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 似乎还是需要在命令行输入后按回车才会让 &lt;code class="code"&gt;
fgets&lt;/code&gt;
  返回，不带缓冲究竟体现在哪里？ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt; 这和缓存无关，是控制台的实现方式的问题。 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 再讲细节一点，这里有很多个程序和设备。以下按 linux  的情况讲： &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 终端模拟器窗口（比如 xterm ）收到键盘事件 &lt;/li&gt;
&lt;li&gt; 终端模拟器 (xterm) 把键盘事件发给虚拟终端  pty1&lt;/li&gt;
&lt;li&gt;pty1  检查目前的输入状态，把键盘事件转换成 stdin  的输入，发给你的程序 &lt;/li&gt;
&lt;li&gt; 你的程序的 c  库从 stdin  读入一个输入，处理 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 标准库说的输入缓存是在 4  的这一步进行的。而行输入是在 3  的这一步被缓存起来的。 &lt;/p&gt;
&lt;p&gt; 终端 pty 有多种状态，一般控制台程序所在的状态叫「回显行缓存」状态，这个状态的意思是 :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 所有普通字符的按键，会回显到屏幕上，同时记录在行缓存区里。 &lt;/li&gt;
&lt;li&gt; 处理退格 ( &lt;kbd class="kbd"&gt;
BackSpace&lt;/kbd&gt;
 ) ，删除 ( &lt;kbd class="kbd"&gt;
Delete&lt;/kbd&gt;
 ) 按键为删掉字符，左右按键移动光标。 &lt;/li&gt;
&lt;li&gt; 收到回车的时候把整个一行的内容发给 stdin 。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 参考： &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Cooked_mode"&gt;http://en.wikipedia.org/wiki/Cooked_mode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 同时在 Linux/Unix 下可以发特殊控制符号给 pty 让它进入「 raw 」状态，这种状态下按键不会被回显，显示什么内容都靠你程序自己控制。如果你想得到每一个按键事件需要用 raw 状态，这需要自己控制回显自己处理缓冲，简单点的方法是用 readline  这样的库（基本就是「回显行缓存」的高级扩展，支持了 Home/End ，支持历史）或者 ncurses  这样的库（在 raw 状态下实现了一个简单的窗口 /  事件处理框架）。 &lt;/p&gt;
&lt;p&gt; 参考： &lt;a class="reference external" href="http://en.wikipedia.org/wiki/POSIX_terminal_interface#History"&gt;http://en.wikipedia.org/wiki/POSIX_terminal_interface#History&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 除此之外， &lt;kbd class="kbd"&gt;
Ctrl-C&lt;/kbd&gt;
  转换到 &lt;span class="caps"&gt;SIGINT&lt;/span&gt;  ， &lt;kbd class="kbd"&gt;
Ctrl-D&lt;/kbd&gt;
  转换到 &lt;span class="caps"&gt;EOF&lt;/span&gt;  这种也是在 3  这一步做的。 &lt;/p&gt;
&lt;p&gt; 以及，有些终端模拟器提供的 &lt;kbd class="kbd"&gt;
Ctrl-Shift-C&lt;/kbd&gt;
  表示复制这种是在 2  这一步做的。 &lt;/p&gt;
&lt;p&gt; 以上是 Linux/unix  的方式。  Windows 的情况大体类似，只是细节上有很多地方不一样： &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 窗口事件的接收者是创建 cmd  窗口的 Win32  子系统。 &lt;/li&gt;
&lt;li&gt;Win32 子系统接收到事件之后，传递给位于命令行子系统的 cmd  程序 &lt;/li&gt;
&lt;li&gt;cmd  程序再传递给你的程序。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Windows 上同样有类似行缓存模式和 raw 模式的区别，只不过实现细节不太一样。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strace"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;strace 查看了下 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WaterElement(UnChanged)  于 2014 年 12 月 10 日 21:53:54  星期三   回复： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 感谢 &lt;span class="caps"&gt;FC&lt;/span&gt; 的详尽解答。 &lt;/p&gt;
&lt;p&gt; 用 strace 查看了下，设置标准输入没有缓存的话读每个字符都会调用一次 &lt;code class="code"&gt;
read&lt;/code&gt;
  系统调用，   比如输入 abc ： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;read(0, abc
"a", 1)                         = 1
read(0, "b", 1)                         = 1
read(0, "c", 1)                         = 1
read(0, "\n", 1)                        = 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 如果有缓存的话就只调用一次了 &lt;code class="code"&gt;
read&lt;/code&gt;
  系统调用了： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;read(0, abc
"abc\n", 1024)                  = 4
&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="raw-mode"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt; 如果想感受一下 raw mode&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 没错，这个是你的进程内 C 库做的缓存， tty 属于字符设备所以是一个一个字符塞给你的   程序的。 &lt;/p&gt;
&lt;p&gt; 如果想感受一下 raw mode  可以试试下面这段程序（没有检测错误返回值） &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;termios.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ttyfd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STDIN_FILENO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;termios&lt;/span&gt; &lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/* reset tty - useful also for restoring the terminal when this process&lt;/span&gt;
&lt;span class="cm"&gt;   wishes to temporarily relinquish the tty&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;tty_reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="cm"&gt;/* flush and reset */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcsetattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TCSAFLUSH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="cm"&gt;/* put terminal in raw mode - see termio(7I) for modes */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;tty_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;termios&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orig_termios&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* copy original and then modify below */&lt;/span&gt;

    &lt;span class="cm"&gt;/* input modes - clear indicated ones giving: no break, no CR to NL,&lt;/span&gt;
&lt;span class="cm"&gt;       no parity check, no strip char, no start/stop output (sic) control */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_iflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BRKINT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ICRNL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;INPCK&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ISTRIP&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IXON&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* output modes - clear giving: no post processing such as NL to CR+NL */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_oflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;OPOST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* control modes - set 8 bit chars */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cflag&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CS8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* local modes - clear giving: echoing off, canonical off (no erase with&lt;/span&gt;
&lt;span class="cm"&gt;       backspace, ^U,...),  no extended functions, no signal chars (^Z,^C) */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_lflag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ECHO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ICANON&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IEXTEN&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ISIG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/* control chars - set return condition: min number of bytes and timer */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after 5 bytes or .8 seconds&lt;/span&gt;
&lt;span class="cm"&gt;                                                after first byte seen      */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* immediate - anything       */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after two bytes, no timer  */&lt;/span&gt;
    &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VMIN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_cc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VTIME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* after a byte or .8 seconds */&lt;/span&gt;

    &lt;span class="cm"&gt;/* put terminal in raw mode after flushing */&lt;/span&gt;
    &lt;span class="n"&gt;tcsetattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TCSAFLUSH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tty_reset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;tty_raw&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;FILE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fdopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ttyfd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setvbuf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_IONBF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"buffer is:%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt; 终端上的字符编程 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;vander( 大青蛙 )  于 2014 年 12 月 12 日 08:52:20  星期五   问到： &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 学习了！ &lt;/p&gt;
&lt;p&gt; 进一步想请教一下 fc 大神。如果我在 Linux 上做终端上的字符编程，是否除了用 ncurses 库之外，也可以不用该库而直接与终端打交道，就是你所说的直接在 raw 模式？另外，终端类型 vt100 和 linux 的差别在哪里？为什么 Kevin Boone 的 KBox 配置手册里面说必须把终端类型设成 linux ，而且要加上 terminfo 文件，才能让终端上的 vim 正常工作？ term info 文件又是干什么的？ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Linux 控制台的历史 &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 嗯理论上可以不用 ncurses  库直接在 raw  模式操纵终端。 &lt;/p&gt;
&lt;p&gt; 这里稍微聊一下 terminfo/termcap 的历史，详细的历史和吐槽参考 &lt;a class="reference external" href="http://web.mit.edu/~simsong/www/ugh.pdf"&gt;Unix hater’s Handbook&lt;/a&gt;
 第 6 章 Terminal Insanity 。 &lt;/p&gt;
&lt;p&gt; 首先一个真正意义上的终端就是一个输入设备（通常是键盘）加上一个输出设备（打印机或者显示器）。很显然不同的终端的能力不同，比如如果输出设备是打印机的话，显示出来的字符就不能删掉了（但是能覆盖），而且输出了一行之后就不能回到那一行了。再比如显示器终端有的支持粗体和下划线，有的支持颜色，而有的什么都不支持。早期 Unix 工作在电传打字机（ TeleTYpe ）终端上，后来 Unix 被 port 到越来越多的机器上，然后越来越多类型的终端会被连到 Unix 上，很可能同一台 Unix 主机连了多个不同类型的终端。由于是不同厂商提供的不同的终端，能力各有不同，自然控制他们工作的方式也是不一样的。所有终端都支持回显行编辑模式，所以一般的面向行的程序还比较好写，但是那时候要撰写支持所有终端的「全屏」程序就非常痛苦，这种情况就像现在浏览器没有统一标准下写 &lt;span class="caps"&gt;HTML&lt;/span&gt; 要测试各种浏览器兼容性一样。   通常的做法是 &lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 使用最小功能子集 &lt;/li&gt;
&lt;li&gt; 假设终端是某个特殊设备，不管别的设备。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 水源的代码源头 Firebird2000  就是那样的一个程序，只支持固定大小的 vt102 终端。 &lt;/p&gt;
&lt;p&gt; 这时有一个划时代意义的程序出现了，就是 vi ，试图要做到「全屏可视化编辑」。这在现在看起来很简单，但是在当时基本是天方夜谭。 vi  的做法是提出一层抽象，记录它所需要的所有终端操作，然后有一个终端类型数据库，把那些操作映射到终端类型的具体指令上。当然并不是所有操作在所有终端类型上都支持，所以会有一堆 fallback ，比如要「强调」某段文字，在彩色终端上可能 fallback  到红色，在黑白终端上可能 fallback  到粗体。 &lt;/p&gt;
&lt;p&gt;vi  一出现大家都觉得好顶赞，然后想要写更多类似 vi  这样的全屏程序。然后 vi  的作者就把终端抽象的这部分数据库放出来形成一个单独的项目，叫 termcap  （ Terminal
Capibility ），对应的描述终端的数据库就是 termcap  格式。然后 termcap  只是一个数据库（所以无状态）还不够方便易用，所以后来又有人用 termcap  实现了 curses  。 &lt;/p&gt;
&lt;p&gt; 再后来大家用 curses/termcap  的时候渐渐发现这个数据库有一点不足：它是为 vi  设计的，所以只实现了 vi  需要的那部分终端能力。然后对它改进的努力就形成了新的 terminfo  数据库和 pcurses  和后来的 ncurses  。然后 &lt;span class="caps"&gt;VIM&lt;/span&gt;  出现了自然也用 terminfo  实现这部分终端操作。 &lt;/p&gt;
&lt;p&gt; 然后么就是 X  出现了， xterm  出现了，大家都用显示器了，然后 xterm  为了兼容各种老程序加入了各种老终端的模拟模式。不过因为最普及的终端是 vt100  所以 xterm  默认是工作在兼容 vt100  的模式下。然后接下来各种新程序（偷懒不用 *curses 的那些）都以 xterm/vt100  的方式写。 &lt;/p&gt;
&lt;p&gt; 嗯到此为止是 Unix  世界的黑历史。 &lt;/p&gt;
&lt;p&gt; 知道这段历史的话就可以明白为什么需要 &lt;span class="caps"&gt;TERM&lt;/span&gt;  变量配合 terminfo  数据库才能用一些 Unix  下的全屏程序了。类比一下的话这就是现代浏览器的  user-agent 。 &lt;/p&gt;
&lt;p&gt; 然后话题回到 Linux  。大家知道 Linux  早期代码不是一个 &lt;span class="caps"&gt;OS&lt;/span&gt; ，而是 Linus  大神想在他的崭新蹭亮的 386-&lt;span class="caps"&gt;PC&lt;/span&gt;  上远程登录他学校的 Unix  主机，接收邮件和逛水源（咳咳）。于是 Linux  最早的那部分代码并不是一个通用 &lt;span class="caps"&gt;OS&lt;/span&gt;  而只是一个 bootloader  加一个终端模拟器。所以现在 Linux  内核里还留有他当年实现的终端模拟器的部分代码，而这个终端模拟器的终端类型就是 linux  啦。然后他当时是为了逛水源嘛所以 linux  终端基本上是 vt102  的一个接近完整子集。 &lt;/p&gt;
&lt;p&gt; 说到这里脉络大概应该清晰了， xterm 终端类型基本模拟 vt100 ， linux 终端类型基本模拟 vt102 。这两个的区别其实很细微，都是同一个厂商的两代产品嘛。有差别的地方差不多就是 &lt;kbd class="kbd"&gt;
Home&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
End&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
PageUp&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
PageDown&lt;/kbd&gt;
 / &lt;kbd class="kbd"&gt;
Delete&lt;/kbd&gt;

 这些不在 &lt;span class="caps"&gt;ASCII&lt;/span&gt;  控制字符表里的按键的映射关系不同。 &lt;/p&gt;
&lt;p&gt; 嗯这也就解释了为什么在 linux 环境的图形界面的终端里 telnet  上水源的话，上面这些按键会错乱 ……  如果设置终端类型是 linux/vt102  的话就不会乱了。在 linux  的 &lt;span class="caps"&gt;TTY&lt;/span&gt;  里 telnet  也不会乱的样子。 &lt;/p&gt;
&lt;p&gt; 写到这里才发现貌似有点长 ……  总之可以参考 &lt;a class="reference external" href="http://web.mit.edu/~simsong/www/ugh.pdf"&gt;Unix hater’s Handbook&lt;/a&gt;  里的相关历史评论和吐槽，那一段非常有意思。 &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="c"></category><category term="linux"></category><category term="stdio"></category><category term="tty"></category><category term="unix"></category><category term="ugh"></category><category term="ncurses"></category><category term="termcap"></category><category term="terminfo"></category></entry><entry><title>KDE5 Plasma 之跳动卖萌的活动按钮</title><link href="//farseerfc.github.io/zhs/jumping-kde5-plasma-activities-button.html" rel="alternate"></link><updated>2014-12-09T01:54:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2014-12-09:zhs/jumping-kde5-plasma-activities-button.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 今天尝试 &lt;span class="caps"&gt;KDE5&lt;/span&gt; Plasma  的活动的时候无意间发现这个现象。只要把活动按钮拖出桌面，它就会在桌面边缘来回跳动。   视频如下： &lt;/p&gt;

&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/SSbf97jGSpI"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div align="left" class="embed-responsive embed-responsive-16by9"&gt;&lt;embed align="middle" allowfullscreen="true" allowscriptaccess="always" class="embed-responsive-item" quality="high" src="http://player.youku.com/player.php/sid/XODQ0NjM2MzQ4/v.swf" type="application/x-shockwave-flash"&gt;&lt;/embed&gt;&lt;/div&gt;&lt;p&gt; 当然你可以把它再拖回来，所以这个问题还无伤大雅，只是卖萌。 &lt;/p&gt;
&lt;p&gt; 比比之前 Gnome3  那个跳动的界面真是好太多了： &lt;/p&gt;
&lt;div align="left" class="youtube embed-responsive embed-responsive-16by9"&gt;&lt;iframe class="embed-responsive-item" frameborder="0" src="https://www.youtube.com/embed/TRQJdRHYwrw"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div align="left" class="embed-responsive embed-responsive-16by9"&gt;&lt;embed align="middle" allowfullscreen="true" allowscriptaccess="always" class="embed-responsive-item" quality="high" src="http://player.youku.com/player.php/sid/XNjc4MjQ5NjE2/v.swf" type="application/x-shockwave-flash"&gt;&lt;/embed&gt;&lt;/div&gt;&lt;p&gt; 顺便，今天还看到一个卖萌的 &lt;span class="caps"&gt;KDE5&lt;/span&gt; Plasma  静音图标的翻译： &lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="zh-tw"&gt;&lt;p&gt;&lt;span class="caps"&gt;KDE5&lt;/span&gt; のミュート画面の中国语翻訳、「静音」のはずだが「镜音」になっている。 Vocaloid ファンのネタだか、単なる入力ミスだか分からない。 &lt;a href="http://t.co/ipyHjXMscR"&gt;pic.twitter.com/ipyHjXMscR&lt;/a&gt;&lt;/p&gt;— Jiachen &lt;span class="caps"&gt;YANG&lt;/span&gt; (@farseerfc) &lt;a href="https://twitter.com/farseerfc/status/541944351270518784"&gt;2014 12 月 8 日 &lt;/a&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;</summary><category term="kde5"></category><category term="plasma"></category><category term="linux"></category><category term="gnome3"></category></entry><entry><title>Pyssy 项目</title><link href="//farseerfc.github.io/zhs/pyssy.html" rel="alternate"></link><updated>2012-04-02T12:42:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-04-02:zhs/pyssy.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;div class="section" id="id1"&gt;
&lt;h2&gt; 简介 &lt;/h2&gt;
&lt;p&gt;Pyssy  是用于 &lt;a class="reference external" href="https://bbs.sjtu.edu.cn"&gt; 上海交通大学饮水思源站 &lt;/a&gt;  的一系列 Python  脚本和工具。 &lt;/p&gt;
&lt;p&gt;Pyssy  被有意设计为既可以托管寄宿在 &lt;span class="caps"&gt;SAE&lt;/span&gt; &lt;a class="footnote-reference" href="#sae" id="id3"&gt;[1]&lt;/a&gt;  上，也可以在单机上独立使用。 &lt;/p&gt;
&lt;p&gt; 项目地址： &lt;a class="reference external" href="http://pyssy.sinaapp.com/"&gt;http://pyssy.sinaapp.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github 上的源代码地址： &lt;a class="reference external" href="https://github.com/yssy-d3/pyssy"&gt;https://github.com/yssy-d3/pyssy&lt;/a&gt;&lt;/p&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="sae" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://sae.sina.com.cn/"&gt;Sina App Engine&lt;/a&gt;  ，新浪云平台，类似 &lt;a class="reference external" href="https://appengine.google.com/"&gt;Google App Engine&lt;/a&gt;  的东西。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt; 依赖关系 &lt;/h2&gt;
&lt;p&gt;Pyssy  使用 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;  作为网页服务器，并且使用 Memcached  或者 Redis  作为抓取 &lt;em&gt; 水源 Web&lt;/em&gt;  的缓存。 &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;SAE&lt;/span&gt; Python  环境下请开启 Memcached  支持。 &lt;/p&gt;
&lt;p&gt; 本地环境下请安装 Redis-py  并运行 redis-server  服务器程序。 &lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="sjtu"></category><category term="yssy"></category></entry><entry><title>PyRuby</title><link href="//farseerfc.github.io/zhs/mix-ruby.html" rel="alternate"></link><updated>2012-03-02T23:09:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-03-02:zhs/mix-ruby.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 今天在 GitHub 上闲逛的时候看到一个叫做 &lt;a class="reference external" href="https://github.com/danielfm/pyruby"&gt;PyRuby&lt;/a&gt;  的项目。项目的 Readme 说得很好： &lt;/p&gt;
&lt;pre class="literal-block"&gt;
PyRuby - Some Ruby for your Python!
PyRuby is a simple way to leverage the power of Ruby to make your Python code more readable and beautiful.

Usage
All you have to do is import the ruby module:

import ruby
From now on you should be able to write Ruby code within a regular Python module. An example:

1.upto(10) { |n| puts n }
&lt;/pre&gt;
&lt;p&gt; 甚至 &lt;a class="reference external" href="http://pypi.python.org/pypi/pyruby/1.0.0"&gt;PyPI&lt;/a&gt;  上还有这个项目的包。 &lt;/p&gt;
&lt;p&gt; 一开始我还以为这又是一个野心勃勃的基于 PyPy 的 Ruby 实现，或者某种 trick 在 Python 里面直接调用 Ruby 解释器。 &lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt; 然后我想看看这个的源代码 &lt;/h2&gt;
&lt;p&gt; 只有一个 ruby.py 文件，内容是： &lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="pygments-c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="pygments-k"&gt;print&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-s"&gt;"""

                              `.-:/+ossyhhddmmmmNNNNNNNmmmmmdddddhhhyyyyhhhyo:`
                       .:+sydNNNmmdhhysso++/+++++++////::::::-.```......--/oymms.
                  `:ohmdys+//::/::--::::////:-.```......`````.://:-`         `/dNs.
               .+hNds:`-:-:///::------::///++///:--....--::///::-`.///.        `oMm/
             /hNmo.`   ``    `....```````````      ...------:::-:/+/-.:/:`       /NMs
            oMd/`      `::::--.---://+`           //`     `````-:::::+/-`::.`     :NM+
            yN`       -+.`         `/`           o.               ``::.-:. ``      :NN:
           :Nm        -             ./           :    `.-://///:-.   `-` ``         :NN-
          /NM/           .-:::-.`   `/            `:sdmdhyMMMMMMNNmy/`               :mNo`
        :hMd:          /dmddddNNmdy+-.          `smmy/-```hMMMMMMMhydm/ `-.``     `...:mMm+.
      -hNd/-/o/-..-::`.ydmmmmNMMMMMMNh:/+-      dMN-`-+hmmmmdhhhhdddmMN-`-/o:    .-::::/oydms-
     oNMo:+/::.         ``...--:/+ohNMNhs-      :hNmmdyo:..``yo-```.--. `-`-+shdddhs+-` `.//yms.
    .MMo:/`o:.:+sso+:-`             sM+           ./-`       /mNh+-....-/ymNNdo::--/shd+`  -`:mm:
    /MM-o ./ ohhsooohNmy::sh.      `yM/                       `:oyyyyyyhys+:.` hy    `/Nh`  : -NN.
    -MM// -: ``   y: odddhh+     -omNh-          `--.` ``          ````    .:ohMMs.    +Ms  /  yMo
     hMoo .+.    :Mh  ````    `/hNd/.`           ohdddy::...`..`      `-/sdmdyo+NMNh+- :Mh  /  sMs
     .mmh:..:.  :NMm       `-/dMNM+         ./+++/:`.hM:`.````.` `-/shmNmh+-`  /Mmooso.hM/ .: `mM/
      .mNs://: .NMNMs-   -:-.`/+-sms.   `  `shyyyhy`sNd`   `.:+sdmmmdMM-.    .oNM+    :m/ `s``yMh
       -mMo  . sMNdMNNh+-.        .ydyoyy`        ``+o::+shdddhs+:-.:MM.`.-+hNMMh-    `.`-/::dNs`
        -NM-   mMMMh:MMdNmhs+:-..```-ohs-`...-:/+syhddmMMs:-.`    `/mMMdmmddNMm+`      ..-/hNh-
         sMy   NMMM`:Mh`-/mMmmmdddddddddhhhdNNdhyo+:--.yMs  `..:+ymMMMMd+--yNh.        `+hNh:
         -Mm   NMMM/yMh  -NM-`..--:NMo:--.`+My         :MNoydmNMMNmhdMh` -dNs`        `yMd:
         `MN   mMMMMMMMyshMN+:---.-MN-.....+My...-:/oyhdMMMMNmdy+-` +Mh:sNm/          yMy`
          MN   yMMMMMMMMMMMMMMMMMNMMMMNNNNNMMMNNNMMMMMNmhMM/-.      `yMMNs.          /My
         `MN   :MMmMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmmdy+:-``NM-      ./hNNy-           /Nd`
         -Mh    dMydMmsNMNdNNMMmmmNMMMdddhys+yMo``       /Nm:  `:yNNdo.           .sNd.
         +Ms    .mMsMN::NN:.:MN: `.+NM.      +Mo          +Mm+ymNdo-            .omm+`
         yM:     .hNMd+:sMN. oMm.   oMo      +Mh   ```.:+shMNmy+-``.-:-..-//-`:yNmo`
         mM.       :ohmNNMMdhyMMdo//+Mm//////sMNhyhhdmNNmhs/-``./+/:--+so/-:smNy/`
        .Mm        ``  .-:/+osyyhhddddddddddhhyysoo+/:-.  `./+//--+oo/--+ymmy/.
        :Mh   .:   `+:`        `.------------`      ```-////:/++/:../ydNdo:`
        +Ms   `/`    :+o+:-```              ``..-::///++///:-.`-+ydNdo:`
        oMs     :/:.``  `..---.``` ````````..-:/:::---.`  `-ohmmh+:`
        /Mh       .://///:::-----.-----.......`       `-+hmmy+-
         sMy`                                ``````-+ydmy+-
          /mNs-`                        `./ohmNMNNNmy+-
            /yNmho/:.``````````.-:/+syhdNmdyso+/-.`
              `:+ydmNMNNNNNNNNNmdhys+/:.`
                     ``.....`

    LOL U MAD?
"""&lt;/span&gt;&lt;span class="pygments-p"&gt;)&lt;/span&gt;

&lt;span class="pygments-kn"&gt;import&lt;/span&gt; &lt;span class="pygments-nn"&gt;sys&lt;/span&gt;
&lt;span class="pygments-n"&gt;sys&lt;/span&gt;&lt;span class="pygments-o"&gt;.&lt;/span&gt;&lt;span class="pygments-n"&gt;exit&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-mi"&gt;1&lt;/span&gt;&lt;span class="pygments-p"&gt;)&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt; 是的 …… 的确 …… 这种尝试把 Python 和 Ruby 放在一起的想法绝对是疯了 ……&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="ruby"></category></entry><entry><title>关于C++模板的类型转换的讨论</title><link href="//farseerfc.github.io/zhs/discuss-cpp-template-downcast.html" rel="alternate"></link><updated>2012-02-26T05:54:57+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-26:zhs/discuss-cpp-template-downcast.html</id><summary type="html">&lt;html&gt;&lt;body&gt;
&lt;p&gt; 这两天在饮水思源的 C 板，关于 C++ 模板的类型转换的一个讨论，后面是我的解答。 &lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt; 讨论地址 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html"&gt;http://bbs.sjtu.edu.cn/bbstcon,board,C,reid,1330078933,file,M.1330078933.A.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt; 原问题 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 今天在书上看到模板演绎的时候可以允许 cast-down ，于是我写了个东西： &lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-kt"&gt;bool&lt;/span&gt; &lt;span class="pygments-n"&gt;_Test&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;_Type&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-kt"&gt;void&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;struct&lt;/span&gt; &lt;span class="pygments-n"&gt;enable_if&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-p"&gt;};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;_Type&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;struct&lt;/span&gt; &lt;span class="pygments-n"&gt;enable_if&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-nb"&gt;true&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-n"&gt;_Type&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt;
    &lt;span class="pygments-k"&gt;typedef&lt;/span&gt; &lt;span class="pygments-n"&gt;_Type&lt;/span&gt; &lt;span class="pygments-n"&gt;type&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt;
&lt;span class="pygments-p"&gt;};&lt;/span&gt;

&lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;A&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-p"&gt;};&lt;/span&gt;
&lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;B&lt;/span&gt; &lt;span class="pygments-o"&gt;:&lt;/span&gt; &lt;span class="pygments-n"&gt;A&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-p"&gt;};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;struct&lt;/span&gt; &lt;span class="pygments-n"&gt;traits&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-k"&gt;static&lt;/span&gt; &lt;span class="pygments-kt"&gt;int&lt;/span&gt; &lt;span class="pygments-k"&gt;const&lt;/span&gt; &lt;span class="pygments-n"&gt;value&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-nb"&gt;false&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt; &lt;span class="pygments-p"&gt;};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;struct&lt;/span&gt; &lt;span class="pygments-n"&gt;traits&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;A&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-k"&gt;static&lt;/span&gt; &lt;span class="pygments-kt"&gt;int&lt;/span&gt; &lt;span class="pygments-k"&gt;const&lt;/span&gt; &lt;span class="pygments-n"&gt;value&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-nb"&gt;true&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt; &lt;span class="pygments-p"&gt;};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-kt"&gt;void&lt;/span&gt; &lt;span class="pygments-n"&gt;f&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;enable_if&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;traits&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="pygments-n"&gt;value&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="pygments-n"&gt;type&lt;/span&gt;&lt;span class="pygments-o"&gt;*&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-mi"&gt;0&lt;/span&gt;&lt;span class="pygments-p"&gt;)&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-p"&gt;}&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-kt"&gt;void&lt;/span&gt; &lt;span class="pygments-n"&gt;f&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;A&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;A&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-n"&gt;enable_if&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;traits&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;A&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="pygments-n"&gt;value&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="pygments-n"&gt;type&lt;/span&gt;&lt;span class="pygments-o"&gt;*&lt;/span&gt;&lt;span class="pygments-p"&gt;)&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt; &lt;span class="pygments-p"&gt;}&lt;/span&gt;



&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;BB&lt;/span&gt; &lt;span class="pygments-p"&gt;{};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="pygments-k"&gt;class&lt;/span&gt; &lt;span class="pygments-nc"&gt;DD&lt;/span&gt; &lt;span class="pygments-o"&gt;:&lt;/span&gt; &lt;span class="pygments-k"&gt;public&lt;/span&gt; &lt;span class="pygments-n"&gt;BB&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-p"&gt;{};&lt;/span&gt;

&lt;span class="pygments-k"&gt;template&lt;/span&gt; &lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-k"&gt;typename&lt;/span&gt; &lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-kt"&gt;void&lt;/span&gt; &lt;span class="pygments-n"&gt;ff&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;BB&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-n"&gt;T&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pygments-p"&gt;)&lt;/span&gt; &lt;span class="pygments-p"&gt;{};&lt;/span&gt;

&lt;span class="pygments-kt"&gt;int&lt;/span&gt; &lt;span class="pygments-nf"&gt;main&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-kt"&gt;int&lt;/span&gt; &lt;span class="pygments-n"&gt;argc&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-kt"&gt;char&lt;/span&gt; &lt;span class="pygments-o"&gt;*&lt;/span&gt; &lt;span class="pygments-n"&gt;argv&lt;/span&gt;&lt;span class="pygments-p"&gt;[])&lt;/span&gt;
&lt;span class="pygments-p"&gt;{&lt;/span&gt;
    &lt;span class="pygments-n"&gt;A&lt;/span&gt; &lt;span class="pygments-n"&gt;a&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt; &lt;span class="pygments-n"&gt;B&lt;/span&gt; &lt;span class="pygments-n"&gt;b&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt;
    &lt;span class="pygments-n"&gt;DD&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-kt"&gt;long&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-n"&gt;dd&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt;
    &lt;span class="pygments-c1"&gt;//f(b);
&lt;/span&gt;    &lt;span class="pygments-n"&gt;ff&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;dd&lt;/span&gt;&lt;span class="pygments-p"&gt;);&lt;/span&gt;
&lt;span class="pygments-p"&gt;}&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt; 奇怪的是重载决议的时候， &lt;code class="code"&gt;
f&lt;/code&gt;
  的情况下它就不让我特化的 &lt;code class="code"&gt;
f&amp;lt;A&amp;gt;&lt;/code&gt;
  进来。 &lt;/p&gt;
&lt;p&gt; 但是在 &lt;code class="code"&gt;
ff&lt;/code&gt;
  的情况下， &lt;code class="code"&gt;
ff&amp;lt;BB&amp;lt;long&amp;gt;&amp;gt;&lt;/code&gt;
  却进来了。 &lt;/p&gt;
&lt;p&gt; 在 &lt;span class="caps"&gt;VC10&lt;/span&gt; 和 &lt;span class="caps"&gt;GCC3&lt;/span&gt;.4 下测试 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt; 我的解答 &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 我们来设身处地地作为编译器，看一遍到底发生了什么。 &lt;/p&gt;
&lt;p&gt; 约定符号 &lt;code class="code"&gt;
#&lt;/code&gt;
 : &lt;code class="code"&gt;
A#B&lt;/code&gt;
  是把 &lt;code class="code"&gt;
B&lt;/code&gt;
  带入 &lt;code class="code"&gt;
A&amp;lt;T&amp;gt;&lt;/code&gt;
  的参数 &lt;code class="code"&gt;
T&lt;/code&gt;
  之后实例化得到的结果。 &lt;/p&gt;
&lt;div class="section" id="ff"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt; 首先看 ff 的情况。 &lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="pygments-n"&gt;DD&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pygments-kt"&gt;long&lt;/span&gt;&lt;span class="pygments-o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pygments-n"&gt;dd&lt;/span&gt;&lt;span class="pygments-p"&gt;;&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt; 处理到这句的时候，编译器看到了 &lt;code class="code"&gt;
DD&amp;lt;long&amp;gt;&lt;/code&gt;
  的实例化，于是去实例化 &lt;code class="code"&gt;
DD#long&lt;/code&gt;
  ，继而实例化了 &lt;code class="code"&gt;
BB#long&lt;/code&gt;
  。 &lt;/p&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="pygments-n"&gt;ff&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;dd&lt;/span&gt;&lt;span class="pygments-p"&gt;);&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt; 这句，首先计算重载函数集合。 &lt;/p&gt;
&lt;p&gt; 第一步，需要从参数 &lt;code class="code"&gt;
DD#long -&amp;gt; BB&amp;lt;T&amp;gt;&lt;/code&gt;
  推断 &lt;code class="code"&gt;
ff&amp;lt;T&amp;gt;&lt;/code&gt;
  的 &lt;code class="code"&gt;
T&lt;/code&gt;
  。根据函数模板参数推断规则： &lt;/p&gt;
&lt;pre class="literal-block"&gt;
:code:`class_template_name&amp;lt;T&amp;gt;`  类型的参数，可以用于推断 :code:`T`  。 &lt;/pre&gt;
&lt;p&gt; 于是编译器推断 &lt;code class="code"&gt;
T&lt;/code&gt;
  为 &lt;code class="code"&gt;
long&lt;/code&gt;
  。这里就算不是 &lt;code class="code"&gt;
BB&lt;/code&gt;
  而是完全无关的 &lt;code class="code"&gt;
CC&lt;/code&gt;
  都可以推断成功，只要 &lt;code class="code"&gt;
CC&lt;/code&gt;
  也是一个 &lt;code class="code"&gt;
CC&amp;lt;T&amp;gt;&lt;/code&gt;
  形式的模板。 &lt;/p&gt;
&lt;p&gt; 第二步，模板特化匹配。因为只有一个模板，所以匹配了最泛化的 &lt;code class="code"&gt;
ff&amp;lt;T&amp;gt;&lt;/code&gt;
  。 &lt;/p&gt;
&lt;p&gt; 第三步，模板实例化。 &lt;/p&gt;
&lt;p&gt; 推断了 &lt;code class="code"&gt;
long -&amp;gt; T&lt;/code&gt;
  之后，编译器实例化 &lt;code class="code"&gt;
ff#long&lt;/code&gt;
  。 &lt;/p&gt;
&lt;p&gt; 重载函数集合： &lt;code class="code"&gt;
{ff#long}&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt; 然后重载抉择找到唯一的可匹配的实例 &lt;code class="code"&gt;
ff#long&lt;/code&gt;
  ，检查实际参数 &lt;code class="code"&gt;
DD#long&lt;/code&gt;
  可以隐式转换到形式参数 &lt;code class="code"&gt;
BB#long&lt;/code&gt;
  ，从而生成了这次函数调用。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt; 再来看 f 的情况。 &lt;/a&gt;&lt;/h3&gt;
&lt;pre class="code c++ literal-block"&gt;
&lt;span class="pygments-n"&gt;f&lt;/span&gt;&lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-n"&gt;b&lt;/span&gt;&lt;span class="pygments-p"&gt;);&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt; 计算候选重载函数集合。 &lt;/p&gt;
&lt;p&gt; 第一步，对所有 &lt;code class="code"&gt;
f&lt;/code&gt;
  模板推断实参。根据函数模板参数推断规则： &lt;/p&gt;
&lt;pre class="literal-block"&gt;
 带有 :code:`T`  类型的参数，可以用于推断 :code:`T`  。 &lt;/pre&gt;
&lt;p&gt; 于是 &lt;code class="code"&gt;
B -&amp;gt; T&lt;/code&gt;
  被推断出来了。 &lt;/p&gt;
&lt;p&gt; 第二步，模板特化匹配。 &lt;/p&gt;
&lt;p&gt; 这里 &lt;code class="code"&gt;
B&lt;/code&gt;
  不是 &lt;code class="code"&gt;
A&lt;/code&gt;
  ，所以不能用 &lt;code class="code"&gt;
f&amp;lt;A&amp;gt;&lt;/code&gt;
  特化，只能用 &lt;code class="code"&gt;
f&amp;lt;T&amp;gt;&lt;/code&gt;
  模板。 &lt;/p&gt;
&lt;p&gt; 第三步，模板实例化。 &lt;/p&gt;
&lt;p&gt;&lt;code class="code"&gt;
B&lt;/code&gt;
  带入 &lt;code class="code"&gt;
f&amp;lt;T&amp;gt;&lt;/code&gt;
  实例化成 &lt;code class="code"&gt;
f#B&lt;/code&gt;
  的过程中，实例化 &lt;code class="code"&gt;
traits#B&lt;/code&gt;
  。 &lt;/p&gt;
&lt;p&gt; 由于没有针对 &lt;code class="code"&gt;
B&lt;/code&gt;
  的特化，所以用 &lt;code class="code"&gt;
traits&amp;lt;T&amp;gt;&lt;/code&gt;
  模板， &lt;code class="code"&gt;
traits#B::value=false&lt;/code&gt;
  ，进而 &lt;code class="code"&gt;
enable_if#false&lt;/code&gt;
  没有 &lt;code class="code"&gt;
type&lt;/code&gt;
  ，出错。 &lt;/p&gt;
&lt;p&gt; 唯一的模板匹配出错，重载函数集合为空， &lt;span class="caps"&gt;SFINAE&lt;/span&gt; 原则不能找到合适的匹配，于是报错。 &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="template"></category><category term="C"></category></entry><entry><title>尝试一下 Pelican</title><link href="//farseerfc.github.io/zhs/try-pelican.html" rel="alternate"></link><updated>2012-02-24T17:33:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-02-24:zhs/try-pelican.html</id><summary type="html">&lt;html&gt;&lt;body&gt;&lt;p&gt; 似乎一夜之间所有的 &lt;a class="reference external" href="http://blog.yxwang.me/2011/11/migrated-to-octopress/"&gt; 极客们 &lt;/a&gt;
&lt;a class="reference external" href="http://xoyo.name/2012/02/migrate-to-octopress/"&gt; 都 &lt;/a&gt;
&lt;a class="reference external" href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/"&gt; 有了 &lt;/a&gt;
&lt;a class="reference external" href="http://www.yangzhiping.com/tech/octopress.html"&gt; 自己 &lt;/a&gt;
 的 &lt;a class="reference external" href="http://pages.github.com/#user__organization_pages"&gt;Github 主页 &lt;/a&gt;
 和 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  博客。就像所有人在他们的博客中指出的，静态博客的确比传统的 WordPress 方式具有更多优势。自从看到这些我就一直在想着自己搭一个 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  。 &lt;/p&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt; 但是似乎 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  不适合我 &lt;/h2&gt;
&lt;p&gt; 一上手就被 &lt;a class="reference external" href="http://octopress.org/docs/setup/"&gt;Octopress 的搭建步骤 &lt;/a&gt;  烦到了。 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;&lt;span class="caps"&gt;RVM&lt;/span&gt;&lt;/a&gt;  是什么？ &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt;  又是什么？看来 Ruby  社区的快节奏发展已经超过了我的想象，他们似乎需要一套发行版管理器来调和不同版本之间的 Ruby  的兼容性问题。虽然同样的兼容性问题在 Python  社区也有 &lt;a class="footnote-reference" href="#id10" id="id8"&gt;[1]&lt;/a&gt;  ，不过总觉得 Python  至少还没到需要一个发行版管理器的程度 &lt;a class="footnote-reference" href="#id11" id="id9"&gt;[2]&lt;/a&gt;  。 &lt;/p&gt;
&lt;p&gt; 真正的问题是我手上还没有一个可以让我随便玩的 Linux  环境（真的想要 …… ）。而无论是 &lt;a class="reference external" href="http://beginrescueend.com/"&gt;&lt;span class="caps"&gt;RVM&lt;/span&gt;&lt;/a&gt;  还是 &lt;a class="reference external" href="https://github.com/sstephenson/rbenv"&gt;rbenv&lt;/a&gt;  似乎都只支持 Unix/Linux/MacOSX  。身为极客就注定不能用 Windows  么？（或许是的 …… ）。 &lt;/p&gt;
&lt;p&gt; 剩下的问题就是 Ruby  和 Python  两大阵营的对立问题了。我不熟悉 &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;  ，相对来说比较喜欢 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt;  。似乎无论哪边都要依赖 &lt;a class="reference external" href="http://pygments.org/"&gt;Pygments&lt;/a&gt;  作为代码着色器，那么其实 Rubyist  也至少需要安装 Python  。我倾向于不依赖任何 Ruby  组件，最好没有 C  扩展的纯 Python  实现。 &lt;/p&gt;
&lt;p&gt; 于是我开始在 Github  上找 Python  的静态博客引擎。 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;  的作者 &lt;a class="reference external" href="https://github.com/mitsuhiko"&gt;mitsuhiko&lt;/a&gt;  写的 &lt;a class="reference external" href="https://github.com/mitsuhiko/rstblog"&gt;rstblog&lt;/a&gt;  看起来不错，不过似乎没有多少人在用。 &lt;a class="reference external" href="http://ringce.com/hyde"&gt;Hyde&lt;/a&gt;  似乎很完善，不过默认的标记语言是 MarkDown  ，又依赖于几个 Ruby  组建，而且官方网站的设计实在太前卫。最终我看到了 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  。 &lt;/p&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="id10" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id8"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 比如 Python 2.x  与 3.x  之间看似难以跨越的鸿沟，以及 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;  、 &lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;  、 &lt;a class="reference external" href="http://www.stackless.com/"&gt;Stackless&lt;/a&gt;  、 &lt;a class="reference external" href="http://cython.org/"&gt;Cython&lt;/a&gt;  等各个实现之间的微妙差别。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="footnote docutils table-hover  table-striped table" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;/col&gt;&lt;col&gt;&lt;/col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt; 是的，我们有 &lt;a class="reference external" href="http://packages.python.org/distribute/easy_install.html"&gt;easy_install&lt;/a&gt;  ，我们有 &lt;a class="reference external" href="http://www.pip-installer.org/en/latest/index.html"&gt;pip&lt;/a&gt;  ，不过这些都是包管理器，都是装好特定的 Python 实现之后的事情。 Python 实现本身还不需要包管理器来管理。 Python  的版本问题基本上也只需要 &lt;a class="reference external" href="http://docs.python.org/release/3.0.1/library/2to3.html"&gt;2to3.py&lt;/a&gt;  和 &lt;a class="reference external" href="http://www.startcodon.com/wordpress/?cat=8"&gt;3to2.py&lt;/a&gt;  这样的轻量级转换器就可以了，你不需要为了安装多个软件而在硬盘里留下多个不同版本的 Python  。如果为了引用的稳定性，你可以用 &lt;a class="reference external" href="http://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;  ，不过这又是另一回事情了。 &lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt; 那么就 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  吧 &lt;/h2&gt;
&lt;p&gt; 对我而言， &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  相比于 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  有几个好处： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt; 纯 Python  实现。这意味着我可以换用任何 Python  解释器而不必担心兼容性问题。比如我就换成了 &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt; 。 &lt;/li&gt;
&lt;li&gt; 多语言支持。因为 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  的作者似乎是个法国人。不过这个似乎大部分人不需要 ……  我是想尽量把一篇博客写成三种语言作为锻炼吧。 &lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;ReST&lt;/a&gt;  。这样我就可以用 &lt;a class="reference external" href="http://webpages.charter.net/edreamleo/front.html"&gt;Leo&lt;/a&gt;  的 @auto-rst  直接写  ReST 了。简单方便快捷有效。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt; 不过似乎 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  的关注度不如 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt;  那么高，现在一些部分还有细微的问题： &lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;pelican-import  从 WordPress  导入的时候对中文、日文的支持似乎很成问题。 &lt;/li&gt;
&lt;li&gt; 日期格式、时区、字符集、和多语言功能的结合度还不够。 &lt;strong&gt; 我在尝试改善它。 &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt; 模板还不够丰富。 &lt;/li&gt;
&lt;li&gt; 插件也不够多 ……&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt; 希望这么优秀的工具能够受到更多关注，以上这些问题都是增加关注度之后很快就能解决的问题。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-py"&gt;
&lt;h2&gt; 我的设置  settings.py&lt;/h2&gt;
&lt;p&gt; 安装 &lt;a class="reference external" href="http://pelican.notmyidea.org/en/latest/"&gt;Pelican&lt;/a&gt;  很容易，一句话就够了： &lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="pygments-gp"&gt;$&lt;/span&gt; pip install pelican

&lt;/pre&gt;
&lt;p&gt; 然后把文章写成 ReST 的格式，放在 `pages` 文件夹里面。 ( 重新 ) 生成只要： &lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="pygments-gp"&gt;$&lt;/span&gt; pelican -s settings.py

&lt;/pre&gt;
&lt;p&gt; 上传到  Github:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="pygments-gp"&gt;$&lt;/span&gt; git commit -am &lt;span class="pygments-s2"&gt;"Commit message"&lt;/span&gt;
&lt;span class="pygments-gp"&gt;$&lt;/span&gt; git push

&lt;/pre&gt;
&lt;p&gt; 就这么简单。附上我的配置文件： &lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="pygments-c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="pygments-n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'Asia/Tokyo'&lt;/span&gt;

&lt;span class="pygments-n"&gt;DATE_FORMATS&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-p"&gt;{&lt;/span&gt;
    &lt;span class="pygments-s"&gt;'en'&lt;/span&gt;&lt;span class="pygments-p"&gt;:(&lt;/span&gt;&lt;span class="pygments-s"&gt;'usa'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt;&lt;span class="pygments-s"&gt;'%a, &lt;/span&gt;&lt;span class="pygments-si"&gt;%d&lt;/span&gt;&lt;span class="pygments-s"&gt; %b %Y'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
    &lt;span class="pygments-s"&gt;'zh'&lt;/span&gt;&lt;span class="pygments-p"&gt;:(&lt;/span&gt;&lt;span class="pygments-s"&gt;'chs'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt;&lt;span class="pygments-s"&gt;'%Y-%m-&lt;/span&gt;&lt;span class="pygments-si"&gt;%d&lt;/span&gt;&lt;span class="pygments-s"&gt;, %a'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
    &lt;span class="pygments-s"&gt;'jp'&lt;/span&gt;&lt;span class="pygments-p"&gt;:(&lt;/span&gt;&lt;span class="pygments-s"&gt;'jpn'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt;&lt;span class="pygments-s"&gt;'%Y/%m/&lt;/span&gt;&lt;span class="pygments-si"&gt;%d&lt;/span&gt;&lt;span class="pygments-s"&gt; (%a)'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
&lt;span class="pygments-p"&gt;}&lt;/span&gt;
&lt;span class="pygments-c"&gt;# windows locale: http://msdn.microsoft.com/en-us/library/cdax410z%28VS.71%29.aspx&lt;/span&gt;
&lt;span class="pygments-n"&gt;LOCALE&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-p"&gt;[&lt;/span&gt;&lt;span class="pygments-s"&gt;'usa'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'chs'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'jpn'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt;        &lt;span class="pygments-c"&gt;# windows&lt;/span&gt;
          &lt;span class="pygments-s"&gt;'en_US'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'zh_CN'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'ja_JP'&lt;/span&gt;&lt;span class="pygments-p"&gt;]&lt;/span&gt;  &lt;span class="pygments-c"&gt;# Unix/Linux&lt;/span&gt;
&lt;span class="pygments-n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'zh'&lt;/span&gt;

&lt;span class="pygments-n"&gt;SITENAME&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'Farseerfc Blog'&lt;/span&gt;
&lt;span class="pygments-n"&gt;AUTHOR&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'Jiachen Yang'&lt;/span&gt;

&lt;span class="pygments-n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'farseerfcgithub'&lt;/span&gt;
&lt;span class="pygments-n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'https://github.com/farseerfc'&lt;/span&gt;
&lt;span class="pygments-n"&gt;SITEURL&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'http://farseerfc.github.com'&lt;/span&gt;
&lt;span class="pygments-n"&gt;TAG_FEED&lt;/span&gt;  &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'feeds/&lt;/span&gt;&lt;span class="pygments-si"&gt;%s&lt;/span&gt;&lt;span class="pygments-s"&gt;.atom.xml'&lt;/span&gt;

&lt;span class="pygments-n"&gt;SOCIAL&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-p"&gt;((&lt;/span&gt;&lt;span class="pygments-s"&gt;'twitter'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'http://twitter.com/farseerfc'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
          &lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-s"&gt;'github'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'https://github.com/farseerfc'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
          &lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-s"&gt;'facebook'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'http://www.facebook.com/farseerfc'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
          &lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-s"&gt;'weibo'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'http://weibo.com/farseerfc'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
          &lt;span class="pygments-p"&gt;(&lt;/span&gt;&lt;span class="pygments-s"&gt;'renren'&lt;/span&gt;&lt;span class="pygments-p"&gt;,&lt;/span&gt; &lt;span class="pygments-s"&gt;'http://www.renren.com/farseer'&lt;/span&gt;&lt;span class="pygments-p"&gt;),&lt;/span&gt;
          &lt;span class="pygments-p"&gt;)&lt;/span&gt;


&lt;span class="pygments-n"&gt;TWITTER_USERNAME&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'farseerfc'&lt;/span&gt;

&lt;span class="pygments-n"&gt;THEME&lt;/span&gt;&lt;span class="pygments-o"&gt;=&lt;/span&gt;&lt;span class="pygments-s"&gt;'notmyidea'&lt;/span&gt;
&lt;span class="pygments-n"&gt;CSS_FILE&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;"wide.css"&lt;/span&gt;

&lt;span class="pygments-n"&gt;DEFAULT_CATEGORY&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt;&lt;span class="pygments-s"&gt;'Others'&lt;/span&gt;
&lt;span class="pygments-n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'.'&lt;/span&gt;
&lt;span class="pygments-n"&gt;PATH&lt;/span&gt; &lt;span class="pygments-o"&gt;=&lt;/span&gt; &lt;span class="pygments-s"&gt;'posts'&lt;/span&gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="python"></category><category term="pelican"></category></entry></feed>