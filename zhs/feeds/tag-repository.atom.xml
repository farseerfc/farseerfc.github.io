<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Farseerfc的小窝</title><link href="//farseerfc.github.io/zhs/" rel="alternate"></link><link href="//farseerfc.github.io/feeds/tag-repository.atom.xml" rel="self"></link><id>//farseerfc.github.io/zhs/</id><updated>2012-06-02T10:42:00+09:00</updated><entry><title>MSR 2012 @ ICSE</title><link href="//farseerfc.github.io/zhs/msr2012.html" rel="alternate"></link><updated>2012-06-02T10:42:00+09:00</updated><author><name>farseerfc</name></author><id>tag:farseerfc.github.io,2012-06-02:zhs/msr2012.html</id><summary type="html">&lt;html&gt;&lt;body&gt;
&lt;div class="section" id="mining-software-repository-2012-icse"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Mining Software Repository 2012 @ &lt;span class="caps"&gt;ICSE&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt; 参加了今年的 &lt;span class="caps"&gt;MSR&lt;/span&gt; ，会场在 University of Zurich 。一大早来到大学，注册有点小插曲，显然瑞士人搞不清楚中国人的名字， 3 个杨（ Yang ）姓的中国人的名牌被搞错了。然后堀田学长的所属被写作了 “Japan, Japan” ，成为了全日本的代表。 &lt;/p&gt;
&lt;div class="section" id="msr-microsoft-research-talk-msr-mining-software-repositories"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;&lt;span class="caps"&gt;MSR&lt;/span&gt;(MicroSoft Research) talk @ &lt;span class="caps"&gt;MSR&lt;/span&gt;(Mining Software Repositories)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 首先是来自微软亚洲研究院（ MicroSoft Research @ Asia, &lt;span class="caps"&gt;MSR&lt;/span&gt; Asia ）的 Keynots ，于是就变成了 &lt;span class="caps"&gt;MSR&lt;/span&gt; 在 &lt;span class="caps"&gt;MSR&lt;/span&gt; 的演讲。 &lt;span class="caps"&gt;MSR&lt;/span&gt; 的张冬梅（ Dongmei Zhang ）女士的演讲分为关于 Software Analysis 和 &lt;span class="caps"&gt;XIAO&lt;/span&gt; 的两部分。 &lt;span class="caps"&gt;XIAO&lt;/span&gt; 是 &lt;span class="caps"&gt;MSRA&lt;/span&gt; 开发的 Code Clone
Detector ，似乎我要给井上研做的就是这个。想更多了解 Xiao 的细节，不过张女士   演讲结束的时候的鼓掌导致了话筒的小故障。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="towards-improving-bts-with-game-mechanisms"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Towards Improving &lt;span class="caps"&gt;BTS&lt;/span&gt; with Game Mechanisms&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 感觉这篇的内容基本上就是关于 &lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.joelonsoftware.com/items/2008/09/15.html"&gt;http://www.joelonsoftware.com/items/2008/09/15.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 这里写到的东西，然后说同样的理论是否可以用于 Issue Tracking 之类的事情上。个人感觉这个意义不大， stackoverflow 之所以成功是因为它把开源社区本身就具有的名誉体系具现化了，本着大家都喜欢被别人奉为大牛的心态，就如同 wikipedia 一样。同样的理论如果用于公司内部的 Issue Tracking 系统上，会得到完全不同的东西吧。就像 &lt;span class="caps"&gt;MSDN&lt;/span&gt; 的组织方式虽然和 wikipedia 是一样的，但是在 &lt;span class="caps"&gt;MSDN&lt;/span&gt;  里找信息的感觉和在 wikipedia 完全不一样。个人不太看好这个方向。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ghtorrent"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;GHTorrent&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 这篇的 slide 在这里可以看到： &lt;a class="reference external" href="http://www.slideshare.net/gousiosg/ghtorrent-githubs-data-from-a-firehose-13184524"&gt;http://www.slideshare.net/gousiosg/ghtorrent-githubs-data-from-a-firehose-13184524&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Data exporter for github. Github 的主要数据，代码，已经可以通过 git 接口获得了， wiki 是 git 的形式保存的。所以这个项目的目的就是暴露别的数据，主要是 issue tracking ， code comments ，这种。代码访问 github api ，然后用分布式实现以克服 api 的限制，然后提供 torrents 形式的 history 下载。 github api 获得的 json 数据以 bson 的形式保存在 MongoDB 里，解析过的有了 Schema 之后的数据保存在 MySQL 里并可以导出 &lt;span class="caps"&gt;SQL&lt;/span&gt; 。 &lt;/p&gt;
&lt;p&gt; 个人的想法，觉得数据如果能够更统一，全部存在 Git 里或许更好，像 Wiki 一样。同样是要暴露全部历史记录的目的，用 Torrent 自己实现的历史远不如用 Git 的接口实现的历史记录方便吧， git blame 之类的也更方便追踪 code comment 之类的作者信息。当然对 git 的 raw date 直接读写，需要对 git 的内部原理有足够的理解，   或许只有 github 的人有这种能力了。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="topic-mining"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Topic Mining&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 用得两个参数， &lt;span class="caps"&gt;DE&lt;/span&gt;  和 &lt;span class="caps"&gt;AIC&lt;/span&gt; ，完全不能理解，过后研究。实验针对了 Firefox,
Mylyn, Eclipse 三个软件。试图从 Repo 中分析源代码的 identifier 和 comments ，找到 topic 和 bug 之间的关系，比如怎样的 topic 更容易导致 bug 。得出的结论似乎也很暧昧，只是说核心功能被报告的 bug 更多，但是不知道原因。这只能表示核心   功能受到更多关注和更多测试吧，并不能说明核心功能就容易产生 bug 。 &lt;/p&gt;
&lt;p&gt; 不过这个的 Slide 做得很漂亮，很容易理解。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="secold"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;SeCold&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A linked data platform for mining software repositories&lt;/p&gt;
&lt;p&gt; 没听懂这个项目的目的。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-evolution-of-software"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;The evolution of software&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 第二天的 Keynotes ，关于将 Social Media 和 Software Development 相结合的想法。或许就是 Github 赖以成功的基础。讲到代码中的 comment, Tags, uBlog, blog 之类的 social 的特性和 &lt;span class="caps"&gt;IDE&lt;/span&gt; 的融合的趋势。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="do-faster-releases-imporve-software-quality"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Do Faster Releases Imporve Software Quality?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt; 使用 Firefox 作为例子。 &lt;/p&gt;
&lt;p&gt; 结论是快速发布导致 bug 更多，更容易 crash ，但是 bug 更快得到修复，并且用户   更快转向新的发布。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security-vs-performance-bugs-in-firefox"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Security vs Performance Bugs in Firefox&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Performance bugs are regression, blocks release.&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils"/&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt; 一些感想 &lt;/a&gt;&lt;/h3&gt;
&lt;div class="section" id="commit"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id13"&gt; 基于自然语义分析的 commit 分割 &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; 经常工具（比如 git ）的使用者并没有按照工具设计者的意图使用工具，这给 &lt;span class="caps"&gt;MSR&lt;/span&gt;
 带来很多困难。举个例子， git 有非常完美的 branch 系统，通常期望 git 的使用者能够在一次 commit 里 commit 一个功能，比如一个 bug 的修复，或者一个 feature 的   添加，但是事实上经常有很多逻辑上的 commit 被合并在一个里面了。 &lt;/p&gt;
&lt;p&gt; 或许这不是使用者的错，而是工具仍然不够人性的表现。或许我们可以自动把   一次的 commit 按照语义分割成多个。 &lt;/p&gt;
&lt;p&gt; 分割之后，可以更容易地把 issue 和 commit 关联，也更容易组织更多的研究。 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slides"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id14"&gt; 关于这次发表中大家用的 slides 系统 &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; 题目为 “Incorporating Version Histories in Information Retrieval Based
Bug Localization” 的人用的 slide 是 beamer 的。公式很多， overlay 很多，列表很多，图片很少，典型的 beamer 做出的 slide 。思维导图用得很不错。今天一天   有至少 3 个 slide 是用 beamer 做的。 &lt;/p&gt;
&lt;p&gt; 题目为 “Towards Improving Bug Tracking Systems with Game Mechanisms”
 的人用了 prezi ，图片很多，过度很多。但是比如没有页号没有页眉页脚，正式   会议的场合不太方便。 &lt;/p&gt;
&lt;p&gt; 至少有六个以上用了 Apple Keynotes ， Keynotes 做出来的东西真的和 Powerpoint  做出来的很难区别，其中两个人用了初始的主题所以才看出来。 &lt;/p&gt;
&lt;p&gt; 剩下的自然是 &lt;span class="caps"&gt;PPT&lt;/span&gt; 。 &lt;span class="caps"&gt;MSRA&lt;/span&gt; 的张女士做的虽然是 &lt;span class="caps"&gt;PPT&lt;/span&gt; ，倒是有很多 beamer 的感觉，比如页眉页脚和 overlay 的用法。这些如果都是 &lt;span class="caps"&gt;PPT&lt;/span&gt; 做出来的，会多很多额外的   人力吧。 &lt;/p&gt;
&lt;p&gt; 值得一提的是有一个题目为 “Green Mining: A Methodology of Relating
Software Change to Power Consumption” 的人的 slide 全是 “ 劣质 ” 的手绘漫画，效果意外地好，很低碳很环保很绿色很可爱。具体效果可以参考下面的动画，虽然   现场看到的不是一个版本： &lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://softwareprocess.es/a/greenmining-presentatation-at-queens-20120522.ogv"&gt;http://softwareprocess.es/a/greenmining-presentatation-at-queens-20120522.ogv&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#id15"&gt; 微软是个腹黑娘！ &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; 嘛虽然这也不是什么新闻了。 &lt;span class="caps"&gt;MSR2012&lt;/span&gt; 的 Mining Challenge 的赞助商是微软，管理   组织者来自微软研究院，奖品是 Xbox 和 Kinect 。然后今年的题目是： &lt;/p&gt;
&lt;pre class="literal-block"&gt;
Mining Android Bug
&lt;/pre&gt;
&lt;p&gt; 我看到了微软满满的怨气 ……&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;</summary><category term="msr"></category><category term="icse"></category><category term="mining"></category><category term="software"></category><category term="repository"></category></entry></feed>