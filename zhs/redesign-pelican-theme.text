重新设计了Pelican的主题与插件
=======================================

:slug: redesign-pelican-theme
:lang: zhs
:date: 2014-12-14 23:45
:tags: python, pelican
:series: pelican

.. contents::

.. PELICAN_BEGIN_SUMMARY

前言
++++++++++++++++++++


不知不觉间放任这边长草很久了，从上次 `折腾主题 <{filename}/python/try_pelican.zhs.rst>`_ 到现在都快三年了，
而从上次 `写了篇告白信 <{filename}/life/marry-me.zhs.rst>`_ 到现在也有快两年了。
这期间曾经把主题配色从 `Bootstrap 2 <http://getbootstrap.com/2.3.2/>`_ 默认的白底黑字改成了黑底白字，
也不过是用 drop-in 的配色方案而已，没有本质上的改进。

洞中一日世上千载，两年里 Bootstrap 已经升上 `v3.3 <http://getbootstrap.com/>`_ ,
而 Pelican 则已经升到 `3.5 <https://github.com/getpelican/pelican/releases/tag/3.5.0>`_ 了。
早就眼馋 Bootstrap 和 Pelican 中的诸多新功能新设计，不过无奈于时间有限只能饱饱眼福。


.. PELICAN_END_SUMMARY


.. panel-default::
    :title: Bootstrap 3 的新设计

    - 全新的mobile-first responsive设计。

      原本Bootstrap 2虽然有responsive design的设计，
      不过诸多细节不能符合我的需求，最终还是得手工 hack :code:`@media screen` 查询去微调。
      现在的mobile-first responsive grid system 则相对显得科学很多了，也终于在手持设备上看起来能舒服很多。
      诸位可以尝试改变窗口宽度，或者在不同的手持设备上打开这个 blog ，体验一下这个页面在不同显示器大小中的效果。
      如果仍有问题欢迎 `发 Issue 给我 <https://github.com/farseerfc/pelican-bootstrap3/issues>`_  呀。

    - 科学的 Navbar 。

      比 Bootstrap 2 那个科学很多了。无论是 sticky 在上端还是跟着浮动，或者像这边这样
      `自动隐藏 <http://www.virtuosoft.eu/code/bootstrap-autohidingnavbar/>`_ 都很简单。  

    更多细节参考 `Bootstrap 3 主页 <http://getbootstrap.com/>`_ 。


.. panel-default::
    :title: Pelican 3.5 的新功能

    - Python 2 和 Python 3 统一代码

      再没有恼人的 unicode 相关的问题了。这对 blog 系统来说相当重要啊。
      而且还能方便切换 pypy 等不同的解释器。

    - 全新的插件系统：非常多好用的 `插件 <https://github.com/getpelican/pelican-plugins>`_ 等着你。

    - 增强了导入系统：嗯总算可以导入我的中文的 wordpress 博客了。（虽然那边长草更久了……）

    - 页面内链接：不用硬编码手写链接了，方便各种 plugin 和 theme 的实现。

    更多细节参考 `Pelican 文档 <http://pelican.readthedocs.org/en/latest/>`_ 。


.. PELICAN_BEGIN_SUMMARY

近日想写的东西越积越多，终于下定决心重新设计了一遍 Pelican 的主题，加之一些精选的插件。
于是本博客就变成你们现在看到的样子了。
接下来从主题和插件，也即外用与内体两方面介绍一下这次改版的细节。

.. PELICAN_END_SUMMARY

外用：基于Material Design的主题
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

这个界面风格要从 Google 在 `I/O 2014 大会 <https://www.google.com/events/io>`_ 上公布 
Android L 也即 后来的 Lollipop 说起。 他们在谈论界面设计的时候公布了他们的
设计准则： `Material Design <http://www.google.com/design/spec/material-design/introduction.html>`_ (`中文非官方翻译 <http://wcc723.gitbooks.io/google_design_translate/>`_ )。
当然这只是一些准则，总结并描述了之前在 Web 设计和移动端 App 界面设计方面的一些规范，
并且用材料的类比来形象化的比喻这个准则。关于 Material Design 的更多中文资料可 `参考这里 <http://www.ui.cn/Material/>`_ 。

看到 Material Design 之后就觉得这个设计风格非常符合直觉，于是想在这边也用上 Material Design。
但是我在 Web 前端科技树上没点多少技能点，所以想找找别人实现好的模板或者框架直接套用上。
从而就找到了这几个：


Polymer Paper Elements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. panel-default:: 
  :title: Polymer

  .. image:: https://www.polymer-project.org/images/logos/p-logo.svg
      :alt: Polymer logo

Google 官方提供的参考实现应该是 `Polymer <https://www.polymer-project.org/>`_ 中的
`Paper Elements <https://www.polymer-project.org/docs/elements/paper-elements.html>`_ 。

由于是官方参考实现，这个框架的确非常忠实地实现了 Material Design 的设计，但是同时由于它
基于 `HTML5 Web Components <http://webcomponents.org/>`_ 构建，相关技术我还不太懂，浏览器兼容性和其余 HTML 技术的兼容性也还不太完善的样子…… 

并且对于我这个 Web 开发的半吊子来说，Polymer 只是提供了一组设计组建，没有完善的 Responsive 布局支持，也没有
Navbar 这种常见的框架组建，真的要用起来的话还需要手工实现不少东西。
于是口水了半天之后只好放弃……以后可能真的会换用这个，只是目前需要学的东西太多了。


Angular Material Design 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. panel-default::
  :title: AngularJS

  .. image:: https://angularjs.org/img/AngularJS-large.png
      :alt: AngularJS logo


`AngularJS <https://angularjs.org/>`_ 是 Google 对 Web Components 技术的另一个尝试。
而这额 `Angular Material Design <https://material.angularjs.org/>`_ 项目就是基于 AngularJS 构建的
Material Design 库啦，同样是 Google 出品所以应该算得上半个官方实现吧。
相比于 Polymer, AngularJS 算是实用了很多，提供了基于 `CSS Flexbox <http://www.w3.org/TR/css3-flexbox/>`_ 的
布局。有人对这两者的评价是， 如果说 Polymer 代表了未来趋势，那么 AngularJS 就是现阶段可用的 Web Components 了。

只不过同样是因为它是 Components 的框架，对 WebApp 的支持很丰富，大量采用 Ajax 等 JavaScript 技术，
对于我这个静态博客来说仍然稍显高级了……非常担心还不支持 HTML5 的浏览器比如 W3M 甚至 cURL 对它的支持程度。
于是最终也没有使用它。
